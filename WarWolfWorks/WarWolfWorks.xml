<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WarWolfWorks</name>
    </assembly>
    <members>
        <member name="T:WarWolfWorks.AdvancedDebug">
            <summary>
            An advanced way to debug code information.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LayerIsActive(System.Int32)">
            <summary>
            Returns true if the given layer is active.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LayerIsActive(System.String)">
            <summary>
            Returns true if the given layer is active.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.RefreshDebugger">
            <summary>
            Refreshes all variables to be up-to-date with WWWSettings.ini file.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogException(System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.Int32)">
            <summary>
            Logs a message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarning(System.Object,System.Int32)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarning(System.Object,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogError(System.Object,System.Int32)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogError(System.Object,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogFormat(System.String,System.Int32,System.Object[])">
            <summary>
            Logs a message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogFormat(System.String,System.String,System.Object[])">
            <summary>
            Logs a message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarningFormat(System.String,System.Int32,System.Object[])">
            <summary>
            Logs a warning message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarningFormat(System.String,System.String,System.Object[])">
            <summary>
            Logs a warning message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogErrorFormat(System.String,System.Int32,System.Object[])">
            <summary>
            Logs an error message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogErrorFormat(System.String,System.String,System.Object[])">
            <summary>
            Logs an error message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogDelegate(System.Delegate)">
            <summary>
            Uses <see cref="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.Int32)"/> to debug all delegates inside a <see cref="T:System.Delegate"/>.
            </summary>
            <param name="delegate"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Uses <see cref="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.Int32)"/> to debug all elements inside a IEnumerable using T.ToString().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Uses <see cref="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.String)"/> to debug all elements inside a IEnumerable using T.ToString().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="layer"></param>
        </member>
        <member name="T:WarWolfWorks.Attributes.AsEnumStatAttribute">
            <summary>
            Use this attribute to draw a stat's stacking and affection with enum fields instead of int fields.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Attributes.AsEnumStatAttribute.StackingType">
            <summary>
            What <see cref="T:System.Enum"/> type the stacking is assigned to.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Attributes.AsEnumStatAttribute.AffectionType">
            <summary>
            What <see cref="T:System.Enum"/> type the affection is assigned to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.AsEnumStatAttribute.#ctor(System.Type)">
            <summary>
            Creates an <see cref="T:WarWolfWorks.Attributes.AsEnumStatAttribute"/> which has a custom <see cref="F:WarWolfWorks.Attributes.AsEnumStatAttribute.AffectionType"/> and <see cref="F:WarWolfWorks.Attributes.AsEnumStatAttribute.StackingType"/> set to <see cref="T:WarWolfWorks.NyuEntities.Statistics.EWWWStacking"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.AsEnumStatAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Creates an <see cref="T:WarWolfWorks.Attributes.AsEnumStatAttribute"/> which has a custom <see cref="F:WarWolfWorks.Attributes.AsEnumStatAttribute.AffectionType"/> and <see cref="F:WarWolfWorks.Attributes.AsEnumStatAttribute.StackingType"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Attributes.CompleteNoS">
            <summary>
            Attribute which removes all "s_" or "S_" for every field.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.CompleteNoS.#ctor">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Attributes.CompleteNoS"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Attributes.NonEntityUsage">
            <summary>
            Use this attribute if a Stat isn't always owned by an Entity.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Attributes.NonEntityUsage.NeverUsed">
            <summary>
            If true, it means that the stat will never be used by an Entity, not just temporary.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.NonEntityUsage.#ctor(System.Boolean)">
            <summary>
            Determines a Stat that may sometimes not be used by an Entity.
            </summary>
            <param name="neverUsed">If true, it means that the stat will never be used by an Entity, not just temporary.</param>
        </member>
        <member name="T:WarWolfWorks.Attributes.NoSAttribute">
            <summary>
            Removes "s_" from a serialized field inside the inspector; Useful for naming variables.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Attributes.NoSAttribute.Padding">
            <summary>
            In case some field get cropped out.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.NoSAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Attributes.NoSAttribute"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.NoSAttribute.#ctor(System.Single)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Attributes.NoSAttribute"/> with extra space at the end; This is here in case a field gets cropped off.
            </summary>
            <param name="padding"></param>
        </member>
        <member name="T:WarWolfWorks.Attributes.RenameAttribute">
            <summary>
            Renames a variable in the inspector without changing it in code or creating a custom editor.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Attributes.RenameAttribute.label">
            <summary>
            Name that it will be changed to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Attributes.RenameAttribute.#ctor(System.String)">
            <summary>
            Renames a variable in the inspector without changing it in code or creating a custom editor.
            </summary>
            <param name="label">Name that it will be changed to.</param>
        </member>
        <member name="T:WarWolfWorks.AudioSystem.AudioManager">
            <summary>
            Core class to handle audio.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.AudioManager.DefaultAudioMixerGroup">
            <summary>
            The default <see cref="T:UnityEngine.Audio.AudioMixerGroup"/> that will be assigned to new <see cref="T:UnityEngine.AudioSource"/> components.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.GetAudioSourceAtIndex(System.Int32)">
            <summary>
            Returns the <see cref="T:UnityEngine.AudioSource"/> component on the specified index.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.GetAudioPlayerAtIndex(System.Int32)">
            <summary>
            Returns the <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> element on the specified index.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.Init(System.Int32)">
            <summary>
            Initiates the <see cref="T:WarWolfWorks.AudioSystem.AudioManager"/>.
            </summary>
            <param name="poolSize"></param>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.AddAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)">
            <summary>
            Adds an audio player to the list of used <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> elements.
            Returns the <see cref="T:UnityEngine.AudioSource"/> used by the given <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> to change it's settings.
            </summary>
            <param name="audioPlayer"></param>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.RemoveAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)">
            <summary>
            Attempts to remove a <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/>.
            </summary>
            <param name="audioPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.ForceRemoveAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)">
            <summary>
            Attempts to remove a <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> ignoring it's <see cref="P:WarWolfWorks.AudioSystem.AudioPlayer.Disposable"/>.
            </summary>
            <param name="audioPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioManager.QueueRemoveAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)">
            <summary>
            Queues the removal of a <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/>; It will remove the specified <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> as soon as it's <see cref="P:WarWolfWorks.AudioSystem.AudioPlayer.Disposable"/>
            returns true.
            </summary>
            <param name="audioPlayer"></param>
        </member>
        <member name="T:WarWolfWorks.AudioSystem.AudioPlayer">
            <summary>
            Used by <see cref="T:WarWolfWorks.AudioSystem.AudioManager"/> to play a sound.
            (Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IAwake"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IStart"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IOnDestroy"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.AudioPlayer.Parent">
            <summary>
            The <see cref="T:WarWolfWorks.AudioSystem.AudioManager"/> parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.AudioPlayer.Index">
            <summary>
            The index of this <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> in it's <see cref="T:WarWolfWorks.AudioSystem.AudioManager"/> parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.AudioPlayer.Played">
            <summary>
            The currently played audio clip.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.AudioPlayer.Disposable">
            <summary>
            As long as this returns false, <see cref="M:WarWolfWorks.AudioSystem.AudioManager.RemoveAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)"/> will not remove this <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.AudioPlayer.OnQueuedRemove">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.AudioSystem.AudioManager.QueueRemoveAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)"/> was used on this <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.AudioSystem.BasicAudioPlayer">
            <summary>
            A simple <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> to play a single sound once, or in a loop.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.BasicAudioPlayer.Played">
            <summary>
            Returns the clip set through the <see cref="T:WarWolfWorks.AudioSystem.BasicAudioPlayer"/> constructor or through the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.BasicAudioPlayer.Disposable">
            <summary>
            Returns false if this <see cref="T:WarWolfWorks.AudioSystem.BasicAudioPlayer"/> was set to loop, otherwise it will be removed if the
            clip used finished playing.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.BasicAudioPlayer.#ctor(UnityEngine.AudioClip,System.Boolean)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.AudioSystem.BasicAudioPlayer"/>.
            </summary>
            <param name="clip"></param>
            <param name="loops"></param>
        </member>
        <member name="T:WarWolfWorks.AudioSystem.MusicAudioPlayer">
            <summary>
            A <see cref="T:WarWolfWorks.AudioSystem.AudioPlayer"/> that has a start, looping middle, and an end which triggers when <see cref="M:WarWolfWorks.AudioSystem.AudioManager.QueueRemoveAudioPlayer(WarWolfWorks.AudioSystem.AudioPlayer)"/>
            is called on this <see cref="T:WarWolfWorks.AudioSystem.MusicAudioPlayer"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.MusicAudioPlayer.Played">
            <summary>
            Returns the played clip based on start, loop or end clip based on various conditions.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AudioSystem.MusicAudioPlayer.Disposable">
            <summary>
            Returns true if the end clip has finished, otherwise returns false.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.MusicAudioPlayer.OnQueuedRemove">
            <summary>
            Sets the played clip to the end clip.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.MusicAudioPlayer.#ctor(UnityEngine.AudioClip,UnityEngine.AudioClip,UnityEngine.AudioClip)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.AudioSystem.MusicAudioPlayer"/>.
            </summary>
            <param name="startClip"></param>
            <param name="loopClip"></param>
            <param name="endClip"></param>
        </member>
        <member name="M:WarWolfWorks.AudioSystem.MusicAudioPlayer.#ctor(WarWolfWorks.AudioSystem.MusicAudioPlayer)">
            <summary>
            Creates a duplicate of another <see cref="T:WarWolfWorks.AudioSystem.MusicAudioPlayer"/>.
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:WarWolfWorks.Debugging.Command">
            <summary>
            Used with <see cref="T:WarWolfWorks.Debugging.Console"/> for commands.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.Command.Recognition">
            <summary>
            The string that needs to be input for the command to be used.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.Command.Description">
            <summary>
            The description of the command.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.Command.OnPassed(System.String)">
            <summary>
            Called when the command is used.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:WarWolfWorks.Debugging.Command_Help">
            <summary>
            A class which is used as help to write all commands and all their descriptions.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.Command_Help.Recognition">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.Command_Help.OnPassed(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:WarWolfWorks.Debugging.Console">
            <summary>
            A class used for an in-game console and commands.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.Console.FullText">
            <summary>
            Full text of the console.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Debugging.Console.OnWrite">
            <summary>
            Invoked when text is added to the console.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Debugging.Console.OnClear">
            <summary>
            Invoked when the console is cleared.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Debugging.Console.OnPassed">
            <summary>
            Invoked when a command is successfully passed.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.GetCommands">
            <summary>
            Returns a collection of all available commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.AddCommand(WarWolfWorks.Debugging.Command)">
            <summary>
            Adds a command to the list of available commands.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.RemoveCommand(WarWolfWorks.Debugging.Command)">
            <summary>
            Removes a command from the list of available commands.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.Write(System.Object,WarWolfWorks.Debugging.MessageType)">
            <summary>
            Adds text to the console.
            </summary>
            <param name="text"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.Write">
            <summary>
            Adds a new line to the console text.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.Clear">
            <summary>
            Clears all console text.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.Console.GetClosestCommandRecognition(System.String)">
            <summary>
            Returns the command with the closest recognition to the given text.
            </summary>
            <param name="text"></param>
            <returns>
            Returns the command with the closest <see cref="P:WarWolfWorks.Debugging.Command.Recognition"/> to the given <paramref name="text"/>;
            If none were found to be any close, null is returned.
            </returns>
        </member>
        <member name="T:WarWolfWorks.Debugging.EnumFlagsAttribute">
            <summary>
            Displays an enum value inside the inspector as Flags.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.EnumFlagsAttribute.enumName">
            <summary>
            Custom name of the enum value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.EnumFlagsAttribute.#ctor">
            <summary>
            Displays an enum value inside the inspector as Flags.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.EnumFlagsAttribute.#ctor(System.String)">
            <summary>
            Displays an enum value inside the inspector as Flags with a custom name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:WarWolfWorks.Enums.Direction">
            <summary>
            Global enum to handle directions.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Neutral">
            <summary>
            The neutral direction, where X, Y and Z are 0.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Up">
            <summary>
            Y Axis +
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Down">
            <summary>
            Y Axis -
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Left">
            <summary>
            X Axis -
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Right">
            <summary>
            X Axis +
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Forward">
            <summary>
            Z Axis +
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.Direction.Backward">
            <summary>
            Z Axis -
            </summary>
        </member>
        <member name="T:WarWolfWorks.Enums.SlickBorderFlags">
            <summary>
            Which sides to apply the slick border to.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Enums.SlickNavigationType">
            <summary>
            Navigation type used by <see cref="!:SlickMenu"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickNavigationType.None">
            <summary>
            No navigation; All elements are visual only, and are not meant to be interacted with.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickNavigationType.Standard">
            <summary>
            Standard navigation; All navigation is handled with <see cref="T:WarWolfWorks.Enums.Direction"/>.
            (Important Note: When the hovered index is selected, the menu's SelectionIndex will NOT change,
            it only will if you put "SelectionIndex = Index;" at the start of <see cref="!:LHMenu&lt;T&gt;.OnSelectionAccepted(int)"/>.)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickNavigationType.LongNavigation">
            <summary>
            All navigation is handled with <see cref="T:WarWolfWorks.Enums.Direction"/>, but a cell must first be selected in order to be accepted,
            unlike <see cref="F:WarWolfWorks.Enums.SlickNavigationType.Standard"/> which gets accepted immediately.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickNavigationType.LongNavigationExceptMouse">
            <summary>
            Uses long navigation, but ignores it's long navigation rules with left-mouse button.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Enums.SlickSelectionType">
            <summary>
            Describes how a menu option/cell is "selected".
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickSelectionType.Unselected">
            <summary>
            The menu cell is not selected.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickSelectionType.Hovered">
            <summary>
            The menu is about to be selected, but isn't.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickSelectionType.Selected">
            <summary>
            The meny cell is selected.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Enums.SlickSelectionType.SelectedHovered">
            <summary>
            The menu cell is both selected and hovered on.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Extensions.Keys">
            <summary>
            An extention class for a more reusable input detection. Depends on <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> for key names.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Extensions.Keys.Get">
            <summary>
            Use the indexer of this to access a key's state.
            (Example: Keys.Get["AwesomeKey"])
            </summary>
        </member>
        <member name="M:WarWolfWorks.Extensions.Keys.UpdateServicedKeys">
            <summary>
            Updates all keys used by <see cref="T:WarWolfWorks.Extensions.Keys"/>; Draws all key names and values from <see cref="T:WarWolfWorks.Utility.DefaultKeys"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Extensions.Keys.Item(System.String)">
            <summary>
            Gets the state of a key under the given name.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Extensions.Keys.ToString">
            <summary>
            Returns <see cref="F:WarWolfWorks.Extensions.Keys.KEYS_OBJECT_NAME"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Extensions.KeyState">
            <summary>
            State of a key; Used by <see cref="T:WarWolfWorks.Extensions.Keys"/> to give a key's input state.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Extensions.KeyState.None">
            <summary>
            The key is not interacted with.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Extensions.KeyState.Pressed">
            <summary>
            The key is first pressed. (Equivalent to <see cref="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)"/>)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Extensions.KeyState.Held">
            <summary>
            The key is held down. (Equivalent to <see cref="M:UnityEngine.Input.GetKey(UnityEngine.KeyCode)"/>)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Extensions.KeyState.Released">
            <summary>
            The key is being released. (Equivalent to <see cref="M:UnityEngine.Input.GetKeyUp(UnityEngine.KeyCode)"/>)
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IAdvancedHealth">
            <summary>
            An advanced version of <see cref="T:WarWolfWorks.Interfaces.IHealth"/>.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IAdvancedHealth.OnDamaged">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.Interfaces.IAdvancedHealth.DamageHealth(System.Object)"/> was suiccessful.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.ImmunityDuration">
            <summary>
            Immunity duration in seconds.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.UsesImmunity">
            <summary>
            Determines if this instance implements Immunity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.IsImmune">
            <summary>
            Should determine when the immunity is triggered or not.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.Calculator">
            <summary>
            Separate component which should calculate the final value in <see cref="M:WarWolfWorks.Interfaces.IAdvancedHealth.DamageHealth(System.Object)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.ImmunityEffect">
            <summary>
            Separate component which should be used with the immunity system.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAdvancedHealth.DamageHealth(System.Object)">
            <summary>
            What calculates health and triggers all other events in this interface.
            </summary>
            <param name="damage"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAdvancedHealth.TriggerImmunity(System.Single)">
            <summary>
            Method to trigger immunity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAdvancedHealth.StopImmunity">
            <summary>
            Stops an immunity triggered with <see cref="M:WarWolfWorks.Interfaces.IAdvancedHealth.TriggerImmunity(System.Single)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.ICloneInstructable">
            <summary>
            An item which has instructions when duplicated.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IColorable">
            <summary>
            Interface used by <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> to manage colors.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IColorable.ColorApplier">
            <summary>
            Color which will be applied by a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.ICoroutinable">
            <summary>
            Determines a component which uses a pointer to 
            <see cref="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/> and 
            <see cref="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ICoroutinable.StartCoroutine(System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Should point to <see cref="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
            <param name="routine"></param>
            <param name="verifier"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ICoroutinable.StopCoroutine(System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Should point to <see cref="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
            <param name="routine"></param>
            <param name="verifier"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IDeinitiatable">
            <summary>
            Indicates an object that can be deinitiated; Usually paired with <see cref="T:WarWolfWorks.Interfaces.IInitiatable"/> or <see cref="T:WarWolfWorks.Interfaces.IParentInitiatable`1"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IDeinitiatable.Deinit">
            <summary>
            Deinitiates this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IEulerAngles">
            <summary>
            Indicates an object which has euler angles.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IEulerAngles.EulerAngles">
            <summary>
            The euler angles.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IFocusable">
            <summary>
            Indicates a focusable object.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IFocusable.IsFocused">
            <summary>
            The focused state of this <see cref="T:WarWolfWorks.Interfaces.IFocusable"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IHealth">
            <summary>
            Basic interface for implementing a Health class.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IHealth.OnDeath">
            <summary>
            Invoked when <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/> reaches 0.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IHealth.OnHealthAdded">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.Interfaces.IHealth.AddHealth(System.Single)"/> is invoked. Float value is the health added.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IHealth.MaxHealth">
            <summary>
            Value that clamps <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth">
            <summary>
            The current health.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealth.AddHealth(System.Single)">
            <summary>
            Adds to <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealth.RemoveHealth(System.Single)">
            <summary>
            Removes from <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IHealthDamage">
            <summary>
            Interface used to calcucate health for a Health system.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealthDamage.FinalValue(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth,System.Boolean@)">
            <summary>
            Value that will be used to remove health with.
            </summary>
            <param name="damage"></param>
            <param name="entity"></param>
            <param name="triggerImmunity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealthDamage.FinalHeal(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth)">
            <summary>
            Value that will be used to add health.
            </summary>
            <param name="heal"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealthDamage.AcceptableValue(System.Object)">
            <summary>
            Determines if the value passed is correct for damage.
            </summary>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealthDamage.AcceptableHealValue(System.Object)">
            <summary>
            Determines if the value passed is correct for a heal.
            </summary>
            <param name="heal"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IImmunityEffect`1">
            <summary>
            Interface used for custom effect when a <see cref="T:WarWolfWorks.Interfaces.IAdvancedHealth"/> object enters immunity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.OnAdded">
            <summary>
            Invoked when this immunity effect is added to a <see cref="T:WarWolfWorks.Interfaces.IAdvancedHealth"/>, or when it is initiated with it.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.OnTrigger">
            <summary>
            This is invoked when immunity is first triggered.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.WhileTrigger">
            <summary>
            Invoked for as long as the immunity is active.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.OnEnd">
            <summary>
            This is invoked when immunity ends.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IIndexable">
            <summary>
            Indicates a component that can be indexed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IIndexable.Index">
            <summary>
            The index of this <see cref="T:WarWolfWorks.Interfaces.IIndexable"/> component.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IIndexMenu">
            <summary>
            Interface for implementing a Index-based Menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IIndexMenu.MenuIndex">
            <summary>
            Current index of the menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IIndexMenu.Events">
            <summary>
            All events of this <see cref="T:WarWolfWorks.Interfaces.IIndexMenu"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInitiatable">
            <summary>
            Used for basic initiation of an object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInitiatable.Init">
            <summary>
            Initiates it.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInitiated">
            <summary>
            Interface to be implemented for an initiatable component/object.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IInitiated.Initiated">
            <summary>
            Returns the initiated state of this <see cref="T:WarWolfWorks.Interfaces.IInitiated"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInstantiatable">
            <summary>
            Used with an Unity Object to be called right after (preferably still inside) <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object)"/>.
            (Compatible with <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.InstantiateList``1(System.Collections.Generic.IEnumerable{``0})"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInstantiatable.PostInstantiate">
            <summary>
            Instantiate sub-objects which are not automatically instantiated by <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInventory`1">
            <summary>
            Interface for implementing an inventory.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IInventory`1.Item(System.Int32)">
            <summary>
            Returns the item at given index.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.AddItem(`0)">
            <summary>
            Adds an item to the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.RemoveItem(`0)">
            <summary>
            Removes an item from the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the inventory based on index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.RemoveItem(System.Int32,`0@)">
            <summary>
            Removes an item from inventory based on index and returns it in out.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.GetItem(System.String)">
            <summary>
            Returns the first item under the given name.
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.GetItem(System.Int32)">
            <summary>
            Returns the first item under the given index.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.GetItem(System.Predicate{`0})">
            <summary>
            Returns an item based on match given.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.GetItemIndex(`0)">
            <summary>
            Returns the index of the item given inside the inventory; If no item was found, it will return -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IInventory`1.OnItemAdded">
            <summary>
            Invoked when an item is successfully added to the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IInventory`1.OnItemRemoved">
            <summary>
            Invoked when an item is successfully removed from the inventory.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory`1.GetAllItems(System.Boolean)">
            <summary>
            Returns all items inside the inventory.
            </summary>
            <param name="clone"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IInventory`1.ItemsCount">
            <summary>
            Returns the amount of items currently inside the inventory.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IItem">
            <summary>
            An item interface used for to make an Item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IItem.GetID">
            <summary>
            Gets the unique ID of this item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Interfaces.ILockable">
            <summary>
            Interface used for "locking" a component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.ILockable.Locked">
            <summary>
            Determimes if the current object is locked.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ILockable.SetLock(System.Boolean)">
            <summary>
            Sets the lock.
            </summary>
            <param name="to"></param>
        </member>
        <member name="E:WarWolfWorks.Interfaces.ILockable.OnLocked">
            <summary>
            Called when SetLock was called as true.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.ILockable.OnUnlocked">
            <summary>
            Called when SetLock was called as false.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IOnFocus">
            <summary>
            Indicates an object which can be focused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IOnFocus.Focus">
            <summary>
            Invoked when this object is focused.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IOnUnfocus">
            <summary>
            Indicates an object which can be unfocused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IOnUnfocus.Unfocus">
            <summary>
            Invoked when this object is unfocused.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IParentable`1">
            <summary>
            Class for a parenting system.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IParentable`1.Parent">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IParentInitiatable`1">
            <summary>
            Used for basic initiation of a child object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IParentInitiatable`1.Init(`0)">
            <summary>
            Initiates it.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IPosition">
            <summary>
            Indicates an object which has a position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IPosition.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IRefreshable">
            <summary>
            Indicates a refreshable object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRefreshable.Refresh">
            <summary>
            Refreshes this object.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IRotatable">
            <summary>
            Interface used for detailed/advanced rotation of an object.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotatable.ToRotateX">
            <summary>
            The transform that will be rotated for the X axis.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotatable.ToRotateY">
            <summary>
            The transform that will be rotated for the Y axis.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotatable.ToRotateZ">
            <summary>
            The transform that will be rotated for the Z axis.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRotatable.GetDestination">
            <summary>
            Rotation towards which this <see cref="T:WarWolfWorks.Interfaces.IRotatable"/> is destinated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotatable.DefaultEulerRotation">
            <summary>
            The default rotation of the <see cref="T:WarWolfWorks.Interfaces.IRotatable"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotatable.CurrentRotation">
            <summary>
            Where this <see cref="T:WarWolfWorks.Interfaces.IRotatable"/> currently is.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotatable.RotationSpeed">
            <summary>
            Speed at which this <see cref="T:WarWolfWorks.Interfaces.IRotatable"/> is rotating.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRotatable.SetRotation(UnityEngine.Vector3)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Interfaces.IRotatable"/>.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRotatable.SetRotation(UnityEngine.Quaternion)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Interfaces.IRotatable"/> in euler angles.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IRotation">
            <summary>
            Indicates an object which has a rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotation.Rotation">
            <summary>
            The rotation.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IScrollablePercentMenu">
            <summary>
            Used to make a scroll menu based on min-max position based on a percentage.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.MinPosition">
            <summary>
            Goes towards this position the closer <see cref="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent"/> is to 0.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.MaxPosition">
            <summary>
            Goes towards this position the closer <see cref="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent"/> is to 1.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.ScrollHolder">
            <summary>
            <see cref="T:UnityEngine.RectTransform"/> which will be moved based on <see cref="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent">
            <summary>
            Percentage at which this menu is scrolled. (percentage in 0-1)
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a Awake method, the equivalent of Unity's Awake method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuAwake.NyuAwake">
            <summary>
            Invoked when the parent <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is initiated.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuComponent">
            <summary>
            Core interface for implementing a Nyu component outside of <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuComponent.Position">
            <summary>
            The position of the parent Nyu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuComponent.Rotation">
            <summary>
            The rotation of the parent Nyu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuComponent.EulerAngles">
            <summary>
            The Euler rotation of the parent Nyu.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuComponentEditor">
            <summary>
            Implement this to an <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/> to implement a custom editor;
            Make sure to wrap the implementation and the <see cref="M:WarWolfWorks.Interfaces.NyuEntities.INyuComponentEditor.NyuOnInspectorGUI"/> in #if UNITY_EDITOR and #endif for your game to be compilable.
            For more info, see preprocessor directives.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuComponentEditor.NyuOnInspectorGUI">
            <summary>
            Draws the custom inspector.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuEntityParentable">
            <summary>
            Interface used for parent-like behaviour for entities and their components.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuEntityParentable.NyuParent">
            <summary>
            The entity's parent.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.NyuEntities.INyuEntityParentable.OnNyuParentSet">
            <summary>
            Invokes when the Parent is set. T1 is child, T2 is Parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a FixedUpdate method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate.NyuFixedUpdate">
            <summary>
            Called every physics frame.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a LateUpdate method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate.NyuLateUpdate">
            <summary>
            Invoked right before unity renders a frame on screen.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnCollisionEnter method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter.NyuOnCollisionEnter(UnityEngine.Collision)">
            <summary>
            Invoked on collision enter.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter2D">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnCollisionEnter2D method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter2D.NyuOnCollisionEnter2D(UnityEngine.Collision2D)">
            <summary>
            Invoked on collision enter.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnCollisionExit method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit.NyuOnCollisionExit(UnityEngine.Collision)">
            <summary>
            Invoked on collision exit.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit2D">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnCollisionExit2D method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit2D.NyuOnCollisionExit2D(UnityEngine.Collision2D)">
            <summary>
            Invoked on collision exit.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnDestroy method; Invoked when either the
            parent entity is destroyed, or when <see cref="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent``1"/> is called.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy.NyuOnDestroy">
            <summary>
            Invoked right before this INyuOnDestroy is about to be removed.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroyQueued">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnDestroyQueued method similar to <see cref="!:Nyu.OnDestroyQueued"/>;
            Invoked right before <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/> when <see cref="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent``1"/> is called, they are both executed
            consecutively however.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroyQueued.NyuOnDestroyQueued">
            <summary>
            Invoked when the parent <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is queued for destruction.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/> or sub-component to indicate that it has an OnDisable method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable.NyuOnDisable">
            <summary>
            Invoked when the parent entity is disabled.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable">
            <summary>
            Used on an <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/> or sub-component to indicate that it has an OnEnable method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable.NyuOnEnable">
            <summary>
            Invoked when the parent entity is enabled.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnTriggerEnter method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter.NyuOnTriggerEnter(UnityEngine.Collider)">
            <summary>
            Invoked on trigger enter.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter2D">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnTriggerEnter2D method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter2D.NyuOnTriggerEnter2D(UnityEngine.Collider2D)">
            <summary>
            Invoked on trigger enter.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnTriggerExit method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit.NyuOnTriggerExit(UnityEngine.Collider)">
            <summary>
            Invoked on trigger exit.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a OnTriggerExit2D method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D.NyuOnTriggerExit2D(UnityEngine.Collider2D)">
            <summary>
            Invoked on trigger exit.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuPreAwake">
            <summary>
            Used for pre-made components to call a method before NyuAwake.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuReferencable">
            <summary>
            Indicates an object that uses a reference to an <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>. (usually owner)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuReferencable.NyuMain">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuStacking">
            <summary>
            Interface used for calculating stats inside an <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>'s <see cref="T:WarWolfWorks.NyuEntities.Statistics.Stats"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuStacking.CalculatedValue(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            Final value that will be returned.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuStacking.Parent">
            <summary>
            Who's stats should this stacking calculate.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuStacking.SetParent(WarWolfWorks.NyuEntities.Statistics.Stats)">
            <summary>
            Sets the <see cref="P:WarWolfWorks.Interfaces.NyuEntities.INyuStacking.Parent"/>.
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuStart">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a Start method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuStart.NyuStart">
            <summary>
            Invoked after initialization.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat">
            <summary>
            Interface for implementing a stat to be used with an <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuStat.Value">
            <summary>
            <see cref="T:System.Single"/> Value returned by this stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuStat.SetValue">
            <summary>
            Used to set the base value of the Stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuStat.Affections">
            <summary>
            Which other stats will it interact with.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.NyuEntities.INyuStat.Stacking">
            <summary>
            How the value should be calculated.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuStat.OnAdded(WarWolfWorks.NyuEntities.Statistics.Stats)">
            <summary>
            Invoked when added to <see cref="T:WarWolfWorks.NyuEntities.Statistics.Stats"/> with <see cref="M:WarWolfWorks.NyuEntities.Statistics.Stats.AddStat(WarWolfWorks.Interfaces.NyuEntities.INyuStat)"/>.
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate">
            <summary>
            Used on a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>, a <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entity or sub-component to indicate that it has a Update method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate.NyuUpdate">
            <summary>
            Invoked every in-game frame.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.NyuEntities.IVelocity">
            <summary>
            Interface used with <see cref="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement"/> to create a velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.NyuEntities.IVelocity.GetValue">
            <summary>
            The final value applied to this velocity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IAwake">
            <summary>
            Icludes Awake for a <see cref="T:UnityEngine.MonoBehaviour"/>-like Awake() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IAwake.Awake">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Awake().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IFixedUpdate">
            <summary>
            Icludes FixedUpdate for a <see cref="T:UnityEngine.MonoBehaviour"/>-like FixedUpdate() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IFixedUpdate.FixedUpdate">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.FixedUpdate().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.ILateUpdate">
            <summary>
            Icludes LateUpdate for a <see cref="T:UnityEngine.MonoBehaviour"/>-like LateUpdate() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.ILateUpdate.LateUpdate">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.LateUpdate().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionEnter">
            <summary>
            Icludes IOnCollisionEnter for a <see cref="T:UnityEngine.MonoBehaviour"/>-like OnCollisionEnter(Collision) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionEnter.OnCollisionEnter(UnityEngine.Collision)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnCollisionEnter(Collision).
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionEnter2D">
            <summary>
            Icludes OnCollisionEnter2D for a <see cref="T:UnityEngine.MonoBehaviour"/>-like OnCollisionEnter2D(Collision2D) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionEnter2D.OnCollisionEnter2D(UnityEngine.Collision2D)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnCollisionEnter2D(Collision2D).
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionExit">
            <summary>
            Icludes OnCollisionExit for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnCollisionExit(Collision) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionExit.OnCollisionExit(UnityEngine.Collision)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnCollisionExit(Collision).
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionExit2D">
            <summary>
            Icludes OnCollisionExit2D for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnCollisionExit2D(Collision2D) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnCollisionExit2D.OnCollisionExit2D(UnityEngine.Collision2D)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnCollisionExit2D(Collision2D).
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnDestroy">
            <summary>
            Icludes OnDestroy for a <see cref="T:UnityEngine.MonoBehaviour"/>-like OnDestroy() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnDestroy.OnDestroy">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnDestroy().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnDisable">
            <summary>
            Includes OnDisable for a <see cref="T:UnityEngine.MonoBehaviour"/>-like OnDisable() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnDisable.OnDisable">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnDisable().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnEnable">
            <summary>
            Includes OnEnable for a <see cref="T:UnityEngine.MonoBehaviour"/>-like OnEnable() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnEnable.OnEnable">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnEnable().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnEnableDisable">
            <summary>
            Icludes OnEnabled and OnDisabled for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnEnable() and OnDisable() method.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerEnter">
            <summary>
            Icludes OnTriggerEnter for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnTriggerEnter(Collider) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerEnter.OnTriggerEnter(UnityEngine.Collider)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnTriggerEnter(Collider).
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerEnter2D">
            <summary>
            Icludes OnTriggerEnter2D for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnTriggerEnter2D(Collider2D) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerEnter2D.OnTriggerEnter2D(UnityEngine.Collider2D)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnTriggerEnter2D(Collider2D).
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerExit">
            <summary>
            Icludes OnTriggerExit for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnTriggerExit(Collider) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerExit.OnTriggerExit(UnityEngine.Collider)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnTriggerExit(Collider).
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerExit2D">
            <summary>
            Icludes OnTriggerExit2D for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnTriggerExit2D(Collider2D) method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IOnTriggerExit2D.OnTriggerExit2D(UnityEngine.Collider2D)">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnTriggerEnter2D(Collider2D).
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IStart">
            <summary>
            Icludes OnStart for <see cref="T:UnityEngine.MonoBehaviour"/>-like Start() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IStart.Start">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Start().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.UnityMethods.IUpdate">
            <summary>
            Icludes Update for a <see cref="T:UnityEngine.MonoBehaviour"/>-like Update() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.UnityMethods.IUpdate.Update">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Update().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Internal.Settings">
            <summary>
            General settings of the WWWLibrary.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.Apply">
            <summary>
            Applies all changes made to their respective files (CTS).
            </summary>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.UtilityCanvas">
            <summary>
            Canvas which is created under the name UtilitiesCanvas if no canvas was present on the scene.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Internal.Settings.UtilityCanvasType">
            <summary>
            Used to determine the behaviour of <see cref="P:WarWolfWorks.Internal.Settings.UtilityCanvas"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.FIRST_FOUND">
            <summary>
            Takes the first <see cref="T:UnityEngine.Canvas"/> found inside the given scene.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.PREFABBED">
            <summary>
            Takes a canvas inside a Resources folder and loads it through <see cref="M:UnityEngine.Resources.Load``1(System.String)"/>
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.BY_NAME_IN_SCENE">
            <summary>
            Takes the first <see cref="T:UnityEngine.GameObject"/> inside the active scene under given name.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.INSTANTIATE_NEW">
            <summary>
            Instantiates a new canvas that will be purely used by the WWWLibrary.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.MANUAL_SET">
            <summary>
            The canvas will not load itself; Instead, the user is in charge of setting it with using <see cref="P:WarWolfWorks.Internal.Settings.UtilityCanvas"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasType">
            <summary>
            Gets the <see cref="T:WarWolfWorks.Internal.Settings.UtilityCanvasType"/> from it's CTS save.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasResourcesPath">
            <summary>
            If the <see cref="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasType"/> is <see cref="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.PREFABBED"/>, it will return the path to the object it was set to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasNameLoad">
            <summary>
            If the <see cref="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasType"/> is <see cref="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.BY_NAME_IN_SCENE"/>, it will return the name of the object that will be searched for in the scene.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.AdvancedDebugStyle">
            <summary>
            Current <see cref="T:WarWolfWorks.Internal.Settings.DebugStyle"/> of <see cref="T:WarWolfWorks.AdvancedDebug"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.DebugInfoColor">
            <summary>
            Color which will be used for Log information.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.DebugWarningColor">
            <summary>
            Color which will be used for LogWarning information.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.DebugErrorColor">
            <summary>
            Color which will be used for LogError information.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugLogColor">
            <summary>
            Gets the Log <see cref="T:UnityEngine.Color"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugWarningColor">
            <summary>
            Gets the LogWarning <see cref="T:UnityEngine.Color"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugErrorColor">
            <summary>
            Gets the LogError <see cref="T:UnityEngine.Color"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Internal.Settings.DebugStyle">
            <summary>
            Determines how <see cref="T:WarWolfWorks.AdvancedDebug"/> will behave.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.EDITOR_GAME_DEBUG">
            <summary>
            Will display using both console and editor debugging.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.EDITOR_DEBUG_ONLY">
            <summary>
            Will only display messages inside the editor.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.IN_GAME_DEBUG_ONLY">
            <summary>
            Will only display messages using the console.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.DISABLED">
            <summary>
            Disables <see cref="T:WarWolfWorks.AdvancedDebug"/> debugging.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugStyle">
            <summary>
            Gets the <see cref="T:WarWolfWorks.Internal.Settings.DebugStyle"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.LayerToSavableString(System.String,System.Boolean)">
            <summary>
            Default layer used by <see cref="T:WarWolfWorks.AdvancedDebug"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.ToLayerStreamingName(System.Int32)">
            <summary>
            Gives the name of the variable to be used with <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/>'s loading.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugLayers">
            <summary>
            Gets the debug layer read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.DefaultStackingType">
            <summary>
            The default type of stacking used by Stat drawers and custom editors from the <see cref="N:WarWolfWorks"/> library.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.DefaultAffectionsType">
            <summary>
            The default type of affection used by Stat drawers and custom editors from the <see cref="N:WarWolfWorks"/> library.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.LibraryLanguage">
            <summary>
            Language of this library.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir">
            <summary>
            A <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Freki"/> with a reload/magazine system.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.OnReloadEnd">
            <summary>
            Invoked when a reload is successfully performed.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.OnReloadStart">
            <summary>
            Invoked when a reload is started.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.GetMagazine">
            <summary>
            The current amount of "bullets" inside this attack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.GetMagazineCapacity">
            <summary>
            Returns the maximum capacity of the magazine.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.MagazineReloadProgress">
            <summary>
            The reload progress of the magazine.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.IsReloading">
            <summary>
            Returns the reloading state of this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.GetReloadSpeed">
            <summary>
            The speed at which this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir"/> reloads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.GetMagazineConsumption">
            <summary>
            The amount of ammo consumed when the attack is triggered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.SetMagazine(System.Int32)">
            <summary>
            Used by <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir"/> to set the magazine to full once reloading is finished.
            Make sure to point to the same value <see cref="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.GetMagazine"/> does unless you're absolutely sure of what you're doing.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.CanAttack">
            <summary>
            Returns true if the APM allows it, the attack is not reloading and magazine is higher than 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.ConsumeMagazine(System.Boolean)">
            <summary>
            Consumes the magazine based on <see cref="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.GetMagazineConsumption"/>.
            </summary>
            <param name="reloadOnEmpty">If true and the magazine reaches 0, it will automatically start the reload.</param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.Reload">
            <summary>
            Starts the reload of this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.NyuUpdate">
            <summary>
            When overriding, make sure to include "base.NyuUpdate();" as it handles the magazine's reload as well as <see cref="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.APMCounter"/>'s countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Fenrir.NyuAwake">
            <summary>
            Sets the magazine to it's max capacity.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystemV2.Freki">
            <summary>
            The base class to attack with.
            Supported interfaces: 
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStart"/>, 
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.OnTriggerSuccess">
            <summary>
            Invoked when a successful (and properly activated) <see cref="M:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.OnTrigger"/> was called.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.GetAPM">
            <summary>
            The attacks per minute (APM) of this attack; The higher the value the faster the attack will be.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.APMCounter">
            <summary>
            The counter which counts down the timer between attack of the RPM; It is considered as finished when it's value returns 0.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.Index">
            <summary>
            The index of this attack in it's <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.Parent">
            <summary>
            The parent which handles this attack.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.NyuMain">
            <summary>
            Pointer to the parent's NyuMain.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.Handler">
            <summary>
            The <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/> which manages this attack.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.GetPoint">
            <summary>
            Returns the point at the same index as this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Freki"/> from it's parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.RestartAPMCounter">
            <summary>
            Resets the <see cref="P:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.APMCounter"/> to restart it's countdown (make it count down again).
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.CanAttack">
            <summary>
            Returns true when all conditions for this attack are met.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Freki.OnTrigger">
            <summary>
            Invoked when CanAttack returns true and the condition attached to the same Odin group as this attack returns true.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystemV2.Geri">
            <summary>
            Used as a "bonus" condition for an attack group (<see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin"/>). Usually used for Input detection or enemy AI-related checks.
            Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Geri.Parent">
            <summary>
            The <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Geri"/> to which this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Geri"/> belongs to.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Geri.NyuMain">
            <summary>
            Pointer to the parent's NyuMain.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Geri.Handler">
            <summary>
            The <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/> which manages this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Geri"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Geri.Index">
            <summary>
            The index of this geri in it's parent.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Geri.Met">
            <summary>
            Returns true when the condition of this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Geri"/> is met.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler">
            <summary>
            A class which handles <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin"/> classes for attacking.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.OnAttackTrigger">
            <summary>
            Invoked when a <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Freki"/> successfully attacks.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetOdins">
            <summary>
            Returns an array of all odins of this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetOdinsCount">
            <summary>
            Returns the amount of odins currently in the <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.Points">
            <summary>
            The transform points used as firepoint on this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetPoint(System.Int32)">
            <summary>
            Returns the point at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.RefreshOdins">
            <summary>
            Refreshes the index values of all odins.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.AddOdin(WarWolfWorks.NyuEntities.AttackSystemV2.Odin)">
            <summary>
            Adds an odin to be handled.
            </summary>
            <param name="odin"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.RemoveOdin(System.Int32)">
            <summary>
            Removes an odin at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetOdinIndex(WarWolfWorks.NyuEntities.AttackSystemV2.Odin)">
            <summary>
            Returns the index of an odin currently residing in this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/>.
            </summary>
            <param name="odin"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetOdin(System.Int32)">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin"/> located at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetOdin(System.Predicate{WarWolfWorks.NyuEntities.AttackSystemV2.Odin})">
            <summary>
            Returns a <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin"/> based on a match.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.GetOdinIndex(System.Predicate{WarWolfWorks.NyuEntities.AttackSystemV2.Odin})">
            <summary>
            Attempts to find an odin's index based on a match.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler.SetOdin(System.Int32,WarWolfWorks.NyuEntities.AttackSystemV2.Odin)">
            <summary>
            Overrides an existing odin at the given index with another odin.
            </summary>
            <param name="index"></param>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin">
            <summary>
            The core class which groups all necessary objects to make a functional attack. Handled by <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.NyuOdinHandler"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.GetFreki">
            <summary>
            The attack of this attack group.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.GetGeri">
            <summary>
            The attack condition of this attack group.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.Index">
            <summary>
            The index of this odin in it's parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.Parent">
            <summary>
            The parent of this <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.New(WarWolfWorks.NyuEntities.AttackSystemV2.Freki,WarWolfWorks.NyuEntities.AttackSystemV2.Geri,System.Int32)">
            <summary>
            Returns a new instance of a <see cref="T:WarWolfWorks.NyuEntities.AttackSystemV2.Odin"/>.
            </summary>
            <param name="freki"></param>
            <param name="geri"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.PostInstantiate">
            <summary>
            Call this after instantiating for a complete instantiation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.op_Implicit(WarWolfWorks.NyuEntities.AttackSystemV2.Odin)~WarWolfWorks.NyuEntities.AttackSystemV2.Freki">
            <summary>
            Allows to implicitly cast an odin as a freki.
            </summary>
            <param name="odin"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystemV2.Odin.op_Implicit(WarWolfWorks.NyuEntities.AttackSystemV2.Odin)~WarWolfWorks.NyuEntities.AttackSystemV2.Geri">
            <summary>
            Allows to implicitly cast an odin as a geri.
            </summary>
            <param name="odin"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystem.Attack">
            <summary>
            To be used with <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack"/>; Handles attacking with various utilities.
            (Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            and <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.NyuMain">
            <summary>
            The <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> holder of this attack.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Parent">
            <summary>
            The <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Parent"/> component of the holder.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.Attack.OnAttack">
            <summary>
            Invoked when the Attack successfully invokes <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.OnTrigger"/>
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.Attack.OnReloadTrigger">
            <summary>
            Invokes when <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/> is called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.Attack.OnReload">
            <summary>
            Invokes after <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/> finishes.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.IsInitiated">
            <summary>
            Determines if the attack was assigned to an entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Name">
            <summary>
            Name given to this attack through the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Description">
            <summary>
            The description of the Attack, serialized as "Attack Description" in the inspector.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.AttackSystem.Attack.s_Damage">
            <summary>
            Uncalculated damage. (overridable through <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Damage"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Damage">
            <summary>
            The calculated damage of the attack. (overridable)
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.AttackSystem.Attack.s_AttackSpeed">
            <summary>
            Uncalculated attack speed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.AttackSpeed">
            <summary>
            Rate at which Attack.Trigger() can be called. (Calculated as 60 / AttackSpeed for an RPM-like functionality).
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.AttackSystem.Attack.s_MagazineSize">
            <summary>
            Uncalculated magazine size.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.MagazineSize">
            <summary>
            Calculated maximum capacity of the attack's magazine.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.InfiniteAmmo">
            <summary>
            If true, MagazineSize and ReloadSpeed will be ignored and all shots will not consume any ammunition.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.SetInfiniteAmmo(System.Boolean)">
            <summary>
            Sets <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.InfiniteAmmo"/> to given value.
            </summary>
            <param name="to"></param>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.AttackSystem.Attack.ns_currentMagazine">
            <summary>
            Used by <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.CurrentMagazine"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.CurrentMagazine">
            <summary>
            How many "bullets" are currently in the magazine.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.AmmoConsumption">
            <summary>
            The ammo consumption of the attack per <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Trigger"/>. (1 by default)
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.AttackSystem.Attack.s_ReloadSpeed">
            <summary>
            Uncalculated reload speed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.ReloadSpeed">
            <summary>
            Calculated speed at which <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/> is invoked.
            The lower this value is the faster it will reload.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.DefaultAttackCondition">
            <summary>
            The default attack condition which is set when an attack group inside <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.Parent"/> is not set.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.AttackSpeedAllowsTrigger">
            <summary>
            Returns true if the interval between attack based on attack speed was met.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.NyuUpdate">
            <summary>
            When overriding, make sure you include "base.Update();" as it takes care of the attack speed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.HasAmmo">
            <summary>
            Returns true if either: InfiniteAmmo is true, CurrentMagazine is higher than 0 or AmmoConsumption is less than 1.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.CanAttack">
            <summary>
            Returns true if AttackSpeedAllowsTrigger is true, Has ammo is true and IsReloading is false.
            Keep in mind this does not take into account <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetCanAttack(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.TimeScale">
            <summary>
            Multiplier at which <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.AttackSpeed"/> is calculated. Works in a similar way to <see cref="P:UnityEngine.Time.timeScale"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTrigger(System.Boolean)">
            <summary>
            Allows you to trigger <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.OnTrigger"/> without meeting any required condition.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTriggerOnRepeat(System.Boolean,System.Single,System.Single)">
            <summary>
            Activates <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTrigger(System.Boolean)"/> repeatedly with a Unity Coroutine for a specified duration in seconds.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTriggerOnRepeat(System.Boolean,System.Int32,System.Single)">
            <summary>
            Activates <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTrigger(System.Boolean)"/> repeatedly with a Unity Coroutine for a specified duration in triggers invoked.
            </summary>
            <param name="consumeAmmo"></param>
            <param name="shotsLength"></param>
            <param name="delayBetweenShots"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTriggerOnRepeat(System.Boolean,System.Predicate{WarWolfWorks.NyuEntities.AttackSystem.Attack},System.Single)">
            <summary>
            Activates <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ForceTrigger(System.Boolean)"/> repeatedly with a Unity Coroutine as long as @while returns true.
            </summary>
            <param name="consumeAmmo"></param> 
            <param name="while"></param>
            <param name="delayBetweenShots"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.TroubleShootTrigger">
            <summary>
            Here in case an Attack is permanently frozen due to bad exception handling.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ConsumeAmmo">
            <summary>
            When called, it will remove AmmoConsumption from CurrentMagazine, and if CurrentMagazine is less than or equal to 0, it will automatically invoke <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload">
            <summary>
            Starts a reload.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload(System.Single)">
            <summary>
            Starts a reload from specified point (0 being beginning, 1 being end).
            </summary>
            <param name="from01"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.InstantReload">
            <summary>
            Goes through <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/> with a delay equal to 0 instead of <see cref="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.ReloadSpeed"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.GetReloadProgress">
            <summary>
            Returns the current progress of the reload in percent (01). Used by <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/>.
            You should override this if you have already overridden <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.SetReloadProgress(System.Single)"/>,
            and it should point to the exact same value, except if you're absolutely sure of what you're doing.
            Pointing to a different variable than <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.SetReloadProgress(System.Single)"/> is using will
            always cause an infinite reload to happen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.SetReloadProgress(System.Single)">
            <summary>
            The progress of the reload in percent (01). Used by <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/>.
            You should override this only to change what value this is applied to, otherwise
            it can generate unwanted behaviour. If you override this method, make sure to override
            <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.GetReloadProgress"/> to point to the exact same value.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.ReloadIsPaused">
            <summary>
            Determines if the <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/>'s invokation was paused.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.Attack.IsReloading">
            <summary>
            Determines if the weapon is currently reloading.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.CancelReload(System.Boolean)">
            <summary>
            If <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/> was called, it's invokation will be canceled.
            </summary>
            <param name="resetProgress"/>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.PauseReload">
            <summary>
            Pauses the invokation of <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.Reload"/> without completely stopping it. To resume, call <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ResumeReload"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.ResumeReload">
            <summary>
            Resumes a paused invokation called by <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.PauseReload"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Attack.OnTrigger">
            <summary>
            This method is called when all conditions are met and the Attack successfully attacks.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystem.Condition">
            <summary>
            Condition used for <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.Condition.Met(WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Returns true if the condition is met.
            </summary>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack">
            <summary>
            Core class of the attack system. (sealed)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.OnAttackTriggered">
            <summary>
            Triggers when this entity successfully attacks.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.OnBeforeAttackTriggered">
            <summary>
            Triggers right before this entity attack. (only triggers if the attack was successful)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetAttacks``1(System.Int32[])">
            <summary>
            Gets all attacks of given indexes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ofIndex"></param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetAttack(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> scriptable object through index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.TryGetAttack(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> scriptable object through index; 
            In case of an exception, it will simply return null.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetCondition(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> of an attack group through index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetCondition(WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Returns the first <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> inside an attack group which has the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> given.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.TryGetCondition(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> of an attack group through index; 
            In case of an exception, it will simply return null.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.TryGetCondition(WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Returns the first <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> inside an attack group which has the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> given.
            In case of an exception, it will simply return null.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetPoint(System.Int32)">
            <summary>
            Returns the attack point (<see cref="T:UnityEngine.Transform"/>) of an attack group through index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetPoint(WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Returns the first attack point (<see cref="T:UnityEngine.Transform"/>) inside an attack group which has the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> given.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.TryGetPoint(System.Int32)">
            <summary>
            Returns the attack point (<see cref="T:UnityEngine.Transform"/>) of an attack group through index.
            In case of an exception, it will simply return null.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.TryGetPoint(WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Returns the first attack point (<see cref="T:UnityEngine.Transform"/>) inside an attack group which has the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> given.
            In case of an exception, it will simply return null.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetCanAttack(System.Int32)">
            <summary>
            Returns the CanAttack variable if the given group index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetIndex(WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Gets the index of the group in which the given <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> component resides.
            Returns -1 if Group of <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> given was not found.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetIndex(WarWolfWorks.NyuEntities.AttackSystem.Condition)">
            <summary>
            Gets the index of the group in which the given <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> component resides.
            Returns -1 if Group of <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> given was not found.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.GetIndex(UnityEngine.Transform)">
            <summary>
            Gets the index of the group in which the given attack point (<see cref="T:UnityEngine.Transform"/>) component resides.
            Returns -1 if Group of attack point given was not found.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SetAttack(System.Int32,WarWolfWorks.NyuEntities.AttackSystem.Attack)">
            <summary>
            Sets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="atk"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SetAttack(System.Int32,WarWolfWorks.NyuEntities.AttackSystem.Attack@)">
            <summary>
            Sets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="atk"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SetCondition(System.Int32,WarWolfWorks.NyuEntities.AttackSystem.Condition)">
            <summary>
            Sets the <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="condition"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SetAttackPoint(System.Int32,UnityEngine.Transform)">
            <summary>
            Sets the attack point (<see cref="T:UnityEngine.Transform"/>) component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="point"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SetCanAttack(System.Int32,System.Boolean)">
            <summary>
            Set the CanAttack variable under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.AddAttack(WarWolfWorks.NyuEntities.AttackSystem.Attack,WarWolfWorks.NyuEntities.AttackSystem.Condition,UnityEngine.Transform,System.Boolean)">
            <summary>
            Adds an attack group to all attacks of this <see cref="!:EntityAttack"/>.
            </summary>
            <param name="attack"></param>
            <param name="condition"></param>
            <param name="point"></param>
            <param name="canAttack"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.RemoveAttack(System.Int32)">
            <summary>
            Removes an attack at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachAttack(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Attack})">
            <summary>
            Loops through each Group's <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Attack"/> component and calls given action with it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachCondition(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Condition})">
            <summary>
            Loops through each Group's <see cref="T:WarWolfWorks.NyuEntities.AttackSystem.Condition"/> component and calls given action with it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachPoint(System.Action{UnityEngine.Transform})">
            <summary>
            Loops through each Group's attack point (<see cref="T:UnityEngine.Transform"/>) and calls given action with it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachGroup(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Attack,WarWolfWorks.NyuEntities.AttackSystem.Condition,UnityEngine.Transform})">
            <summary>
            Loops through each Group using their main variables and invokes given action based upon them.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SafeForEachAttack(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Attack})">
            <summary>
            A safer but slighly less optimal <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachAttack(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Attack})"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SafeForEachCondition(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Condition})">
            <summary>
            A safer but slighly less optimal <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachCondition(System.Action{WarWolfWorks.NyuEntities.AttackSystem.Condition})"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.SafeForEachPoint(System.Action{UnityEngine.Transform})">
            <summary>
            A safer but slighly less optimal <see cref="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.ForEachPoint(System.Action{UnityEngine.Transform})"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.AttackSystem.NyuAttack.WarWolfWorks#Interfaces#NyuEntities#INyuUpdate#NyuUpdate">
            <summary>
            Unity's Update method called by NyuComponent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.HealthSystem.DefaultHealthDamage">
            <summary>
            Default health damage set on <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/> when <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.Calculator"/> is null. 
            Uses <see cref="T:System.Single"/> as it's base type.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.DefaultHealthDamage.AcceptableHealValue(System.Object)">
            <summary>
            Checks if the value given is a float or int value.
            </summary>
            <param name="heal"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.DefaultHealthDamage.AcceptableValue(System.Object)">
            <summary>
            Checks if the value given is a float value.
            </summary>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.DefaultHealthDamage.FinalHeal(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth)">
            <summary>
            Returns the value given in float.
            </summary>
            <param name="heal"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.DefaultHealthDamage.FinalValue(System.Object,WarWolfWorks.NyuEntities.HealthSystem.NyuHealth,System.Boolean@)">
            <summary>
            Returns the value given in float.
            </summary>
            <param name="damage"></param>
            <param name="entity"></param>
            <param name="triggersImmunity"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage">
            <summary>
            Base class to use with <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage.AcceptableHealValue(System.Object)">
            <summary>
            Determines if the type of heal passed is correct.
            </summary>
            <param name="heal"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage.AcceptableValue(System.Object)">
            <summary>
            Determines if the type of damage passed is correct.
            </summary>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage.FinalHeal(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth)">
            <summary>
            Returns the final calculated heal value.
            </summary>
            <param name="heal"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage.FinalValue(System.Object,WarWolfWorks.NyuEntities.HealthSystem.NyuHealth,System.Boolean@)">
            <summary>
            Returns the final calculated damage value.
            </summary>
            <param name="damage"></param>
            <param name="entity"></param>
            <param name="triggersImmunity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage.WarWolfWorks#Interfaces#IHealthDamage#FinalValue(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth,System.Boolean@)">
            <summary>
            Returns the final calculated value.
            </summary>
            <param name="damage"></param>
            <param name="health"></param>
            <param name="triggersImmunity"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect">
            <summary>
            <see cref="T:UnityEngine.ScriptableObject"/> used for custom effect when an <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> enters immunity through <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.ImmunityTime">
            <summary>
            Duration at which the current immunity will last.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.ImmunityCountdown">
            <summary>
            The countdown/cooldown of the current immunity timer; To be used with ImmunityTime for percentage duration.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.Parent">
            <summary>
            Parent of this <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.OnTrigger">
            <summary>
            What happens when Immunity first triggers.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.OnEnd">
            <summary>
            What happens when Immunity stops.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.OnAdded">
            <summary>
            What happens when Immunity is either added to a <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/>, or when it was already attached to it on instantiation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.ImmunityEffect.WhileTrigger">
            <summary>
            Equivalent to Unity's update method.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth">
            <summary>
            Core class of the health system. (sealed)
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnDamaged">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.DamageHealth(System.Object)"/> is successfully invoked.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnHealed">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.HealHealth(System.Object)"/> is successfully invoked.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnDeath">
            <summary>
            Invoked when <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.CurrentHealth"/> reaches 0.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnAnyDamaged">
            <summary>
            Invoked when any <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/> invokes <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.DamageHealth(System.Object)"/> successfully.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnAnyHealed">
            <summary>
            Invoked when any <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/> invokes <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.HealHealth(System.Object)"/> successfully.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnAnyHealthAdded">
            <summary>
            Invoked when any <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/> invokes <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.AddHealth(System.Single)"/> successfully.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnAnyHealthRemoved">
            <summary>
            Invoked when any <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/> invokes <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.RemoveHealth(System.Single)"/> successfully.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnHealthAdded">
            <summary>
            Ivoked when <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.AddHealth(System.Single)"/> is called. Float value is the amount of health that was added.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.OnHealthRemoved">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.RemoveHealth(System.Single)"/> is called. Float value is the amount of health that was added.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.CurrentHealth">
            <summary>
            The current health of the <see cref="P:WarWolfWorks.NyuEntities.NyuComponent.NyuMain"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.MaxHealth">
            <summary>
            The maximum value at which <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.CurrentHealth"/> can be.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.DamageParent">
            <summary>
            If true and this component's <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuEntityParentable"/>,
            it will damage the parent's Health instead.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.WarWolfWorks#Interfaces#NyuEntities#INyuPreAwake#NyuPreAwake">
            <summary>
            Unity's Awake method called by <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.ImmunityDuration">
            <summary>
            Duration in which the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is unable to take damage. (Only works if <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.UsesImmunity"/> is true)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.UsesImmunity">
            <summary>
            Determines if the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> can use the immunity system.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.IsImmune">
            <summary>
            Is the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> currently immune?
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.Calculator">
            <summary>
            The calculator used by this <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>. If null on Awake, it will be set to <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.DefaultHealthDamage"/> by default.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.PreviousDamage">
            <summary>
            Damage that was successfully passed in <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.DamageHealth(System.Object)"/> on it's most recent use.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.PreviousHealthRemoved">
            <summary>
            The amount that was successfully removed using <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.RemoveHealth(System.Single)"/> on it's most recent use.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.PreviousHeal">
            <summary>
            The amount that was successfully healed using <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.HealHealth(System.Object)"/> on it's most recent use.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.PreviousHealthAdded">
            <summary>
            The amount that was successfully added using <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.AddHealth(System.Single)"/> on it's most recent use.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.AddHealth(System.Single)">
            <summary>
            Adds the specified amount to <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.HealHealth(System.Object)">
            <summary>
            To make this method work, you will need to assign a custom or premade <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage"/>.
            </summary>
            <param name="heal"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.RemoveHealth(System.Single)">
            <summary>
            Removes the specified amount from <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.DamageHealth(System.Object)">
            <summary>
            To make this method work, you will need to assign a custom or premade <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.HealthDamage"/>.
            </summary>
            <param name="damage"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.TriggerImmunity(System.Single)">
            <summary>
            Triggers the immunity of this <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>. (Works only if <see cref="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.UsesImmunity"/> is true)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.ImmunityEffect">
            <summary>
            Effect which will be Invoked when Immunity is triggered.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.WarWolfWorks#Interfaces#IAdvancedHealth#ImmunityEffect">
            <summary>
            Must be of type <see cref="T:WarWolfWorks.Interfaces.IImmunityEffect`1"/> where T is <see cref="T:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.ImmunityTask">
            <summary>
            The current immunity task.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.StopImmunity">
            <summary>
            Stops an immunity previously triggered with <see cref="M:WarWolfWorks.NyuEntities.HealthSystem.NyuHealth.TriggerImmunity(System.Single)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1">
            <summary>
            Advanced Non-Fixed-Size Inventory for your Non-Fixed-Size Inventory needs.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.Item(System.Int32)">
            <summary>
            Returns the item at the current index; In case of an exception, returns null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.ItemsCount">
            <summary>
            Returns the amount of items currently inside the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.OnItemAdded">
            <summary>
            Invoked when an item is successfully added to the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.OnItemRemoved">
            <summary>
            Invoked when an item is successfully removed from the inventory.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.AddItem(`0)">
            <summary>
            Adds an item to this inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.GetAllItems(System.Boolean)">
            <summary>
            Returns all items currently inside the inventory.
            </summary>
            <param name="clone"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.GetItem(System.String)">
            <summary>
            Returns the first item found under given name.
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.GetItem(System.Int32)">
            <summary>
            Returns the first item under given ID.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.GetItem(System.Predicate{`0})">
            <summary>
            Returns an item based on given match.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.GetItemIndex(`0)">
            <summary>
            Returns the index of an item currently inside the inventory; If no item was found, it will return -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.RemoveItem(`0)">
            <summary>
            Removes an item from this inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from this inventory at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuFlexibleInventory`1.RemoveItem(System.Int32,`0@)">
            <summary>
            Removes an item from this inventory based on index and returns it in out.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1">
            <summary>
            Advanced Fixed-Size Inventory for your Fixed-Size Inventory needs.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.InventorySize">
            <summary>
            The max capacity of the inventory. (Settable only through the inspector)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.ItemsCount">
            <summary>
            Returns the count of all inventory slots assigned with an Item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.FirstEmptyIndex">
            <summary>
            Gets the first slot index that doesn't contain an item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.FirstEmptyIndex(System.Int32)">
            <summary>
            Gets the first slot index that doesn't contain an item starting from specified index.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.FirstEmptyIndex(System.Int32,System.Int32)">
            <summary>
            Gets the first slot index that doesn't contain an item starting from specified index with specific count.
            </summary>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.FirstEmptyIndex(WarWolfWorks.Utility.IntRange)">
            <summary>
            Gets the first slot index that within given range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.GetAllItems(System.Boolean)">
            <summary>
            Returns all items held by this inventory.
            </summary>
            <param name="clone">If true, it will return a list of cloned Items, instead of the real ones.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.GetItem(System.String)">
            <summary>
            Gets the first item inside the Inventory with the given name.
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.GetItem(System.Int32)">
            <summary>
            Gets the first item inside the Inventory with the given ID.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.GetItem(System.Predicate{`0})">
            <summary>
            Gets an Item through custom predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.GetItemIndex(`0)">
            <summary>
            Gets the index of a given item inside the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.OnItemAdded">
            <summary>
            Invoked when an item is successfully added to the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.OnItemRemoved">
            <summary>
            Invoked when an item is successfully removed from the inventory. Int indicates it's index in the inventory.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.Item(System.Int32)">
            <summary>
            Returns the item under specified index.
            </summary>
            <param name="key"></param>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.InvalidCastException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.AddItem(`0)">
            <summary>
            Adds an Item to the first empty slot.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.AddItem(`0,System.Int32)">
            <summary>
            Adds an Item to the specified index.
            </summary>
            <param name="item"></param>
            <param name="toIndex"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.AddItem(`0,System.Int32,`0@)">
            <summary>
            Adds an item to specified index regardless of if the index already has an item.
            If the an Item existed at specified index, it will be assigned to replacedItem.
            </summary>
            <param name="item"></param>
            <param name="toIndex"></param>
            <param name="replacedItem"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.RemoveItem(`0)">
            <summary>
            Removes the specified item from Inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.RemoveItem(System.Int32)">
            <summary>
            Removes an Item inside the inventory under given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuInventory`1.RemoveItem(System.Int32,`0@)">
            <summary>
            Removes an item from this inventory based on index and returns it in out.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Itemization.NyuItem">
            <summary>
            Base class for Itemization in the WWWLibrary.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuItem.Name">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuItem.Description">
            <summary>
            Description of the item. (for In-Game use)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Itemization.NyuItem.Sprite">
            <summary>
            The item's UI.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuItem.GetID">
            <summary>
            Unique ID of this item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuItem.OnAddedToInventory(System.Object)">
            <summary>
            Invoked when this item is added to an Inventory.
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuItem.OnRemovedFromInventory(System.Object)">
            <summary>
            Invoked when this item is removed from an Inventory.
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Itemization.NyuItem.Find(System.Int32)">
            <summary>
            Searches for all resource items by their ID.      
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.NyuRotation">
            <summary>
            Rotation component which takes care of the entity's rotation; Contains various utilities
            as well as general rotation functionnality.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuRotation.Position">
            <summary>
            The position of the parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuRotation.Rotation">
            <summary>
            The rotation of the parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuRotation.EulerAngles">
            <summary>
            The euler rotation of the parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuRotation.NyuMain">
            <summary>
            The <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> parent of this component.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystemV2.DynamicVelocity">
            <summary>
            A velocity which uses a func event to determine it's velocity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.DynamicVelocity.Initiated">
            <summary>
            Is this velocity currently residing in a NyuMovement?
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.DynamicVelocity.Parent">
            <summary>
            The parent of this velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.DynamicVelocity.Init(WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement)">
            <summary>
            Initiates this <see cref="T:WarWolfWorks.NyuEntities.MovementSystemV2.DynamicVelocity"/>; Taken care of by <see cref="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement"/>.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement">
            <summary>
            Base class for movement of an entity.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.OnVelocityAdded">
            <summary>
            Invoked when a velocity is added.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.OnVelocityRemoved">
            <summary>
            Invoked when a velocity is removed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.DefaultVelocity">
            <summary>
            The default velocity to be applies to this <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>. (<see cref="P:UnityEngine.Vector3.zero"/> by default)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.Velocities">
            <summary>
            Every velocity stacked onto the entity's movement.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.AddVelocity(WarWolfWorks.Interfaces.NyuEntities.IVelocity)">
            <summary>
            Adds a velocity to this <see cref="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement"/>.
            </summary>
            <param name="velocity"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.AddVelocities(WarWolfWorks.Interfaces.NyuEntities.IVelocity[])">
            <summary>
            Adds a list of velocities to this <see cref="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement"/>.
            </summary>
            <param name="velocities"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.AddVelocities(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.NyuEntities.IVelocity})">
            <summary>
            Adds an enumerable of velocities.
            </summary>
            <param name="velocities"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.RemoveVelocity(WarWolfWorks.Interfaces.NyuEntities.IVelocity)">
            <summary>
            Removes an existing velocity.
            </summary>
            <param name="velocity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.RemoveVelocities(WarWolfWorks.Interfaces.NyuEntities.IVelocity[])">
            <summary>
            Removes a list of velocities.
            </summary>
            <param name="velocities"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.RemoveVelocities(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.NyuEntities.IVelocity})">
            <summary>
            Removes a IEnumerable of velocities.
            </summary>
            <param name="velocities"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.ContainsVelocity(WarWolfWorks.Interfaces.NyuEntities.IVelocity)">
            <summary>
            Returns true if the given velocity is contained within this <see cref="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.GetAllVelocities``1">
            <summary>
            Returns all velocities of given generic type.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.FindVelocity(System.Predicate{WarWolfWorks.Interfaces.NyuEntities.IVelocity})">
            <summary>
            Finds a velocity.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.FindAllVelocities(System.Predicate{WarWolfWorks.Interfaces.NyuEntities.IVelocity})">
            <summary>
            Finds all velocities that match the given condition.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.RemoveAllVelocities(System.Predicate{WarWolfWorks.Interfaces.NyuEntities.IVelocity})">
            <summary>
            Removes all velocities matching the given predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.UsedVelocity">
            <summary>
            Final Velocity that will be applied to this entity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> to the given position.
            </summary>
            <param name="position">World position to move the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> to.</param>
            <param name="respectPhysics">If true, this method will try to respect the world physics in your game. (E.G not move inside another collider but next to it, etc..)</param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.NyuUpdate">
            <summary>
            When overriding this class, make sure to call "base.NyuUpdate();" inside it as it
            calls all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/> velocities. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.NyuFixedUpdate">
            <summary>
            When overriding this class, make sure to call "base.NyuFixedUpdate();" inside it as it
            calls all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/> velocities. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.NyuLateUpdate">
            <summary>
            When overriding this class, make sure to call "base.NyuLateUpdate();" inside it as it
            calls all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/> velocities. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/> implementation)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement2D">
            <summary>
            Base class for an entity's 2D movement.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement2D.Rigidbody">
            <summary>
            Rigidbody used by this component.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement2D.NyuUpdate">
            <summary>
            Base NyuUpdate method applies UsedVelocity to <see cref="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement2D.Rigidbody"/> 
            and calls all INyuUpdate implementations of it's velocities. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement2D.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the entity to the specified position.
            </summary>
            <param name="position">Position to which the entity will be moved.</param>
            <param name="respectPhysics">If true, the position moving will respect other colliders and will try not to go inside or past them, otherwise it will ignore that.</param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement3D">
            <summary>
            Base class for an entity's 3D movement.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement3D.Rigidbody">
            <summary>
            Rigidbody used by this component.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement3D.NyuUpdate">
            <summary>
            Base NyuUpdate method applies UsedVelocity to <see cref="P:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement3D.Rigidbody"/> 
            and calls all INyuUpdate implementations of it's velocities. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement3D.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the entity to the specified position.
            </summary>
            <param name="position">Position to which the entity will be moved.</param>
            <param name="respectPhysics">If true, the position moving will respect other colliders and will try not to go inside or past them, otherwise it will ignore that.</param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity">
            <summary>
            A velocity which removes itself after it's countdown has ran out.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.StartCountdown">
            <summary>
            Value at which the countdown started.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.Countdown">
            <summary>
            The current countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.Time01">
            <summary>
            Returns the progress of the countdown in 0-1.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.#ctor(UnityEngine.Vector3,System.Single)">
            <summary>
            Creates a simple countdown velocity without affections.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.#ctor(WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity)">
            <summary>
            Creates a duplicate of a countdown velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.#ctor(UnityEngine.Vector3,System.Single,System.Int32[])">
            <summary>
            Creates a countdown velocity with affections.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.CountdownVelocity.NyuFixedUpdate">
            <summary>
            Manages the timer.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity">
            <summary>
            A basic <see cref="T:WarWolfWorks.Interfaces.NyuEntities.IVelocity"/> which can either take a simple Vector3 value or a Vector3 value with affections.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.Initiated">
            <summary>
            Is this velocity currently residing in a NyuMovement?
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.Parent">
            <summary>
            The parent of this velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.GetValue">
            <summary>
            Retrieves the Vector3 value that will be applied.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.GetUnaffectedValue">
            <summary>
            Returns the Vector3 value unaffected by affections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.SetValue(UnityEngine.Vector3)">
            <summary>
            Sets the value of the base vector.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.GetAffections">
            <summary>
            Returns the affections applied to this velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.SetAffections(System.Int32[])">
            <summary>
            Sets the affections affecting this velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.Init(WarWolfWorks.NyuEntities.MovementSystemV2.NyuMovement)">
            <summary>
            Initiates this velocity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.#ctor(UnityEngine.Vector3)">
            <summary>
            Creates a simple velocity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.#ctor(UnityEngine.Vector3,System.Int32[])">
            <summary>
            Creates a velocity with affections.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystemV2.Velocity.#ctor(WarWolfWorks.NyuEntities.MovementSystemV2.Velocity)">
            <summary>
            Creates a duplicate of the given velocity.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement">
            <summary>
            Base class for movement of an entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.DefaultVelocity">
            <summary>
            The default velocity to be applies to this <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>. (<see cref="P:UnityEngine.Vector3.zero"/> by default)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.IsMoving">
            <summary>
            Boolean which returns true if the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is moving. (Doesn't have any function  by itself, if you want it to be functional you would need to give it the functionality yourself).
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.Velocities">
            <summary>
            Every velocity stacked onto the entity's movement.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.AddVelocity(WarWolfWorks.NyuEntities.MovementSystem.Velocity)">
            <summary>
            Adds a velocity to this <see cref="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement"/>.
            </summary>
            <param name="velocity"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.AddVelocities(WarWolfWorks.NyuEntities.MovementSystem.Velocity[])">
            <summary>
            Adds a list of velocities to this <see cref="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement"/>.
            </summary>
            <param name="velocities"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.AddVelocities(System.Collections.Generic.IEnumerable{WarWolfWorks.NyuEntities.MovementSystem.Velocity})">
            <summary>
            Adds an enumerable of velocities.
            </summary>
            <param name="velocities"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.RemoveVelocity(WarWolfWorks.NyuEntities.MovementSystem.Velocity)">
            <summary>
            Removes an existing velocity.
            </summary>
            <param name="velocity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.RemoveVelocities(WarWolfWorks.NyuEntities.MovementSystem.Velocity[])">
            <summary>
            Removes a list of velocities.
            </summary>
            <param name="velocities"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.RemoveVelocities(System.Collections.Generic.IEnumerable{WarWolfWorks.NyuEntities.MovementSystem.Velocity})">
            <summary>
            Removes a IEnumerable of velocities.
            </summary>
            <param name="velocities"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.ContainsVelocity(WarWolfWorks.NyuEntities.MovementSystem.Velocity)">
            <summary>
            Returns true if the given velocity is contained within this <see cref="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.FindVelocity(System.Predicate{WarWolfWorks.NyuEntities.MovementSystem.Velocity})">
            <summary>
            Finds a velocity.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.FindAllVelocities(System.Predicate{WarWolfWorks.NyuEntities.MovementSystem.Velocity})">
            <summary>
            Finds all velocities that match the given condition.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.RemoveAllVelocities(System.Predicate{WarWolfWorks.NyuEntities.MovementSystem.Velocity})">
            <summary>
            Removes all velocities matching the given predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.OnVelocityAdded">
            <summary>
            Invoked when a velocity is added.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.OnVelocityRemoved">
            <summary>
            Invoked when a velocity is removed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.UsedVelocity">
            <summary>
            Final Velocity that will be applied to this entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> to the given position.
            </summary>
            <param name="position">World position to move the <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> to.</param>
            <param name="respectPhysics">If true, this method will try to respect the world physics in your game. (E.G not move inside another collider but next to it, etc..)</param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement.NyuFixedUpdate">
            <summary>
            When overriding this class, make sure to call "base.NyuFixedUpdate();" inside it as it is what 
            calculates the time left in Velocities through <see cref="P:WarWolfWorks.NyuEntities.MovementSystem.Velocity.Time"/>. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/> implementation)
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D">
            <summary>
            Base class for an entity's 2D movement.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D.Rigidbody">
            <summary>
            Rigidbody used by this component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D.MoveParent">
            <summary>
            If true and this component's <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is <see cref="!:IEntityParentable"/>,
            it will move the parent instead.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D.NyuInitiated">
            <summary>
            Initiated state of <see cref="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D"/>. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D.NyuUpdate">
            <summary>
            Base NyuUpdate method applies UsedVelocity to <see cref="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D.Rigidbody"/>. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement2D.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the entity to the specified position.
            </summary>
            <param name="position">Position to which the entity will be moved.</param>
            <param name="respectPhysics">If true, the position moving will respect other colliders and will try not to go inside or past them, otherwise it will ignore that.</param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D">
            <summary>
            Base class for an entity's 3D movement.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D.Rigidbody">
            <summary>
            Rigidbody used by this component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D.MoveParent">
            <summary>
            If true and this component's <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> is <see cref="!:IEntityParentable"/>,
            it will move the parent instead.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D.NyuInitiated">
            <summary>
            Initiated state of <see cref="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D"/>. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D.NyuUpdate">
            <summary>
            Base OnUpdate method applies UsedVelocity to <see cref="P:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D.Rigidbody"/>. (<see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement3D.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the entity to the specified position.
            </summary>
            <param name="position">Position to which the entity will be moved.</param>
            <param name="respectPhysics">If true, the position moving will respect other colliders and will try not to go inside or past them, otherwise it will ignore that.</param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.MovementSystem.Velocity">
            <summary>
            To be used with <see cref="T:WarWolfWorks.NyuEntities.MovementSystem.NyuMovement"/> to designate a velocity.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.MovementSystem.Velocity.Value">
            <summary>
            Value of the velocity.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.MovementSystem.Velocity.DeleteOnCount0">
            <summary>
            When the velocity timer reaches 0, it will be removed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.MovementSystem.Velocity.Affections">
            <summary>
            Affections. See <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> for more info.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.Velocity.StartTime">
            <summary>
            Time which was set for this velocity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.Velocity.Time">
            <summary>
            Current countdown time.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.MovementSystem.Velocity.Time01">
            <summary>
            Returns the percent of the velocity runout. (Time / StartTime).
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.Velocity.#ctor(UnityEngine.Vector3)">
            <summary>
            Creates a simple velocity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.Velocity.#ctor(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Creates a velocity with a countdown.
            </summary>
            <param name="value"></param>
            <param name="time"></param>
            <param name="deleteOn0"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.Velocity.#ctor(UnityEngine.Vector3,System.Int32[])">
            <summary>
            Creates a velocity with affections.
            </summary>
            <param name="value"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.Velocity.#ctor(UnityEngine.Vector3,System.Single,System.Boolean,System.Int32[])">
            <summary>
            Creates a complete velocity.
            </summary>
            <param name="value"></param>
            <param name="time"></param>
            <param name="deleteOn0"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.MovementSystem.Velocity.#ctor(WarWolfWorks.NyuEntities.MovementSystem.Velocity)">
            <summary>
            Creates a duplicate of the given velocity.
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Nyu">
            <summary>
            Core class of the <see cref="N:WarWolfWorks.NyuEntities"/> system.
            All usable MonoBehaviour methods have an alternative in "INyu" interfaces,
            located inside the <see cref="N:WarWolfWorks.Interfaces.NyuEntities"/> namespace.
            Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroyQueued"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>, 
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit"/> and <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit2D"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Nyu.Stats">
            <summary>
            The entity's stats manager.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Nyu.Tag">
            <summary>
            The additional tag of the entity; Used for additional indentification. 
            (Does not change the value of the serialized tag, only the return value; To change the serialized value, use Reflection on "s_Tag" field.)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Nyu.Position">
            <summary>
            Pointer to transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Nyu.Rotation">
            <summary>
            Pointer to transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Nyu.EulerAngles">
            <summary>
            Pointer to transform.eulerAngles.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Nyu.OnEnabled">
            <summary>
            Invoked when the entity is disabled.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Nyu.OnDisabled">
            <summary>
            Invoked when the entity is enabled.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.InternalManageNyuComponent(WarWolfWorks.Interfaces.NyuEntities.INyuComponent,System.Boolean,System.Boolean)">
            <summary>
            Adds a component to all of it's fitting lists.
            </summary>
            <param name="nyuComponent"></param>
            <param name="addToNormalList">If false, it will only add this component to it's update methods, not the actual component list.</param>
            <param name="addToEnableDisable">If false, it will ignore the <see cref="F:WarWolfWorks.NyuEntities.Nyu.ns_ComponentsEnable"/> and <see cref="F:WarWolfWorks.NyuEntities.Nyu.ns_ComponentsDisable"/> additions.</param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.AddNyuComponent``1">
            <summary>
            Adds a new entity component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.ANC``1">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.AddNyuComponent``1"/> with a shorter name.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.AddNyuComponent(System.Type)">
            <summary>
            Adds a new entity component.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.ANC(System.Type)">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.AddNyuComponent(System.Type)"/> with a shorter name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent``1">
            <summary>
            Attempts to remove an entity component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.RNC``1">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent``1"/> with a shorter name.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent(System.Type)">
            <summary>
            Attempts to remove an entity component.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.RNC(System.Type)">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent(System.Type)"/> with a shorter name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent(WarWolfWorks.Interfaces.NyuEntities.INyuComponent)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/> by reference.
            </summary>
            <param name="existing"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.RNC(WarWolfWorks.Interfaces.NyuEntities.INyuComponent)">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.RemoveNyuComponent(WarWolfWorks.Interfaces.NyuEntities.INyuComponent)"/> with a shorter name.
            </summary>
            <param name="existing"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.GetNyuComponent``1">
            <summary>
            Attempts to retrieve a component of given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.GNC``1">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.GetNyuComponent``1"/> with a shorter name.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.GetNyuComponent(System.Type)">
            <summary>
            Attempts to retrieve a component of given non-generic type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.GNC(System.Type)">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.GetNyuComponent(System.Type)"/> with a shorter name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.TryGetNyuComponent``1(``0@)">
            <summary>
            Attempts to retrieve a component of given T type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.TGNC``1(``0@)">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.NyuEntities.Nyu.TryGetNyuComponent``1(``0@)"/> with a shorter name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.GetNyuComponents``1">
            <summary>
            Returns a list of components of given T type. (Useful for interface searching)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.GetNyuComponents">
            <summary>
            Returns all <see cref="T:WarWolfWorks.NyuEntities.NyuComponent"/> objects present in this <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Nyu.OnDestroyBegin">
            <summary>
            Invoked right after an entity is queued for destruction.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.op_Implicit(WarWolfWorks.NyuEntities.Nyu)~UnityEngine.Transform">
            <summary>
            Returns the Nyu's .transform.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Nyu.ToString">
            <summary>
            Returns the class name of the current entity with it's tag between parantheses.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.NyuComponent">
            <summary>
            Core class to be used with <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> to simulate a component.
            Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroyQueued"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>, 
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit"/> and <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit2D"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuComponent.NyuMain">
            <summary>
            The owner of this component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuComponent.Position">
            <summary>
            The position of the parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuComponent.Rotation">
            <summary>
            The rotation of the parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.NyuComponent.EulerAngles">
            <summary>
            The euler rotation of the parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.NyuManager">
            <summary>
            Manages all entities, as well as provides a substantial amount of utility methods to retrieve entities.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.IC_Update">
            <summary>
            Invokes the update method of all entities.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.IC_FixedUpdate">
            <summary>
            Invokes the FixedUpdate method of all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.IC_LateUpdate">
            <summary>
            Invokes the LateUpdate method of all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.Exists``1">
            <summary>
            Returns true if any <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of given T type exists in the scene.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.Exists(System.Type)">
            <summary>
            Returns true if any <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of given type exists in the scene.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.Find(System.Predicate{WarWolfWorks.NyuEntities.Nyu})">
            <summary>
            Finds an entity by match.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.FindAll(System.Predicate{WarWolfWorks.NyuEntities.Nyu})">
            <summary>
            Finds all entities that match the given condition.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAll">
            <summary>
            Returns an array of all entities in game.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.IsType(WarWolfWorks.NyuEntities.Nyu,System.Type)">
            <summary>
            Returns true if an entity is of a given non-generic type.
            </summary>
            <param name="nyu"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.IsTypeAny(WarWolfWorks.NyuEntities.Nyu,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns true if the entity is of any given non-generic types.
            </summary>
            <param name="nyu"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllVisible(UnityEngine.Camera)">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities to a given camera.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllVisible(UnityEngine.Camera,System.Single)">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities to a given camera within the specified max distance.
            </summary>
            <param name="to"></param>
            <param name="within"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllVisible``1(UnityEngine.Camera)">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities of T type to a given camera.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllVisible``1(UnityEngine.Camera,System.Single)">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities of T type to a given camera within a specified max range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="to"></param>
            <param name="within"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosestVisible``1(UnityEngine.Camera,System.Single)">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities of T type to a given camera within a specified max range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="to"></param>
            <param name="within"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosestVisible(UnityEngine.Camera,System.Single,System.Type)">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities of T type to a given camera within a specified max range.
            </summary>
            <param name="to"></param>
            <param name="within"></param>
            <param name="acceptedType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosestVisible(UnityEngine.Camera,System.Single,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets all visible <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities of T type to a given camera within a specified max range.
            </summary>
            <param name="to"></param>
            <param name="within"></param>
            <param name="acceptedTypes"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest(UnityEngine.Vector3)">
            <summary>
            Returns the closest entity to a given position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest(UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> to a given position within a specified max range.
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest(UnityEngine.Vector3,System.Single,System.Type)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of given type to a given position within a specified max range.
            (Note: <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities assignable from the given type are also counted.)
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <param name="compareType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest(UnityEngine.Vector3,System.Single,System.Type[])">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of given types to the given position within a specified max range.
            (Note: <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities assignable from the given types are also counted.)
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <param name="compareTypes"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest(UnityEngine.Vector3,System.Single,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of given types to the given position within a specified max range.
            (Note: <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> entities assignable from the given types are also counted.)
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <param name="compareTypes"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllWithin(UnityEngine.Vector3,System.Single,System.Type)">
            <summary>
            Returns all entities within the given distance. Only returns nyu entities of given type.
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <param name="compareType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllWithin(UnityEngine.Vector3,System.Single,System.Type[])">
            <summary>
            Returns all entities within the given distance. Only returns nyu entities of given type.
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <param name="compareTypes"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllWithin(UnityEngine.Vector3,System.Single,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns all entities within the given distance. Only returns nyu entities of given type.
            </summary>
            <param name="position"></param>
            <param name="within"></param>
            <param name="compareTypes"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest``1(UnityEngine.Vector3)">
            <summary>
            Returns the closest <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of T type to a given position.
            </summary>
            <typeparam name="T"><see cref="T:WarWolfWorks.NyuEntities.Nyu"/>'s type searched.</typeparam>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetClosest``1(UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> of T type to a given position within a specified max distance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position"></param>
            <param name="within"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.GetAllWithin``1(UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> enitities of given T type within the given range of position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position"></param>
            <param name="within"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.OldestOf(WarWolfWorks.NyuEntities.Nyu,System.Boolean)">
            <summary>
            Returns the oldest parent of an Entity with <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuEntityParentable"/> interface.
            </summary>
            <param name="entity"></param>
            <param name="includeNonParentableParent"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.NyuManager.OnNyuBegin">
            <summary>
            Invoked when an entity is instantiated through any <see cref="T:WarWolfWorks.NyuEntities.NyuManager"/>.New method.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.NyuManager.OnNyuEnd">
            <summary>
            Invoked when an entity is destroyed through <see cref="M:WarWolfWorks.NyuEntities.NyuManager.Destroy(WarWolfWorks.NyuEntities.Nyu)"/>. 
            (Does not get invoked when the entity is destroyed unofficially.)
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.NyuManager.OnNyuEndUnofficial">
            <summary>
            Invoked when an entity is destroyed unofficially.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.New(WarWolfWorks.NyuEntities.Nyu,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Official method to instantiate a new <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>.
            </summary>
            <param name="prefab"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.New``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Official method to instantiate a new <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>.
            </summary>
            <param name="prefab"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.Exception3Check(WarWolfWorks.NyuEntities.Nyu)">
            <summary>
            Checks if an entity implements <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable"/> and/or <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable"/> and throws and exception if it does.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.Destroy(WarWolfWorks.NyuEntities.Nyu)">
            <summary>
            Official method to destroy an entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.NyuManager.DestroyUnofficially(WarWolfWorks.NyuEntities.Nyu)">
            <summary>
            Destroys the given entity without triggering any of it's destroy methods, including it's components.
            (Useful to despawn entities)
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile">
            <summary>
            Class which handles projectile behaviors.
            </summary>
            <summary>
            The core class of the <see cref="N:WarWolfWorks.NyuEntities.ProjectileSystem"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior">
            <summary>
            Class used to make a projectile behave in a specified way.
            (Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter"/> (conditional), <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit"/> (conditional),
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D"/> (conditional), <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D"/> (conditional),
            and <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior.Parent">
            <summary>
            The parent of this behavior.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Tag">
            <summary>
            The current tag of this projectile.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.SetTag(System.String)">
            <summary>
            Sets the <see cref="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Tag"/> to the given value.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.RemoveTag">
            <summary>
            Removes the <see cref="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Tag"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Position">
            <summary>
            Pointer to the <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/>'s transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Euler">
            <summary>
            Pointer to the <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/>'s transform.eulerAngles.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Rotation">
            <summary>
            Pointer to the <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/>'s transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Velocity">
            <summary>
            The velocity of the projectile; Usually assigned to a rigidbody's velocity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behaviors">
            <summary>
            All behaviors affecting this projectile.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.GetBehaviors">
            <summary>
            Returns all behaviors currently affecting this projectile.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.NyuMain">
            <summary>
            The parent of this <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/>.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.OnLocked">
            <summary>
            <see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation; Invoked when <see cref="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.SetLock(System.Boolean)"/> is successfully set to true.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.OnUnlocked">
            <summary>
            <see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation; Invoked when <see cref="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.SetLock(System.Boolean)"/> is successfully set to false.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Locked">
            <summary>
            The locked state of this <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/>. (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation)
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.SetLock(System.Boolean)">
            <summary>
            Attempts to set the locked state of this <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/>. (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation)
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D">
            <summary>
            <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/> used for 3D projectiles; Used by <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3DManager"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D.Velocity">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D"/>'s rigidbody velocity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D.SpriteRenderer">
            <summary>
            The projectile's <see cref="T:UnityEngine.SpriteRenderer"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D.Rigidbody">
            <summary>
            The projectile's <see cref="T:UnityEngine.Rigidbody2D"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D.Collider">
            <summary>
            The projectile's <see cref="T:UnityEngine.SphereCollider"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2DManager">
            <summary>
            Projectile manager for 2D bullets.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2DManager.OnProjectileCreated(WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D)">
            <summary>
            <see cref="T:UnityEngine.MeshFilter"/>と<see cref="T:UnityEngine.MeshRenderer"/>を追加。
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2DManager.New(WarWolfWorks.NyuEntities.Nyu,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Sprite,WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile2D"/>. (Queues an inactive projectile into the pool of active projectiles)
            </summary>
            <param name="owner"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="sprite"></param>
            <param name="behaviors"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D">
            <summary>
            <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/> used for 3D projectiles; Used by <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3DManager"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D.Velocity">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D"/>'s rigidbody velocity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D.MeshFilter">
            <summary>
            The projectile's <see cref="T:UnityEngine.MeshFilter"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D.MeshRenderer">
            <summary>
            The projectile's <see cref="T:UnityEngine.MeshRenderer"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D.Rigidbody">
            <summary>
            The projectile's <see cref="T:UnityEngine.Rigidbody"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D.Collider">
            <summary>
            The projectile's <see cref="T:UnityEngine.SphereCollider"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3DManager">
            <summary>
            Projectile manager for 3D bullets.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3DManager.OnProjectileCreated(WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D)">
            <summary>
            <see cref="T:UnityEngine.MeshFilter"/>と<see cref="T:UnityEngine.MeshRenderer"/>を追加。
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3DManager.New(WarWolfWorks.NyuEntities.Nyu,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Mesh,UnityEngine.Material[],WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile3D"/>. (Queues an inactive projectile into the pool of active projectiles)
            </summary>
            <param name="owner"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="mesh"></param>
            <param name="materials"></param>
            <param name="behaviors"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1">
            <summary>
            The manager of all <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/> objects.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Instance">
            <summary>
            Singleton instance of the manager; Set in inheriting classes.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Populated">
            <summary>
            Returns true if <see cref="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Init(System.Int32)"/> was previously called.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.ProjectileHolder">
            <summary>
            The transform which groups all projectiles together.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Init(System.Int32)">
            <summary>
            Initiates this ProjectileManager. Can be re-invoked to change the pool size; Destroys all previous projectiles in doing so.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.OnProjectileCreated(`0)">
            <summary>
            Invoked when a projectile is added into the pool through <see cref="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Init(System.Int32)"/>.
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.New(WarWolfWorks.NyuEntities.Nyu,`0@,UnityEngine.Vector3,UnityEngine.Quaternion,System.Collections.Generic.IEnumerable{WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior})">
            <summary>
            Use this method at the beginning of your creation method to retrieve a projectile from the pool.
            </summary>
            <param name="owner"></param>
            <param name="projectile"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="behaviors"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.End(WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile)">
            <summary>
            Removes a given projectile from the pool of active projectiles.
            </summary>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.End(`0)">
            <summary>
            Removes a given projectile from the pool of active projectiles.
            </summary>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Update">
            <summary>
            When overriding, make sure to include base.Update() as it calls all <see cref="M:WarWolfWorks.Interfaces.UnityMethods.IUpdate.Update"/> methods
            in applicable <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior"/> components.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.FixedUpdate">
            <summary>
            When overriding, make sure to include base.FixedUpdate() as it calls all <see cref="M:WarWolfWorks.Interfaces.UnityMethods.IFixedUpdate.FixedUpdate"/> methods
            in applicable <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior"/> components.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.LateUpdate">
            <summary>
            When overriding, make sure to include base.LateUpdate() as it calls all <see cref="M:WarWolfWorks.Interfaces.UnityMethods.ILateUpdate.LateUpdate"/> methods
            in applicable <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile.Behavior"/> components.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Projectiles">
            <summary>
            All projectiles.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.ActiveProjectiles">
            <summary>
            List of all active projectiles.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.InactiveProjectiles">
            <summary>
            List of all inactive projectiles.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.GetActiveProjectiles">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all active projectiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.GetInactiveProjectiles">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all inactive projectiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first projectile that matches the given condition.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.FindAll(System.Predicate{`0})">
            <summary>
            Returns all projectiles which match the given condition.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.EnumeratorMoveNext">
            <summary>
            Enumerator-like implementation for getting a new projectile for instantiation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectileManager`1.EnumeratorReset">
            <summary>
            Enumerator-like implementation to reset the itteration.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior">
            <summary>
            The base class for projectile behaviors in <see cref="N:WarWolfWorks.NyuEntities.SerializedProjectiles"/>.
            (Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerEnter2D"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnTriggerExit2D"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionEnter2D"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnCollisionExit2D"/>,
            and <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior.Parent">
            <summary>
            The projectile which uses this behavior.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.SerializedProjectiles.Search">
            <summary>
            Which projectiles will utility methods 
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile">
            <summary>
            Base class for serializable projectiles. Supported interfaces:
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStart"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroyQueued"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Tag">
            <summary>
            The current tag of this projectile.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.SetTag(System.String)">
            <summary>
            Sets the <see cref="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Tag"/> to the given value.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.RemoveTag">
            <summary>
            Removes the <see cref="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Tag"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Behaviors">
            <summary>
            All behaviors this <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/> is currently using.
            When setting this array or any of it's elements to a new object, make sure to call <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.RefreshUpdateLists"/>
            to update all update lists, otherwise any <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior"/> implementations of <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/> or <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/> will not work.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.RefreshUpdateLists">
            <summary>
            Refreshes all behavior update lists.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.OnInit``1(WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager{``0})">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Init(System.Int32)"/> is invoked.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Position">
            <summary>
            Pointer to the <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/>'s transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Euler">
            <summary>
            Pointer to the <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/>'s transform.eulerAngles.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Rotation">
            <summary>
            Pointer to the <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/>'s transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Velocity">
            <summary>
            The velocity of the projectile; Usually assigned to a rigidbody's velocity.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.OnLocked">
            <summary>
            <see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation; Invoked when <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.SetLock(System.Boolean)"/> is successfully set to true.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.OnUnlocked">
            <summary>
            <see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation; Invoked when <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.SetLock(System.Boolean)"/> is successfully set to false.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.Locked">
            <summary>
            The locked state of this <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/>. (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.NyuMain">
            <summary>
            The parent of this projectile.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile.SetLock(System.Boolean)">
            <summary>
            Attempts to set the locked state of this <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/>. (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation)
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1">
            <summary>
            Base class for managing <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile"/> objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.s_PoolSize">
            <summary>
            Used by <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Awake"/> for <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Init(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Initiated">
            <summary>
            The initiated state of this projectile manager.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Awake">
            <summary>
            Calls <see cref="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Init(System.Int32)"/> when <see cref="F:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.s_PoolSize"/> is higher than 0.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Init(System.Int32)">
            <summary>
            Initiates the projectile manager.
            </summary>
            <param name="poolSize"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.New(WarWolfWorks.NyuEntities.Nyu,UnityEngine.Vector3,UnityEngine.Quaternion,`0@,System.Collections.Generic.IEnumerable{WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior})">
            <summary>
            Call this at the beginning of your projectile instantiation method, and continue the initiation when it returns true.
            </summary>
            <param name="parent">The caster of this projectile.</param>
            <param name="position">Starting position of the projectile.</param>
            <param name="rotation">Starting rotation of the projectile.</param>
            <param name="projectile">Returns the projectile used.</param>
            <param name="behaviors">Behaviors set to the projectile. (All behaviors are instantiated before being used to avoid overriding resources.)</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.End(`0)">
            <summary>
            Ends a projectile.
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.End(WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectile)">
            <summary>
            Ends a projectile.
            </summary>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Update">
            <summary>
            When overriding, make sure to include base.Update() as it calls all <see cref="M:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate.NyuUpdate"/> methods
            in applicable <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior"/> components.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.FixedUpdate">
            <summary>
            When overriding, make sure to include base.FixedUpdate() as it calls all <see cref="M:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate.NyuFixedUpdate"/> methods
            in applicable <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior"/> components.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.LateUpdate">
            <summary>
            When overriding, make sure to include base.LateUpdate() as it calls all <see cref="M:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate.NyuLateUpdate"/> methods
            in applicable <see cref="T:WarWolfWorks.NyuEntities.SerializedProjectiles.Behavior"/> components.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.GetActiveProjectiles">
            <summary>
            Returns an array of all active projectiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.GetInactiveProjectiles">
            <summary>
            Returns an array of all inactive projectiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.FindAll(System.Predicate{`0},WarWolfWorks.NyuEntities.SerializedProjectiles.Search)">
            <summary>
            Finds all projectiles matching the given condition.
            </summary>
            <param name="match"></param>
            <param name="searchIn"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.SerializedProjectiles.SProjectileManager`1.Find(System.Predicate{`0},WarWolfWorks.NyuEntities.SerializedProjectiles.Search)">
            <summary>
            Returns the first projectile matching the given condition.
            </summary>
            <param name="match"></param>
            <param name="searchIn"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.CountdownStat">
            <summary>
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> which is removed after a given countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.CountdownStat.SetValue">
            <summary>
            Use this value to set the base value of this stat. (Set-Only)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.CountdownStat.Stacking">
            <summary>
            How the Stat should be calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.CountdownStat.Affections">
            <summary>
            Which stats will this stat interact with.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.CountdownStat.Countdown">
            <summary>
            Starting countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.#ctor(System.Single,System.Int32,System.Single,System.Int32[])">
            <summary>
            Create a Stat.
            </summary>
            <param name="value"></param>
            <param name="stacking"></param>
            <param name="countdown"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.#ctor(WarWolfWorks.NyuEntities.Statistics.CountdownStat)">
            <summary>
            Creates a duplicate of the given stat.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.#ctor(WarWolfWorks.NyuEntities.Statistics.CountdownStat,System.Single)">
            <summary>
            Creates a duplicate of the given stat with a different value.
            </summary>
            <param name="stat"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.Equals(System.Single)">
            <summary>
            Returns true if the Stat's value returns other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.CountdownStat)~System.Single">
            <summary>
            Returns the Stat's value implicitly.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.CountdownStat)~System.Int32">
            <summary>
            Returns the Stat's value implicitly as int.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.CountdownStat)~WarWolfWorks.NyuEntities.Statistics.Stat">
            <summary>
            Returns an equivalent Stat to this <see cref="T:WarWolfWorks.NyuEntities.Statistics.CountdownStat"/>.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.CountdownStat.ToString">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.Statistics.CountdownStat"/>'s value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.EWWWStacking">
            <summary>
            Enum value depicting <see cref="T:WarWolfWorks.NyuEntities.Statistics.WWWStacking"/>'s stacking values. Useful when used with Editor's Enum List Displayer.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.Original">
            <summary>
            Stacking index: Used as base value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.Adder">
            <summary>
            Stacking index: All stats tagged will be added onto the original value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.StackingOriginalMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the original.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.StackingMultiplier">
            <summary>
            Stacking index: tagged will muliply the original value and Adder value. (Applies before StackingOriginalMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.OriginalMultiplier">
            <summary>
            Stacking index: Multiplies the original immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.Multiplier">
            <summary>
            Stacking index: Multiplies the original with adder values immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.StackingFullMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the total value after all multiplications (excluding FullMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.EWWWStacking.FullMultiplier">
            <summary>
            Stacking index: Absolute multiplier.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.LevelStat">
            <summary>
            Stat which uses <see cref="T:WarWolfWorks.Utility.LevelFloat"/> as value.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.LevelStat.Level">
            <summary>
            This stat's level.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.LevelStat.Values">
            <summary>
            All LevelValues of this stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.LevelStat.SetValue">
            <summary>
            Sets the default value of the <see cref="T:WarWolfWorks.Utility.LevelFloat"/> contained by this <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.LevelStat.Stacking">
            <summary>
            How is this LevelStat calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.LevelStat.Affections">
            <summary>
            Which stats will this LevelStat interact with.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.#ctor(System.Single,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates a <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/> with a default value, a level, stacking and affections.
            </summary>
            <param name="defaultVal"></param>
            <param name="level"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.#ctor(WarWolfWorks.Utility.LevelFloat,System.Int32,System.Int32[])">
            <summary>
            Creates a LevelStat instance with multiple affections.
            </summary>
            <param name="levelval"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.#ctor(WarWolfWorks.NyuEntities.Statistics.LevelStat,System.Int32)">
            <summary>
            Creates a duplicate of a LevelStat with the specified level.
            </summary>
            <param name="levelStat"></param>
            <param name="level"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.LevelStat)~System.Single">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>'s value implicitly.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.LevelStat)~System.Int32">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>'s value implicitly as int.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.LevelStat)~WarWolfWorks.NyuEntities.Statistics.Stat">
            <summary>
            Returns an equivalent Stat to this <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.op_Explicit(WarWolfWorks.NyuEntities.Statistics.LevelStat)~WarWolfWorks.Utility.LevelFloat">
            <summary>
            Returns explicitly the <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>'s <see cref="T:WarWolfWorks.Utility.LevelFloat"/> value.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.ToString">
            <summary>
            Returns the <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>'s value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.Equals(System.Single)">
            <summary>
            Returns true if the LevelStat's value is equal to other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.LevelStat.Equals(WarWolfWorks.NyuEntities.Statistics.Stat)">
            <summary>
            Returns true if all <see cref="!:IStat"/> variables from this LevelStat equals to all <see cref="!:IStat"/> variables from other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.RecordStat">
            <summary>
            A <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> which uses the record reference type from C#9.0.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.RecordStat.SetValue">
            <summary>
            Use this value to set the base value of this stat. (Set-Only)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.RecordStat.Stacking">
            <summary>
            How the Stat should be calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.RecordStat.Affections">
            <summary>
            Which stats will this stat interact with.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.#ctor(System.Single,System.Int32,System.Int32[])">
            <summary>
            Create a Stat.
            </summary>
            <param name="value"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.#ctor(WarWolfWorks.NyuEntities.Statistics.RecordStat)">
            <summary>
            Creates a duplicate of the given stat.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.#ctor(WarWolfWorks.NyuEntities.Statistics.RecordStat,System.Single)">
            <summary>
            Creates a duplicate of the given stat with a different value.
            </summary>
            <param name="stat"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.Equals(System.Single)">
            <summary>
            Returns true if the Stat's value returns other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.ToString">
            <summary>
            Returns the value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.RecordStat)~System.Single">
            <summary>
            Returns the Stat's value implicitly.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.RecordStat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.RecordStat)~System.Int32">
            <summary>
            Returns the Stat's value implicitly as int.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.Stacking">
            <summary>
            Base class to use to apply to a <see cref="P:WarWolfWorks.NyuEntities.Statistics.Stats.Stacking"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stacking.AllStats">
            <summary>
            All stats of the parent <see cref="T:WarWolfWorks.NyuEntities.Statistics.Stats"/> class.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stacking.Parent">
            <summary>
            The parent stats to be handled.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stacking.CalculatedValue(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            What will be used inside <see cref="T:WarWolfWorks.NyuEntities.Statistics.Stats"/>.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stacking.GetStatsByAffections(System.Int32[])">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> with the given affections from <see cref="P:WarWolfWorks.NyuEntities.Statistics.Stacking.AllStats"/>.
            </summary>
            <param name="affections"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stacking.GetStatsByAffections(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.NyuEntities.INyuStat},System.Int32[])">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> with the given affections from a custom list.
            </summary>
            <param name="stats"></param>
            <param name="affections"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stacking.GetStatValuesByStacking(System.Int32)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> with the given stacking from <see cref="P:WarWolfWorks.NyuEntities.Statistics.Stacking.AllStats"/>.
            </summary>
            <param name="stacking"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stacking.GetStatValuesByStacking(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.NyuEntities.INyuStat},System.Int32)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> with the given stacking from a custom list.
            </summary>
            <param name="stats"></param>
            <param name="stacking"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.Stat">
            <summary>
            Base class used for all <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> statistics.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stat.SetValue">
            <summary>
            Use this value to set the base value of this stat. (Set-Only)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stat.Stacking">
            <summary>
            How the Stat should be calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stat.Affections">
            <summary>
            Which stats will this stat interact with.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.#ctor(System.Single,System.Int32,System.Int32[])">
            <summary>
            Create a Stat.
            </summary>
            <param name="value"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.#ctor(WarWolfWorks.NyuEntities.Statistics.Stat)">
            <summary>
            Creates a duplicate of the given stat.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.#ctor(WarWolfWorks.NyuEntities.Statistics.Stat,System.Single)">
            <summary>
            Creates a duplicate of the given stat with a different value.
            </summary>
            <param name="stat"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.Equals(System.Single)">
            <summary>
            Returns true if the Stat's value returns other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.ToString">
            <summary>
            Returns the value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.Stat)~System.Single">
            <summary>
            Returns the Stat's value implicitly.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stat.op_Implicit(WarWolfWorks.NyuEntities.Statistics.Stat)~System.Int32">
            <summary>
            Returns the Stat's value implicitly as int.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.Stats">
            <summary>
            The class handling all statistics of an entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stats.NyuMain">
            <summary>
            The parent entity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.CalculatedValue(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            Pointer to <see cref="M:WarWolfWorks.NyuEntities.Statistics.Stacking.CalculatedValue(WarWolfWorks.Interfaces.NyuEntities.INyuStat)"/>.
            </summary>
            <param name="BaseStat"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.CalculatedValue(System.Single,System.Int32[])">
            <summary>
            Creates a temporary stat and uses it to retrieve the calculated value (Temporary Stat has a default stacking of 0).
            </summary>
            <param name="original"></param>
            <param name="affections"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.Statistics.Stats.Stacking">
            <summary>
            The object which calculates all stats to return a final value.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Statistics.Stats.OnStatAdded">
            <summary>
            Invoked when a stat is added.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.Statistics.Stats.OnStatRemoved">
            <summary>
            Invoked when a stat is removed.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.GetAllStats">
            <summary>
            Gets all stats returned in an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.AddStat(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            Adds an <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> to stats to be calculated.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.RemoveStat(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            Removes the given <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> from stats.
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.AddStats(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.NyuEntities.INyuStat})">
            <summary>
            Adds a range of stats to calculated stats.
            </summary>
            <param name="stats"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.RemoveStats(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.NyuEntities.INyuStat})">
            <summary>
            Removes a range of stats from calculated stats.
            </summary>
            <param name="stats"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.Stats.Contains(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            Returns true if the given <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> was inside the calculated stats list.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.Statistics.WWWStacking">
            <summary>
            Default stacking which is used if <see cref="P:WarWolfWorks.NyuEntities.Statistics.Stats.Stacking"/> is not set.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.Original">
            <summary>
            Stacking index: Used as base value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.Adder">
            <summary>
            Stacking index: All stats tagged will be added onto the original value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.StackingOriginalMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the original.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.StackingMultiplier">
            <summary>
            Stacking index: tagged will muliply the original value and Adder value. (Applies before StackingOriginalMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.OriginalMultiplier">
            <summary>
            Stacking index: Multiplies the original immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.Multiplier">
            <summary>
            Stacking index: Multiplies the original with adder values immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.StackingFullMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the total value after all multiplications (excluding FullMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.Statistics.WWWStacking.FullMultiplier">
            <summary>
            Stacking index: Absolute multiplier.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.Statistics.WWWStacking.CalculatedValue(WarWolfWorks.Interfaces.NyuEntities.INyuStat)">
            <summary>
            Returns the calculated value. See <see cref="T:WarWolfWorks.NyuEntities.Statistics.WWWStacking"/>'s constant values for more info.
            </summary>
            <param name="BaseStat"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon">
            <summary>
            A <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> which uses a countdown, after which it will be automatically removed from it's parent.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.OnCountdownSet">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetCountdown(System.Single)"/> or <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetStartCountdown(System.Single,System.Boolean)"/> with bool value as true are successfully called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.OnStartCountdownSet">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetStartCountdown(System.Single,System.Boolean)"/> is successfully called.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.StartCountdown">
            <summary>
            The starting countdown of this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.GetCountdown">
            <summary>
            Returns the current countdown of this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.GetCountdown01">
            <summary>
            Returns the percent of the countdown on 0-1 range. (1 is beginning, 0 is ending)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetCountdown(System.Single)">
            <summary>
            Attempts to set the current countdown of the <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon"/>.
            </summary>
            <param name="to"></param>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.StartCountdownChanges">
            <summary>
            The amount of times <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetStartCountdown(System.Single,System.Boolean)"/> was successfully called.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.CountdownChanges">
            <summary>
            The amount of times <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetCountdown(System.Single)"/> or <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetStartCountdown(System.Single,System.Boolean)"/> with the bool value as true 
            was successfully called.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.SetStartCountdown(System.Single,System.Boolean)">
            <summary>
            Attempts to set <see cref="P:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.StartCountdown"/> to the given value.
            </summary>
            <param name="to">The value used to set.</param>
            <param name="resetCountdown">If true,</param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.OnCountdownEnd">
            <summary>
            Invoked when countdown reaches 0; The yharon will not remove itself as long as this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.NyuUpdate">
            <summary>
            When overriding, make sure to include base.Update() as it is what handles the countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon.#ctor(System.Single)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.CountdownYharon"/> with the specified countdown.
            </summary>
            <param name="countdown"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon">
            <summary>
            Entity component which applies <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> effects on an entity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.GetTaCx1(System.Type,System.Single@)">
            <summary>
            Attempts to see if this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/> has a resistance to the given <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> type,
            and returns in percent (0-1) the resistance amount.
            </summary>
            <param name="for"></param>
            <param name="percent01"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.AddTaCx1(System.Type,System.Single)">
            <summary>
            Adds a resistance to a specific <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/>, and sets how resistant it is. (0-1, 0 being none 1 being completely resistant)
            Note: If a resistance type already exists, it will override the existing resistance's value instead of adding a new one.
            </summary>
            <param name="for"></param>
            <param name="percent01"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.RemoveTaCx1(System.Type)">
            <summary>
            Removes the resistance to a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> previously set using <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.AddTaCx1(System.Type,System.Single)"/>.
            </summary>
            <param name="for"></param>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.OnYharonAdded">
            <summary>
            Invoked when a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> is successfully added.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.OnYharonRemoved">
            <summary>
            Invoked when a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> is successfully removed.
            </summary>
        </member>
        <member name="E:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.OnYharonOverriden">
            <summary>
            Invoked when a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> is overriden through <see cref="F:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication.Override"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.Contains(System.Type)">
            <summary>
            Returns true if a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> has a <see cref="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.YharonType"/> equal to the given type.
            </summary>
            <param name="yharonType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.Contains(System.Type,WarWolfWorks.NyuEntities.YharonSystem.Yharon@)">
            <summary>
            Returns true if a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> has a <see cref="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.YharonType"/> equal to the given type,
            and returns the first element found.
            </summary>
            <param name="yharonType"></param>
            <param name="found"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.Contains``1">
            <summary>
            Returns true if a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> has a <see cref="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.YharonType"/> equal to the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.Contains``1(WarWolfWorks.NyuEntities.YharonSystem.Yharon@)">
            <summary>
            Returns true if a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> has a <see cref="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.YharonType"/> equal to the given type,
            and returns the first element found.
            </summary>
            <param name="found"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.Contains(WarWolfWorks.NyuEntities.YharonSystem.Yharon)">
            <summary>
            Returns true if the given <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> is currently inside the <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            (Note: This is not the same as <see cref="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.Contains(System.Type)"/>)
            </summary>
            <param name="yharon"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.GetYharonCount">
            <summary>
            Amount of yharons currently active in this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.GetTaCx1Count">
            <summary>
            Amount of TaCx1 currently active in this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.GetYharons">
            <summary>
            Returns an array of all yharons currently active in this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.AddYharon(WarWolfWorks.NyuEntities.YharonSystem.Yharon)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> to the list of affecting Yharons.
            Returns false if a TaCx1 (resistance) of the yharon's type exists with a value of 1.
            </summary>
            <param name="yharon"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.AddYharons(WarWolfWorks.NyuEntities.YharonSystem.Yharon[])">
            <summary>
            Adds a list of yharons.
            </summary>
            <param name="yharons"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.RemoveYharon(WarWolfWorks.NyuEntities.YharonSystem.Yharon)">
            <summary>
            Removes a given yharon.
            </summary>
            <param name="yharon"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon.RemoveYharons(WarWolfWorks.NyuEntities.YharonSystem.Yharon[])">
            <summary>
            Removes a list of yharons.
            </summary>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.YharonSystem.TaCx1">
            <summary>
            Class used with <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/> to indicate that it is resistant to a specific <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.YharonSystem.TaCx1.Percent">
            <summary>
            How much it is resistant (0-1).
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.YharonSystem.TaCx1.Resistance">
            <summary>
            What type of <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> is it resistant to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.TaCx1.#ctor(System.Type,System.Single)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.TaCx1"/>.
            </summary>
            <param name="type"></param>
            <param name="percent01"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon">
            <summary>
            Core class used to apply Buffs, Debuffs or anything in between to a Nyu entity.
            (Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuAwake"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuLateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable"/>, <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable"/> and <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDestroy"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.YharonType">
            <summary>
            Type of the <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> used to compare with other <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> components inside <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.Application">
            <summary>
            How this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> is applied inside a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/> when a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> of an existing type is added
            to <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.NyuEntities.YharonSystem.Yharon.Parent">
            <summary>
            The <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/> containing this <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.Yharon.CallOnOverride(WarWolfWorks.NyuEntities.YharonSystem.Yharon)">
            <summary>
            Used by <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/> internally to call OnOverride.
            </summary>
            <param name="overrider"></param>
        </member>
        <member name="M:WarWolfWorks.NyuEntities.YharonSystem.Yharon.OnOverride(WarWolfWorks.NyuEntities.YharonSystem.Yharon)">
            <summary>
            Called when a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> of the same type as this one is added with it's <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication"/> containing the <see cref="F:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication.Override"/> flag.
            </summary>
            <param name="overrider"></param>
        </member>
        <member name="T:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication">
            <summary>
            Determines the behavior of <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> when a yharon of an existing type is added to a <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.NyuYharon"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication.Ignore">
            <summary>
            Ignores the <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/> that attempts to be added.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication.Add">
            <summary>
            Adds it.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication.Override">
            <summary>
            Calls the existing <see cref="T:WarWolfWorks.NyuEntities.YharonSystem.Yharon"/>'s OnOverride method.
            </summary>
        </member>
        <member name="F:WarWolfWorks.NyuEntities.YharonSystem.YharonApplication.Remove">
            <summary>
            Removes the existing one.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Physics.Rope2D">
            <summary>
            Simulates a rope in 2D space with a line renderer.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.SegmentHeight">
            <summary>
            How long each segment of the rope is.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.RopeWidth">
            <summary>
            The width of the rope in the line renderer.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.SegmentCount">
            <summary>
            How many segments are on the rope.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.ConstrainSeverity">
            <summary>
            How severe the distance constrain is applied between segments.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.UseGravity">
            <summary>
            If true, it will apply the world's gravity force to this rope.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.UseEdgeCollider">
            <summary>
            If true, it will use a EdgeCollider2D on the rope.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.RopeStartPosition">
            <summary>
            This position designates where the rope starts; This cannot be null.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.RopeEndPosition">
            <summary>
            This position designates where the tip of the rope will end up; Setting this to null will make the rope's last segment have no constraints.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.GetSegmentPositions">
            <summary>
            Returns the current position of each joint in the rope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.GetSegmentPositions2D">
            <summary>
            Returns the current position of each joint in the rope as Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.GetSegmentPositions2DLocal">
            <summary>
            Returns the current position of each joint in the rope as Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.ns_LineRenderer">
            <summary>
            The line renderer; Set in <see cref="M:WarWolfWorks.Physics.Rope2D.Awake"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.Rope2D.ns_EdgeCollider2D">
            <summary>
            The edge collider added to this rope when <see cref="F:WarWolfWorks.Physics.Rope2D.UseEdgeCollider"/> is true.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Physics.Rope2D.Gravity">
            <summary>
            Used when <see cref="F:WarWolfWorks.Physics.Rope2D.UseGravity"/> is true. Points to <see cref="P:UnityEngine.Physics2D.gravity"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.Awake">
            <summary>
            Gets the line renderer.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.Start">
            <summary>
            Initiates the rope and sets the line renderer by calling <see cref="M:WarWolfWorks.Physics.Rope2D.UpdateRope"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.UpdateRope">
            <summary>
            Updates the rope to have the correct segment count and distance between each segment.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.Update">
            <summary>
            Calls <see cref="M:WarWolfWorks.Physics.Rope2D.Draw"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.FixedUpdate">
            <summary>
            Calls <see cref="M:WarWolfWorks.Physics.Rope2D.Simulate"/> and <see cref="M:WarWolfWorks.Physics.Rope2D.Constrain(System.Int32)"/> using <see cref="F:WarWolfWorks.Physics.Rope2D.ConstrainSeverity"/> as argument.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.Simulate">
            <summary>
            Simulates the physics of the rope.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.Constrain(System.Int32)">
            <summary>
            Limits the distance between each segment to <see cref="F:WarWolfWorks.Physics.Rope2D.SegmentHeight"/>.
            It also makes the first segment always set to <see cref="F:WarWolfWorks.Physics.Rope2D.RopeStartPosition"/>,
            and last segment to <see cref="F:WarWolfWorks.Physics.Rope2D.RopeEndPosition"/> if it was set to 0.
            </summary>
            <param name="amount">How severe the constrain is; Note that the higher the value the greater the performance hit.</param>
        </member>
        <member name="M:WarWolfWorks.Physics.Rope2D.Draw">
            <summary>
            Draws the rope on the <see cref="F:WarWolfWorks.Physics.Rope2D.ns_LineRenderer"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Physics.SpriteRope2D">
            <summary>
            Simulates a rope in 2D space with sprites.
            Note that moving the rope's transform will not move the rope; To simulate physics of the rope
            while moving it, move it's <see cref="M:WarWolfWorks.Physics.SpriteRope2D.GetFirstSegment"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Physics.SpriteRope2D.GetSegments">
            <summary>
            Returns all segments of this rope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Physics.SpriteRope2D.GetFirstSegment">
            <summary>
            Returns the first segment of the rope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Physics.SpriteRope2D.GetLastSegment">
            <summary>
            Returns the last segment of the rope.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Physics.SpriteRope2D.Segment">
            <summary>
            The segment class used on all segments of a <see cref="T:WarWolfWorks.Physics.SpriteRope2D"/> component.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.SpriteRope2D.Segment.Joint">
            <summary>
            The <see cref="T:UnityEngine.HingeJoint2D"/> attached to this segment.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.SpriteRope2D.Segment.Renderer">
            <summary>
            The <see cref="T:UnityEngine.SpriteRenderer"/> attached to this segment.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.SpriteRope2D.Segment.Rigidbody">
            <summary>
            The <see cref="T:UnityEngine.Rigidbody2D"/> attached to this segment.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Physics.SpriteRope2D.Segment.EdgeCollider">
            <summary>
            The <see cref="T:UnityEngine.EdgeCollider2D"/> attached to this segment; 
            Keep in mind that this will be null if <see cref="F:WarWolfWorks.Physics.SpriteRope2D.s_UseEdgeCollider"/> was false at instantiation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Physics.SpriteRope2D.Segment.Parent">
            <summary>
            Parent of this segment.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Physics.SpriteRope2D.Segment.Child">
            <summary>
            Child of this segment.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Security.NyuEntityException">
            <summary>
            Exception used for <see cref="N:WarWolfWorks.NyuEntities"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Security.NyuEntityException.#ctor(System.Int32)">
            <summary>
            <list type="Codes">
            <listheader>Codes:</listheader>
            <item>
            <term>1:</term>
            <description><see cref="M:WarWolfWorks.NyuEntities.Nyu.AddNyuComponent``1"/> was called with an already existing T component.</description>
            </item>
            <item>
            <term>2:</term>
            <description>An entity was destroyed without using <see cref="M:WarWolfWorks.NyuEntities.NyuManager.Destroy(WarWolfWorks.NyuEntities.Nyu)"/>.</description>
            </item>
            <item>
            <term>3:</term>
            <description>An <see cref="T:WarWolfWorks.NyuEntities.Nyu"/> class implements <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnEnable"/> and/or <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuOnDisable"/>.</description>
            </item>
            <item>
            <term>4:</term>
            <description>A <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuComponent"/> was incorrectly added.</description>
            </item>
            <item>
            <term>5:</term>
            <description>A <see cref="M:WarWolfWorks.NyuEntities.Nyu.AddNyuComponent(System.Type)"/> was attempted where the type given isn't implementing <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuComponent"/>.</description>
            </item>
            <item>
            <term>6:</term>
            <description><see cref="T:WarWolfWorks.NyuEntities.NyuManager"/> was destroyed.</description>
            </item>
            </list>
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:WarWolfWorks.Security.NyuProjectileException">
            <summary>
            Exception class used by <see cref="N:WarWolfWorks.NyuEntities.ProjectileSystem"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Security.NyuProjectileException.#ctor(System.Int32)">
            <summary>
            <list type="number">
            <item>
            <term>1:</term>
            <see cref="!:NyuProjectileManager.Initiate(int)"/> was given a value less than 1.
            </item>
            <item>
            <term>2:</term>
            <see cref="!:NyuProjectileManager.Initiate(int)"/> was called when it's singleton instance was null.
            </item>
            <item>
            <term>3:</term>
            NyuProjectileManager.New or NyuProjectileManager.End was called when it's singleton instance was null.
            </item>
            </list>
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:WarWolfWorks.Security.SingletonException">
            <summary>
            Throws a singleton exception; Used by <see cref="T:WarWolfWorks.Utility.Singleton`1"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Security.StreamingException">
            <summary>
            Exception thrown in case of an error in <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Security.StreamingException.Message">
            <summary>
            Message thrown based on <see cref="T:WarWolfWorks.Security.StreamingResult"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Security.StreamingException.Result">
            <summary>
            Result of this exception.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Security.StreamingException.#ctor(WarWolfWorks.Security.StreamingResult)">
            <summary>
            Throws a <see cref="T:WarWolfWorks.Security.StreamingException"/> based on given <see cref="T:WarWolfWorks.Security.StreamingResult"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:WarWolfWorks.Security.StreamingResult">
            <summary>
            Code of a <see cref="T:WarWolfWorks.Security.StreamingException"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.OK">
            <summary>
            No exception.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATEGORY_PASSWORD_MISSMATCH">
            <summary>
            The category's password was not the same as it's variable.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.DEFAULT_PATH_NULL">
            <summary>
            The category's default path was used without being set.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_ARG">
            <summary>
            One or more string values given inside a <see cref="!:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> were invalid or null.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_CATALOG">
            <summary>
            A saving catalog was used to load a variable or vice-versa.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATALOG_MISSMATCH_CATEGORY">
            <summary>
            A SaveAll method was called where all catalogs did not have the same Category value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATALOG_MISSMATCH_PASSWORD">
            <summary>
            A SaveAll method was called where all catalogs did not have the same Password value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATALOG_MISSMATCH_FILEPATH">
            <summary>
            A SaveAll method was called where all catalogs did not have the same Path value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_CATALOG_COLLECTION_SIZE">
            <summary>
            A SaveAll method was called where the catalog collection size was null or lesser than 2.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_COLLECTION_SIZE">
            <summary>
            Attempted to create multiple catalogs using <see cref="!:Catalog.Savers(string, string, string[], string[])"/> where 
            the length of names did not match the length of values.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Security.WWWException">
            <summary>
            Simple exception which details the line, source and message.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Security.WWWException.Message">
            <summary>
            Formats the message based on <see cref="F:WarWolfWorks.Security.WWWException.Line"/>, <see cref="F:WarWolfWorks.Security.WWWException.MSource"/> and <see cref="F:WarWolfWorks.Security.WWWException.ActMessage"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Security.WWWException.#ctor(System.Int32,System.Object,System.String)">
            <summary>
            Base constructor of <see cref="T:WarWolfWorks.Security.WWWException"/>.
            </summary>
            <param name="line">The line at which the exception was generated.</param>
            <param name="mSource">Source of the exception.</param>
            <param name="message">Additional message.</param>
        </member>
        <member name="T:WarWolfWorks.Threading.ThreadingUtilities">
            <summary>
            Contains various utilities to make your life easier with Unity's partial non-support of multithreading.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Threading.ThreadingUtilities.QueueOnMainThread(System.Action)">
            <summary>
            Queues an action to the main thread.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.Threading.ThreadingUtilities.ToString">
            <summary>
            Returns "WarWolfWorks Threader".
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.UI.ConsoleUI">
            <summary>
            A UI menu used to display the <see cref="T:WarWolfWorks.Debugging.Console"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.FillableMarker">
            <summary>
            A <see cref="T:WarWolfWorks.UI.Marker"/> with a fillable image inside of it.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.FillableMarker.FillSprite">
            <summary>
            Sprite used for the fillable image.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.FillableMarker.ImageFillGraphic">
            <summary>
            The fillable image inside of <see cref="P:WarWolfWorks.UI.Marker.ImageGraphic"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.FillableMarker.#ctor(WarWolfWorks.UI.FillableMarker)">
            <summary>
            Creates a copy of another <see cref="T:WarWolfWorks.UI.FillableMarker"/>.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:WarWolfWorks.UI.FillableMarker.#ctor(UnityEngine.Transform,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.FillableMarker"/>.
            </summary>
            <param name="followed"></param>
            <param name="markerSprite"></param>
            <param name="fillSprite"></param>
            <param name="anchoredSize"></param>
            <param name="offset"></param>
        </member>
        <member name="M:WarWolfWorks.UI.FillableMarker.OnInit">
            <summary>
            Initiates both graphics.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.FillableMarker.Dispose">
            <summary>
            Disposes of both gameobject graphics.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.FillableTextMarker">
            <summary>
            A <see cref="T:WarWolfWorks.UI.FillableMarker"/> with text inside of it.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.FillableTextMarker.TextGraphic">
            <summary>
            The text graphic inside of <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.CoreGraphic"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.FillableTextMarker.#ctor(WarWolfWorks.UI.FillableTextMarker)">
            <summary>
            Creates a copy of another <see cref="T:WarWolfWorks.UI.FillableMarker"/>.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:WarWolfWorks.UI.FillableTextMarker.#ctor(UnityEngine.Transform,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.FillableTextMarker"/>.
            </summary>
            <param name="followed"></param>
            <param name="markerSprite"></param>
            <param name="fillSprite"></param>
            <param name="anchoredSize"></param>
            <param name="offset"></param>
        </member>
        <member name="M:WarWolfWorks.UI.FillableTextMarker.OnInit">
            <summary>
            Initiates both graphics.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.FillableTextMarker.Dispose">
            <summary>
            Disposes of both gameobject graphics.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.GUIViewport">
            <summary>
            The manager class of the markers system.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.GUIViewport.GUI">
            <summary>
            Used with <see cref="T:WarWolfWorks.UI.GUIViewport"/> to display a <see cref="T:UnityEngine.UI.Graphic"/> on screen through ViewportPoint.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.GUIViewport.GUI.GUIType">
            <summary>
            How the <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.Position"/> is used.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.GUIViewport.GUI.GUIType.WorldPosToViewport">
            <summary>
            <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.Position"/> is a world position, and <see cref="T:WarWolfWorks.UI.GUIViewport"/> uses <see cref="M:UnityEngine.Camera.WorldToViewportPoint(UnityEngine.Vector3)"/>
            to set to to an achored position.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.GUIViewport.GUI.GUIType.AsAnchors">
            <summary>
            The <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.Position"/> is the anchored position. (0-1)
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.ID">
            <summary>
            Name of this <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/>; This is required to be different from other <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/> elements
            as it will not be identifiable otherwise, and <see cref="M:WarWolfWorks.UI.GUIViewport.New(WarWolfWorks.UI.GUIViewport.GUI,System.Int32@)"/> will return false.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.CoreGraphic">
            <summary>
            Core graphic of the GUI.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.Initiated">
            <summary>
            Is this <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/> initiated?
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.Parent">
            <summary>
            <see cref="T:WarWolfWorks.UI.GUIViewport"/> parent; Set after <see cref="M:WarWolfWorks.UI.GUIViewport.New(WarWolfWorks.UI.GUIViewport.GUI,System.Int32@)"/> was successfully called.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.Visible">
            <summary>
            Returns true if the <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.CoreGraphic"/> is visible on it's parent canvas.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.GUI.Deinit">
            <summary>
            Deinitializes this <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/>, making it Initiable again.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.AnchoredSize">
            <summary>
            The size of the <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.CoreGraphic"/> on screen.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.Position">
            <summary>
            Position at which <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.CoreGraphic"/> displays itself.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.GUI.OnInit">
            <summary>
            Called the parent successfully sets this <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/> through <see cref="M:WarWolfWorks.UI.GUIViewport.New(WarWolfWorks.UI.GUIViewport.GUI,System.Int32@)"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.GUI.Dispose">
            <summary>
            Called the parent successfully removes this <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/> through <see cref="M:WarWolfWorks.UI.GUIViewport.Remove(WarWolfWorks.UI.GUIViewport.GUI)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUI.Type">
            <summary>
            How this <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/>'s <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.Position"/> is used by <see cref="T:WarWolfWorks.UI.GUIViewport"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.AllGUI">
            <summary>
            All markers currently active.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.GUICount">
            <summary>
            The amount of <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/> elements that are active inside this <see cref="T:WarWolfWorks.UI.GUIViewport"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.Initiated">
            <summary>
            Is the <see cref="T:WarWolfWorks.UI.GUIViewport"/> menu initiated?
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.GUIViewport.Parent">
            <summary>
            The camera used to display GUI elements on screen.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.New(WarWolfWorks.UI.GUIViewport.GUI,System.Int32@)">
            <summary>
            Adds a new <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/> and returns it's given ID.
            </summary>
            <param name="gui"></param>
            <param name="guiID"></param>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.New(WarWolfWorks.UI.GUIViewport.GUI)">
            <summary>
            Adds a new <see cref="T:WarWolfWorks.UI.GUIViewport.GUI"/>.
            </summary>
            <param name="gui"></param>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.GetGUI(System.Int32)">
            <summary>
            Returns a GUI element by ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.Remove(WarWolfWorks.UI.GUIViewport.GUI)">
            <summary>
            Removes a GUI element.
            </summary>
            <param name="gui"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.Init(UnityEngine.Camera)">
            <summary>
            Initiates the <see cref="T:WarWolfWorks.UI.GUIViewport"/>.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.GUIViewport.Deinit">
            <summary>
            Deinitiates this <see cref="T:WarWolfWorks.UI.GUIViewport"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.UI.ImageAnimation">
            <summary>
            Scriptable object used by <see cref="T:WarWolfWorks.UI.ImageAnimator"/> to animate an image.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimation.CreateSingle(UnityEngine.Sprite,System.Int32)">
            <summary>
            Creates an animation with a single image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimation.New(System.Collections.Generic.IEnumerable{UnityEngine.Sprite},System.Int32)">
            <summary>
            Creates an animation with a single image.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.UI.ImageAnimator">
            <summary>
            A utility component which animates an image component.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.GetCurrentCount">
            <summary>
            The amount of frames waited in total for the current animation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.GetCurrentFrame">
            <summary>
            The currently displayed sprite index in the animation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.SetAnimation(WarWolfWorks.UI.ImageAnimation)">
            <summary>
            Sets the animation and returns true if it was successfully set.
            </summary>
            <param name="animation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.RemoveAnimation(UnityEngine.Sprite)">
            <summary>
            Removes the current animation.
            </summary>
            <param name="replace">Replaces the currently displayed image with this one.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.Pause">
            <summary>
            Pauses the animation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.Resume">
            <summary>
            Resumes the animation if it is paused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.Reset">
            <summary>
            Resets the current animation to start from the beginning.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ImageAnimator.Stop">
            <summary>
            Resets the current animation and pauses it.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.Marker">
            <summary>
            Used with <see cref="T:WarWolfWorks.UI.GUIViewport"/> to display an image on screen based on a worldview.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Marker.ImageGraphic">
            <summary>
            <see cref="P:WarWolfWorks.UI.GUIViewport.GUI.CoreGraphic"/> as <see cref="T:UnityEngine.UI.Image"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Marker.AnchoredSize">
            <summary>
            The anchored size of the image.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Marker.Position">
            <summary>
            The position of the <see cref="T:UnityEngine.Transform"/> followed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Marker.MarkerSprite">
            <summary>
            The sprite used for the marker.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Marker.Offset">
            <summary>
            The offset of the world position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Marker.Type">
            <summary>
            <see cref="T:WarWolfWorks.UI.FillableMarker"/> 
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Marker.Dispose">
            <summary>
            Destroys the attached <see cref="T:UnityEngine.UI.Image"/> component.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Marker.OnInit">
            <summary>
            Sets the cooldown and starts a coroutine to calculate the countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Marker.SetFollwed(UnityEngine.Transform)">
            <summary>
            Sets the followed transform to a new transform.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Marker.#ctor(UnityEngine.Transform,UnityEngine.Sprite,UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.UI.Marker"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Marker.#ctor(WarWolfWorks.UI.Marker)">
            <summary>
            Creates a copy of another <see cref="T:WarWolfWorks.UI.Marker"/>; Copies everything except <see cref="P:WarWolfWorks.UI.Marker.ImageGraphic"/>.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent">
            <summary>
            A more advanced version of <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.EventGraphics">
            <summary>
            Event graphics used by this index event.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.MouseIsInside">
            <summary>
            Returns true if the mouse is currently inside this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s graphic.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.IsFocused">
            <summary>
            Returns true if this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> is currently focused by it's parent though <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.Awake">
            <summary>
            When overriding, make sure to include "base.Awake();" as it invokes the <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IAwake"/> method of all
            event graphics of this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.EventOnPointerClick">
            <summary>
            Invokes this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s activation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.EventOnPointerEnter">
            <summary>
            Sets the index of the parent to this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s index; Make sure to include "base.EventOnPointerEnter();" at the start of the method when overriding
            to make this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent"/> work properly.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.EventOnPointerExit">
            <summary>
            Make sure to include "base.EventOnPointerExit();" at the start of the method when overriding
            to make this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent"/> work properly.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.Update">
            <summary>
            When overriding, make sure to include "base.Update();" as it calls all <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IUpdate"/> components of <see cref="F:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.EventGraphics"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.OnIndexChanged">
            <summary>
            Calls OnFocused or OnUnfocused of all event graphics based on the Parent's <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.OnFocus">
            <summary>
            Invoked when this index event is focused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.OnUnfocus">
            <summary>
            Invoked when this index event is unfocused.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic">
            <summary>
            An <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.EventGraphic"/> which changes the anchored position of it's graphic.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.s_AnchorsUnfocused">
            <summary>
            Anchor position towards which the affected graphic will go to when it's not focused.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.s_AnchorsFocused">
            <summary>
            Anchor position towards which the affected graphic will go to when it's focused.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.s_AnchorsTransitionSpeed">
            <summary>
            Speed at which the anchors transition happens.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.DestinationAnchors">
            <summary>
            The anchors towards which the affected graphic goes towards.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.GetAnchors(System.Boolean)">
            <summary>
            Gets the anchor values set.
            </summary>
            <param name="focused">If true, returns the value of the focused anchors, otherwise returns unfocused value.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.SetAnchors(System.Boolean,UnityEngine.Vector4)">
            <summary>
            Sets the value of the anchors.
            </summary>
            <param name="focused">If true, sets the value of the focused anchors, otherwise sets the unfocused anchors.</param>
            <param name="value"></param>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.AnchorsEventGraphic.TransitionSpeed">
            <summary>
            The transition speed of the event graphic between focused and unfocused anchors.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent">
            <summary>
            Premade <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> with basic utilities.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.Graphics">
            <summary>
            Graphics assigned through the inspector.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.ColorTransitionSpeed">
            <summary>
            The speed at which the color transition is performed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.SizeTransitionSpeed">
            <summary>
            The speed at which the size transition is performed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.FocusedColor">
            <summary>
            Color used with <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.UnfocusedColor">
            <summary>
            Color used with <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.FocusedAnchors">
            <summary>
            The size used with <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.UnfocusedAnchors">
            <summary>
            The size used with <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused"/>
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.MouseIsInside">
            <summary>
            Returns true if the mouse is currently inside this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s graphic.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.Focused">
            <summary>
            Returns true if this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> is currently focused by it's parent though <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.DestinationColor">
            <summary>
            The color towards which the graphs will go to.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.DestinationAnchors">
            <summary>
            The size towards which the graphs will go to.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.UsesColorTransition">
            <summary>
            The color transition active state.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.UsesAnchorsTransition">
            <summary>
            The anchors transition active state.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.EventOnPointerClick">
            <summary>
            Invokes this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s activation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.Awake">
            <summary>
            When overriding, make sure to include "base.Awake();" as it sets the <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.DestinationColor"/> to an appropriate color.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.EventOnPointerEnter">
            <summary>
            Sets the index of the parent to this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s index; Make sure to include base.EventOnPointerEnter() at the start of the method when overriding
            to make this work properly.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.EventOnPointerExit">
            <summary>
            Make sure to include base.EventOnPointerExit() at the start of the method when overriding
            to make this work properly.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnIndexChanged">
            <summary>
            Calls <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused"/> or <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused"/> based on the Parent's <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.Update">
            <summary>
            When overriding, make sure to include "base.Update();" as it takes care of color and size lerping.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> is first focused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> looses focus.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.ColorEventGraphic">
            <summary>
            An <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.EventGraphic"/> which changes the anchored position of it's graphic.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.ColorEventGraphic.s_ColorUnfocused">
            <summary>
            Color towards which the affected graphic will go to when it's not focused.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.ColorEventGraphic.s_ColorFocused">
            <summary>
            Color towards which the affected graphic will go to when it's focused.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.ColorEventGraphic.s_ColorTransitonSpeed">
            <summary>
            Speed at which the color transition happens.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ColorEventGraphic.DestinationColor">
            <summary>
            The color towards thich the affected graphic goes towards.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.EventGraphic">
            <summary>
            The core class for <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent"/>. (Inheritable)
            Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IAwake"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.IOnFocus"/>, <see cref="T:WarWolfWorks.Interfaces.IOnUnfocus"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.EventGraphic.AffectedGraphic">
            <summary>
            The affected graphic.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.EventGraphic.Parent">
            <summary>
            The parent of this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.EventGraphic"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.EventGraphicGroup">
            <summary>
            Group used by <see cref="F:WarWolfWorks.UI.MenusSystem.Assets.AdvancedIndexEvent.EventGraphics"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.EventGraphicGroup.AffectedGraphic">
            <summary>
            The graphic affected.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.EventGraphicGroup.Events">
            <summary>
            The event used.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.EventGraphicGroup.#ctor(UnityEngine.UI.Graphic,WarWolfWorks.UI.MenusSystem.Assets.EventGraphic[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.EventGraphicGroup"/>.
            </summary>
            <param name="graphic"></param>
            <param name="eventGraphics"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent">
            <summary>
            Inherit this class to make <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu"/> events like play, options, exit, etc...
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.Parent">
            <summary>
            Menu which uses this event.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.IndexInMenu">
            <summary>
            Index if this event inside it's parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent">
            <summary>
            Unity EventTrigger component attached to this IndexEvent. 
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.EventOnPointerClick">
            <summary>
            Added on this <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent"/> PointerClick event.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.EventOnPointerEnter">
            <summary>
            Added on this <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent"/> PointerEnter event.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.EventOnPointerExit">
            <summary>
            Added on this <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent"/> PointerExit event.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnIndexChanged">
            <summary>
            Invoked when the index of the parent menu is changed.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnActivate(System.Object)">
            <summary>
            Invoked when this menu is activated/called through the game.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnRemove">
            <summary>
            Invoked when this menu is removed from it's parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu">
            <summary>
            Indexed menu which implements various utility for handling a Index-based menu. Uses <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> to make menu choices.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex">
            <summary>
            Current index of this menu.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.GetIndexEventCount">
            <summary>
            Returns how many <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> are attached to this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.InteractibleRange">
            <summary>
            Limits the <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> to this range.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.IncreasesIndex">
            <summary>
            When this method returns true, <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> will increase by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.DecreasesIndex">
            <summary>
            When this method returns true, <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> will decrease by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.ActivatesIndexEvent">
            <summary>
            When this method returns true, it will invoke <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnActivate(System.Object)"/> at the current index; Argument passed is 0.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Events">
            <summary>
            All events held/used by this menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.OnIndexChanged(System.Int32)">
            <summary>
            Invoked when <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> is changed.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.AddIndexEvent(WarWolfWorks.UI.MenusSystem.Assets.IndexEvent)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> to this menu's events.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.AddIndexEvent(WarWolfWorks.UI.MenusSystem.Assets.IndexEvent,System.Int32)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> to this menu's events at the specified index.
            </summary>
            <param name="event"></param>
            <param name="at"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.RemoveIndexEvent(WarWolfWorks.UI.MenusSystem.Assets.IndexEvent)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> from this menu's events.
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.RemoveIndexEvent(System.Int32)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> from this menu's events.
            </summary>
            <param name="at"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Awake">
            <summary>
            Initiates all events.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Update">
            <summary>
            Handles <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.IncreasesIndex"/> and <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.DecreasesIndex"/>; When overriding, make sure to include base.Update() if you want this to be implemented by default.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent">
            <summary>
            <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent"/> which inherits from <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.s_ScrollHolder">
            <summary>
            UI Rect moved.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.MinPosition">
            <summary>
            Pointer to minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.MaxPosition">
            <summary>
            Pointer minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.ScrollHolder">
            <summary>
            UI Rect moved.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.Percent">
            <summary>
            The current percentage of this menu. (Clamped 0-1)
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.OriginalRectSize">
            <summary>
            Rect min and max anchores stored in a vector4. Sorted as follows: anchorMin.x, anchorMin.y, anchorMax.x, anchorMax.y.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.CurrentRectSize">
            <summary>
            Returns current rect size.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.Start">
            <summary>
            Gets the <see cref="F:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.s_ScrollHolder"/>'s size.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent">
            <summary>
            Menu which scroll a <see cref="T:UnityEngine.RectTransform"/> based on a percentage.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.MinPosition">
            <summary>
            Pointer to minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.MaxPosition">
            <summary>
            Pointer minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.s_ScrollHolder">
            <summary>
            UI Rect moved.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.ScrollHolder">
            <summary>
            <see cref="T:UnityEngine.RectTransform"/> which is moved based on <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.Percent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.OriginalRectSize">
            <summary>
            Rect min and max anchores stored in a vector4. Sorted as follows: anchorMin.x, anchorMin.y, anchorMax.x, anchorMax.y.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.CurrentRectSize">
            <summary>
            Returns current rect size.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.Percent">
            <summary>
            The current percentage of this menu. (Clamped 0-1)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.Start">
            <summary>
            Gets the <see cref="F:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.s_ScrollHolder"/>'s size.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Menu">
            <summary>
            Core class for handling Menus; All Menus have a Holder which determine a large proportion of the Menu's behaviour (like IsActive),
            It is best practice to put a menu script on the Canvas GameObject, and put the Holder as child of the Canvas.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Menu.AllMenus">
            <summary>
            All menus that are currently in the scene.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Menu.Holder">
            <summary>
            The parent transform which holds all elements of this menu.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.MenusSystem.Menu.OnActivated">
            <summary>
            Triggers when this menu is activated.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.MenusSystem.Menu.OnDeactivated">
            <summary>
            Triggers when this menu is deactivated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Menu.IsActive">
            <summary>
            Determines if the menu is currently active. (Pointer to Holder.gameObject.activeInHierarchy)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetHolder">
            <summary>
            Returns the Holder of this Menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetAllMenus">
            <summary>
            Returns an array of all menus inside the scene.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetMenu``1">
            <summary>
            Returns a menu of the given T type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetMenu(System.Type)">
            <summary>
            Returns a menu of given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetMenus``1">
            <summary>
            Returns a list of menu of given T type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetMenus(System.Type)">
            <summary>
            Returns a list of menu of given T type.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.OnActivate">
            <summary>
            Invoked when this menu is activated. (Invoked before <see cref="E:WarWolfWorks.UI.MenusSystem.Menu.OnActivated"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.OnDeactivate">
            <summary>
            Invoked when this menu is deactivated. (Invoked before <see cref="E:WarWolfWorks.UI.MenusSystem.Menu.OnDeactivated"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.ActivateMenu">
            <summary>
            Activates this menu.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateMenu">
            <summary>
            Deactivates this menu.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.ActivateMenu``1">
            <summary>
            Activates the menu of given T type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.ActivateMenu(System.Type)">
            <summary>
            Activates the menu of given type.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateMenu``1">
            <summary>
            Deactivates the menu of given T type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateMenu(System.Type)">
            <summary>
            Activates the menu of given type.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateAllMenus">
            <summary>
            Deactivates all menus.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.Awake">
            <summary>
            Adds this menu to the <see cref="F:WarWolfWorks.UI.MenusSystem.Menu.AllMenus"/> list; When overriding, make sure to include base.Awake().
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.Finalize">
            <summary>
            Removes this menu from <see cref="F:WarWolfWorks.UI.MenusSystem.Menu.AllMenus"/> list.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SCFront`3">
            <summary>
            A slick cell which contains a text field on top.
            </summary>
            <typeparam name="TParent">The type of the menu itself.</typeparam>
            <typeparam name="TCell">The type of the cells serviced.</typeparam>
            <typeparam name="TBorder">The type of the border used.</typeparam>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCFront`3.Front">
            <summary>
            The front image of this cell.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCFront`3.FrontContent">
            <summary>
            The sprite that is applied to <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCFront`3.Front"/> on refresh.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SCFront`3.Refresh">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SCFront`3.#ctor(`0,System.Int32,UnityEngine.EventSystems.EventTrigger,UnityEngine.UI.Image,UnityEngine.UI.Image)">
            <summary>
            Extension of the base constructor to initiate all other cell info.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
            <param name="eventHandler"></param>
            <param name="background"></param>
            <param name="front"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3">
            <summary>
            A <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3"/> with an additional image on top, and a text;
            Very useful for inventories.
            </summary>
            <typeparam name="TParent"></typeparam>
            <typeparam name="TCell"></typeparam>
            <typeparam name="TBorder"></typeparam>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.Text">
            <summary>
            The text of this cell. (Ordered in front of <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.Front"/> by default)
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.Front">
            <summary>
            The front image of this cell.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.FrontContent">
            <summary>
            The sprite that is applied to <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.Front"/> on refresh.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.TextContent">
            <summary>
            The string that is applied to <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.Text"/> on refresh.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.Refresh">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SCItem`3.#ctor(`0,System.Int32,UnityEngine.EventSystems.EventTrigger,UnityEngine.UI.Image,UnityEngine.UI.Image,TMPro.TextMeshProUGUI)">
            <summary>
            Extension of the base constructor to initiate all other cell info.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
            <param name="eventHandler"></param>
            <param name="background"></param>
            <param name="front"></param>
            <param name="text"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SCText`3">
            <summary>
            A slick cell which contains a text field on top.
            </summary>
            <typeparam name="TParent">The type of the menu itself.</typeparam>
            <typeparam name="TCell">The type of the cells serviced.</typeparam>
            <typeparam name="TBorder">The type of the border used.</typeparam>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCText`3.TextContent">
            <summary>
            The string that is applied to <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCText`3.Text"/> on refresh.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SCText`3.Text">
            <summary>
            The text of this cell.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SCText`3.Refresh">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SCText`3.#ctor(`0,System.Int32,UnityEngine.EventSystems.EventTrigger,UnityEngine.UI.Image,TMPro.TextMeshProUGUI)">
            <summary>
            Extension of the base constructor to initiate all other cell info.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
            <param name="eventHandler"></param>
            <param name="background"></param>
            <param name="text"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder">
            <summary>
            A behavior which sets borders to a rect transform of 1 pixel width/height to make a clean and simple interface.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Borders">
            <summary>
            Returns all initiated borders in the scene.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.RefreshAllBorders">
            <summary>
            Calls the <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Refresh"/> method of all existing <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder"/>s.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Flags">
            <summary>
            Flags of this <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder"/>; Used on <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Init"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Color">
            <summary>
            The color applied to all border images.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Initiated">
            <summary>
            Initiated state of this <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Hidden">
            <summary>
            The hidden state of this <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder"/> modified through <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Hide"/> and <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Show"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Init">
            <summary>
            Initiates the border images.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Deinit">
            <summary>
            Opposite of <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Init"/>, which destroys all initiated border images.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Refresh">
            <summary>
            Updates the color of all border images.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Start">
            <summary>
            Calls <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Init"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Hide">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.Show">
            <summary>
            Un-hides the border.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.pr_Holder">
            <summary>
            The holder of all slick border images.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.pr_Images">
            <summary>
            <see cref="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.pr_IMG_Left"/>, <see cref="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.pr_IMG_Top"/>, <see cref="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.pr_IMG_Right"/> and <see cref="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder.pr_IMG_Bot"/> in an array.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3">
            <summary>
            Used with <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3"/> to group up and manipulate each "cell" or simply menu option.
            </summary>
            <typeparam name="TParent">The type of the menu itself.</typeparam>
            <typeparam name="TCell">The type of the cells serviced.</typeparam>
            <typeparam name="TBorder">The type of the border used.</typeparam>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Selection">
            <summary>
            The current selection of this cell.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Parent">
            <summary>
            The parent of this cell.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Core">
            <summary>
            Pointer to the <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Background"/> <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Rect">
            <summary>
            Pointer to the <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Background"/> <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Border">
            <summary>
            The <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder"/> added to the <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Core"/> when this <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3"/>'s constructor is called.
            Note: The border is not instantiated and remains null if <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.BorderFlags"/> is equal to <see cref="F:WarWolfWorks.Enums.SlickBorderFlags.None"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.EventHandler">
            <summary>
            The event trigger which handles mouse navigation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Background">
            <summary>
            The background of this cell.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Index">
            <summary>
            The index of this cell within it's parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.BorderFlags">
            <summary>
            Flags applied to the slick border of this cell.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.Refresh">
            <summary>
            Refreshes this cell to be up-to-date with back-end info. (Called by the parent)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.#ctor(`0,System.Int32,UnityEngine.EventSystems.EventTrigger,UnityEngine.UI.Image)">
            <summary>
            Standard constructor of the slick cell.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
            <param name="eventHandler"></param>
            <param name="background"></param>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.ThemeColor">
            <summary>
            The color theme if this cell; Points to the parent's ThemeColor by default.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.GetSelectionType(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:WarWolfWorks.Enums.SlickSelectionType"/> enum based on index values given.
            </summary>
            <param name="index">The index of the cell.</param>
            <param name="hoverIndex">The current hover index of the parent.</param>
            <param name="selectIndex">The current select index of the parent.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.GetSelectionType">
            <summary>
            Returns the <see cref="T:WarWolfWorks.Enums.SlickSelectionType"/> enum based on index values of this cell and it's parent;
            Uses the static <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.GetSelectionType(System.Int32,System.Int32,System.Int32)"/> as base.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.GetSelectionColor(UnityEngine.Color,System.Single)">
            <summary>
            Gets the appropriate color based on a menu's selection.
            </summary>
            <param name="color">The base color.</param>
            <param name="alpha">The transparency of the color.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.GetSelectionColor(System.Single)">
            <summary>
            Gets the appropriate color based on a menu's selection. Color used is <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.ThemeColor"/>.
            </summary>
            <param name="alpha">The transparency of the color.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.GetSelectionColor">
            <summary>
            Gets the appropriate color based on a menu's selection. Color used is <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickCell`3.ThemeColor"/>, Alpha used is <see cref="F:WarWolfWorks.WWWResources.UI_SLICK_BACK_TRANSPARENCY"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3">
            <summary>
            The base class of the slick UI system; TParent is the parent type, TCell is the cell type.
            </summary>
            <typeparam name="TParent">The type of the menu itself.</typeparam>
            <typeparam name="TCell">The type of the cells serviced.</typeparam>
            <typeparam name="TBorder">The type of the border used.</typeparam>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.ThemeColor">
            <summary>
            The color theme of this menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigationType">
            <summary>
            Navigation type of this menu; Used to make the menu visual-only or interactible.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Refresh">
            <summary>
            Updates the UI to be up-to-date with back-end info for all it's cells.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Index">
            <summary>
            The currently hovered cell index.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.SelectionIndex">
            <summary>
            The currently selected cell index.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.OnNavigationUse(WarWolfWorks.Enums.Direction)">
            <summary>
            Called by the core when a navigation has been used.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.OnSelectionAccepted(System.Int32)">
            <summary>
            Called by the core when a cell at <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.SelectionIndex"/> has been used.
            </summary>
            <param name="type">What type of selection was made. (0 = Left Mouse, 1 = Right Mouse, 2 = Mouse Middle, etc...)</param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.GetNavigationCells">
            <summary>
            Used by the core to determine which cells to use navigation on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.GetRefreshCells">
            <summary>
            Used by the core to determine which cells to refresh with a <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Refresh"/> call.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.CellsRange">
            <summary>
            Clamps <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Index"/> and <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.SelectionIndex"/> to this range.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.BuildUI">
            <summary>
            Builds the UI using <typeparamref name="TCell"/>. Called by core during <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Start"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.DestroyUI">
            <summary>
            Destroys all UI elements initiated by <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.BuildUI"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.CreateCell(System.Int32,WarWolfWorks.Utility.LanguageString,System.Object[])">
            <summary>
            Creates a cell.
            </summary>
            <param name="index">Index to be assigned to the cell.</param>
            <param name="name">Name to be used for the cell.</param>
            <param name="args">Additional arguments.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.CreateHolder(System.String,System.Single,System.Single,System.Single,System.Single,UnityEngine.RectTransform)">
            <summary>
            Creates a holder that is the child of the menu's holder.
            </summary>
            <param name="name">The name of the holder GameObject.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Event_Cell_OnPointerEnter(`1)">
            <summary>
            Assigned on cell event triggers; Sets index to the cell's index by default.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Event_Cell_OnPointerExit(`1)">
            <summary>
            Assigned on cell event triggers. Sets index to -1 by default.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Awake">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Start">
            <summary>
            Calls <see cref="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.BuildUI"/> and assigns their events; Make sure to include "base.Start();" when overriding.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.Update">
            <summary>
            Handles navigation; Override without "base.Update();" if <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigationType"/> is set to None.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigatesUp">
            <summary>
            Returns true if the menu is navigating up.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigatesDown">
            <summary>
            Returns true if the menu is navigating down.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigatesLeft">
            <summary>
            Returns true if the menu is navigating left.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigatesRight">
            <summary>
            Returns true if the menu is navigating right.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigateAccepts(System.Int32@)">
            <summary>
            Returns true if the current navigation of this menu is accepted, or interacted with. (Should be based off of <see cref="P:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickMenu`3.NavigationType"/>)
            </summary>
            <param name="type">Returns the type based on the mouse button pressed, where 0 = Left Mouse, 1 = Right Mouse, 2 = Middle Mouse, etc...</param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.UI.MouseGUI">
            <summary>
            Displays an image right next to the cursor.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MouseGUI.MouseGraphic">
            <summary>
            Graphic to be displayed in <see cref="T:WarWolfWorks.UI.MouseGUI"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.AnchoredSize">
            <summary>
            Anchored size of this <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseSprite">
            <summary>
            Sprite of this <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.SpriteColor">
            <summary>
            Color of the <see cref="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseSprite"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseText">
            <summary>
            Text of this <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.TextColor">
            <summary>
            Color of <see cref="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseText"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.MouseGraphic.#ctor(UnityEngine.Vector2,UnityEngine.Sprite,System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> which displays both a sprite and text.
            </summary>
            <param name="anchorSize"></param>
            <param name="sprite"></param>
            <param name="text"></param>
            <param name="spriteColor"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.MouseGraphic.#ctor(UnityEngine.Vector2,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> which displays a sprite.
            </summary>
            <param name="anchorSize"></param>
            <param name="sprite"></param>
            <param name="spriteColor"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.MouseGraphic.#ctor(UnityEngine.Vector2,System.String,UnityEngine.Color)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> which displays text.
            </summary>
            <param name="anchorSize"></param>
            <param name="text"></param>
            <param name="textColor"></param>
        </member>
        <member name="P:WarWolfWorks.UI.MouseGUI.CurrentlyQueued">
            <summary>
            Returns the currently displayed Sprite/Color.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.GetMouseImage">
            <summary>
            Returns the image component used for mouse graphics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.GetMouseTMP">
            <summary>
            Returns the text mesh pro component used for mouse graphics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.AddToQueue(WarWolfWorks.UI.MouseGUI.MouseGraphic)">
            <summary>
            Adds the sprite to the queue of images to be displayed.
            </summary>
            <param name="graphic"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.RemoveFromQueue">
            <summary>
            Removes the currently displayed <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> from queue.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.RemoveFromQueue(System.Predicate{WarWolfWorks.UI.MouseGUI.MouseGraphic})">
            <summary>
            Removes a specific graphic from queue.
            </summary>
            <param name="graphic"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MoveableBar">
            <summary>
            A bar/tab that allows you to move a menu using your mouse drag.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MoveableBar.FreezeStyle">
            <summary>
            Which axis should freeze from any <see cref="T:WarWolfWorks.UI.MoveableBar"/> movement.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.FreezeStyle.None">
            <summary>
            Freemove.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.FreezeStyle.X">
            <summary>
            Frozen on the X axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.FreezeStyle.Y">
            <summary>
            Frozen on the Y axis.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MoveableBar.Confinement">
            <summary>
            How the <see cref="T:WarWolfWorks.UI.MoveableBar"/> is confined.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Confinement.None">
            <summary>
            Not confined.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Confinement.SnapParent">
            <summary>
            Clamped to it's parent when released.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Confinement.HardParent">
            <summary>
            Clamps to it's parent constantly.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.MovableBar">
            <summary>
            Bar to be used as the "interactor".
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.UIToMove">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> to move with the bar.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Freeze">
            <summary>
            The <see cref="T:WarWolfWorks.UI.MoveableBar.FreezeStyle"/> of this <see cref="T:WarWolfWorks.UI.MoveableBar"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.OriginalRectSize">
            <summary>
            Rect min and max anchores stored in a vector4. Sorted as follows: anchorMin.x, anchorMin.y, anchorMax.x, anchorMax.y.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.CurrentRectSize">
            <summary>
            Returns current rect size.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.LastRectSize">
            <summary>
            Last position at which anchors were before the window was released.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.MouseOffset">
            <summary>
            Position at which the mouse is relative to the bar.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.IsOnBar">
            <summary>
            Returns true if the window is currently moved.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Clamping">
            <summary>
            If true, the menu will snap back to screen view when released.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MoveableBar.CanMoveUI">
            <summary>
            Returns true if it can drag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MoveableBar.SetRectDefaultSizes">
            <summary>
            Sets <see cref="P:WarWolfWorks.UI.MoveableBar.OriginalRectSize"/> and <see cref="P:WarWolfWorks.UI.MoveableBar.LastRectSize"/> to <see cref="P:WarWolfWorks.UI.MoveableBar.CurrentRectSize"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.Subtitle">
            <summary>
            Used with <see cref="T:WarWolfWorks.UI.GUIViewport"/> to display text on the screen.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.TextGraphic">
            <summary>
            The <see cref="T:TMPro.TextMeshProUGUI"/> object assigned to this <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Content">
            <summary>
            The text to be displayed on screen.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.AnchoredSize">
            <summary>
            The anchored size of this <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Position">
            <summary>
            The position at which the text displays.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.TextColor">
            <summary>
            The color of the text. (Uses <see cref="M:UnityEngine.Gradient.Evaluate(System.Single)"/> to set the color of the text)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.GetCurrentCountdown">
            <summary>
            Returns the current countdown.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Countdown">
            <summary>
            The countdown that the text counts down from.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Loops">
            <summary>
            If true, the <see cref="T:WarWolfWorks.UI.Subtitle"/> will not get removed when countdown reaches 0; Instead, it will reset the countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Type">
            <summary>
            <see cref="T:WarWolfWorks.UI.Subtitle"/> is directly set with it's anchored position. (<see cref="F:WarWolfWorks.UI.GUIViewport.GUI.GUIType.AsAnchors"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.Reset(System.String,UnityEngine.Gradient)">
            <summary>
            Resets the <see cref="T:WarWolfWorks.UI.Subtitle"/>'s countdown and assigns it with new content and a new gradient.
            </summary>
            <param name="newContent"></param>
            <param name="newGradient"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.OnInit">
            <summary>
            Sets the cooldown and starts a coroutine to calculate the countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.Dispose">
            <summary>
            Destroys the <see cref="T:TMPro.TextMeshProUGUI"/> used.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.SetPosition(UnityEngine.Vector2)">
            <summary>
            Sets the anchored position of the text.
            </summary>
            <param name="anchoredPos"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.SetSize(UnityEngine.Vector2)">
            <summary>
            Sets the anchored size of the text.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.#ctor(System.String,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Gradient,System.Boolean)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
            <param name="content"></param>
            <param name="anchoredPosition"></param>
            <param name="anchoredSize"></param>
            <param name="countdown"></param>
            <param name="textColor"></param>
            <param name="loops"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.#ctor(WarWolfWorks.UI.Subtitle)">
            <summary>
            Creates a copy of another <see cref="T:WarWolfWorks.UI.Subtitle"/>; Copies everything except <see cref="P:WarWolfWorks.UI.Subtitle.TextGraphic"/>.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:WarWolfWorks.UI.Transitioning.ColorTransition">
            <summary>
            A transition class which makes a solid color appear on the screen with it's alpha based on the progression of the transition.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.ColorTransition.Graphic">
            <summary>
            The image used for the color display.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.ColorTransition.Color">
            <summary>
            The color used.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.ColorTransition.#ctor(UnityEngine.Color)">
            <summary>
            Creates a color transition.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.ColorTransition.#ctor">
            <summary>
            Creates a color transition with a black color.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.Transitioning.Transition">
            <summary>
            Base class for implementing a transition inside the <see cref="T:WarWolfWorks.UI.Transitioning.TransitionManager"/>.
            (Supported interfaces: <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IAwake"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IStart"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IFixedUpdate"/>, <see cref="T:WarWolfWorks.Interfaces.UnityMethods.ILateUpdate"/>,
            <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IOnDestroy"/>)
            (Note: <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IAwake"/> is called when this <see cref="T:WarWolfWorks.UI.Transitioning.Transition"/> is added to a <see cref="T:WarWolfWorks.UI.Transitioning.TransitionManager"/>,
            while <see cref="T:WarWolfWorks.Interfaces.UnityMethods.IStart"/> is called when this <see cref="T:WarWolfWorks.UI.Transitioning.Transition"/> is started.)
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.Transition.Initiated">
            <summary>
            The initiated state of this <see cref="T:WarWolfWorks.UI.Transitioning.Transition"/>. (<see cref="T:WarWolfWorks.Interfaces.IParentInitiatable`1"/> implementation)
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.Transition.Parent">
            <summary>
            The <see cref="T:WarWolfWorks.UI.Transitioning.TransitionManager"/> parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.Transition.TransitionProgress">
            <summary>
            The progress of the transition; 0 is start, 1 is end.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.Transition.IsDetransitioning">
            <summary>
            Returns true if the <see cref="P:WarWolfWorks.UI.Transitioning.Transition.TransitionProgress"/> has hit 1, and goes back to 0 to simulate a fade-out.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.Transition.Speed">
            <summary>
            The speed at which this transition is going. (Set through <see cref="M:WarWolfWorks.UI.Transitioning.TransitionManager.SetTransition``1(System.Int32,``0,System.Single)"/>).
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.Transition.Index">
            <summary>
            The index in which this <see cref="T:WarWolfWorks.UI.Transitioning.Transition"/> resides in it's parent.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.Transition.WarWolfWorks#Interfaces#IParentInitiatable{WarWolfWorks#UI#Transitioning#TransitionManager}#Init(WarWolfWorks.UI.Transitioning.TransitionManager)">
            <summary>
            Initiates this transition.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.UI.Transitioning.TransitionManager">
            <summary>
            Class used for transitions between events.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Transitioning.TransitionManager.CurrentlyActive">
            <summary>
            The currently active transition.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.Transitioning.TransitionManager.OnTransitionStart">
            <summary>
            This event is invoked when ActivateTransition(int ofIndex) is called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.Transitioning.TransitionManager.OnTransitionComplete">
            <summary>
            This event is invoked once the transition's alpha is at 1.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.Transitioning.TransitionManager.OnTransitionEnd">
            <summary>
            This event is invoked after OnTransitionComplete when transition's alpha is at 0.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.TransitionManager.GetTransition(System.Int32)">
            <summary>
            Returns the transition under the specified index.s
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.TransitionManager.SetTransition``1(System.Int32,``0,System.Single)">
            <summary>
            Sets a transition to the specified index. (Note: This does not start the transition)
            </summary>
            <param name="index"></param>
            <param name="transition"></param>
            <param name="speed"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.TransitionManager.SetTransitionSpeed(System.Int32,System.Single)">
            <summary>
            Sets the speed of a transition.
            </summary>
            <param name="index"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Transitioning.TransitionManager.RunTransition(System.Int32)">
            <summary>
            Activates a transition of the specified index.
            </summary>
            <param name="ofIndex"></param>
        </member>
        <member name="T:WarWolfWorks.UI.WorldText">
            <summary>
            Used with <see cref="T:WarWolfWorks.UI.GUIViewport"/> to display a text in world position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.TextGraphic">
            <summary>
            The <see cref="T:TMPro.TextMeshProUGUI"/> object assigned to this <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.Content">
            <summary>
            The text to be displayed on screen.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.AnchoredSize">
            <summary>
            The anchored size of this <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.Position">
            <summary>
            The position at which the text displays.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.TextColor">
            <summary>
            The color of the text. (Uses <see cref="M:UnityEngine.Gradient.Evaluate(System.Single)"/> to set the color of the text)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.GetCurrentCountdown">
            <summary>
            Returns the current countdown.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.Countdown">
            <summary>
            The countdown that the text counts down from.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.Loops">
            <summary>
            If true, the <see cref="T:WarWolfWorks.UI.Subtitle"/> will not get removed when countdown reaches 0; Instead, it will reset the countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.WorldText.Type">
            <summary>
            <see cref="T:WarWolfWorks.UI.WorldText"/> uses <see cref="F:WarWolfWorks.UI.GUIViewport.GUI.GUIType.WorldPosToViewport"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.Reset(System.String,UnityEngine.Gradient)">
            <summary>
            Resets the <see cref="T:WarWolfWorks.UI.Subtitle"/>'s countdown and assigns it with new content and a new gradient.
            </summary>
            <param name="newContent"></param>
            <param name="newGradient"></param>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.OnInit">
            <summary>
            Sets the cooldown and starts a coroutine to calculate the countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.Dispose">
            <summary>
            Destroys the <see cref="T:TMPro.TextMeshProUGUI"/> used.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.SetFollowed(UnityEngine.Transform)">
            <summary>
            Sets the anchored position of the text.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.SetSize(UnityEngine.Vector2)">
            <summary>
            Sets the anchored size of the text.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.#ctor(System.String,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector2,System.Single,UnityEngine.Gradient,System.Boolean)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
            <param name="content"></param>
            <param name="followed"></param>
            <param name="offset"></param>
            <param name="anchoredSize"></param>
            <param name="countdown"></param>
            <param name="textColor"></param>
            <param name="loops"></param>
        </member>
        <member name="M:WarWolfWorks.UI.WorldText.#ctor(WarWolfWorks.UI.WorldText)">
            <summary>
            Creates a copy of another <see cref="T:WarWolfWorks.UI.Subtitle"/>; Copies everything except <see cref="P:WarWolfWorks.UI.WorldText.TextGraphic"/>.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.AbstractCloneable`1">
            <summary>
            Used for advanced cloning of a class. An advanced version of <see cref="T:System.ICloneable"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AbstractCloneable`1.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.AbstractCloneable`1.HandleCloned(`0)">
            <summary>
            Handles type-specific cloning; Called in <see cref="M:WarWolfWorks.Utility.AbstractCloneable`1.Clone"/>.
            </summary>
            <param name="clone"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.AnimationManager">
            <summary>
            A utility method which allows for indexing of animations and playback of them.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AnimationManager.DebugAnimationsPlayed">
            <summary>
            If true, it will debug all animations played in the unity console using <see cref="T:WarWolfWorks.AdvancedDebug"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AnimationManager.Clips">
            <summary>
            All clips contained by the Animation Manager.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.AnimationManager.Player">
            <summary>
            The Animation component used to play animations.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.AnimationManager.CurrentIndex">
            <summary>
            Returns the index of the currently played animation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.AnimationManager.CurrentName">
            <summary>
            Returns the name of the currently played animation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.AnimationManager.CurrentProgress01">
            <summary>
            Returns the progress of the currently played animation in percent, 0 being the start, 1 being the end.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.CurrentlyPlaying">
            <summary>
            Returns the currently played animation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.PlayAnimation(System.Int32)">
            <summary>
            Plays animation based on index.
            </summary>
            <param name="toPlay"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.PlayAnimation(System.String)">
            <summary>
            Plays animation based on name.
            </summary>
            <param name="toPlay"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.CanPlayAnimation(WarWolfWorks.Utility.AnimationCatalog)">
            <summary>
            Returns true if the given animation can be played.
            </summary>
            <param name="ac"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.StopCurrentAnimation">
            <summary>
            Stops the current animation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.ResumeCurrentAnimation">
            <summary>
            Resumes the current animation.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.AnimationCatalog">
            <summary>
            A group of variables used for <see cref="T:WarWolfWorks.Utility.AnimationManager"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AnimationCatalog.Name">
            <summary>
            Name of the animation inside the <see cref="T:UnityEngine.Animator"/> component.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AnimationCatalog.Index">
            <summary>
            Index assigned to this animation.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AnimationCatalog.Repeats">
            <summary>
            If true, the same animation can be called to play even if it is currently playing.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationCatalog.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:WarWolfWorks.Utility.AnimationCatalog"/>.
            </summary>
            <param name="name"></param>
            <param name="index"></param>
            <param name="repeating"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.Axis">
            <summary>
            Depicts a 3D axis for directions. (Flags-friendly)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.None">
            <summary>
            No Axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.X">
            <summary>
            Horizontal Axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.Y">
            <summary>
            Vertical Axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.Z">
            <summary>
            Depth Axis.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.CameraManager2D">
            <summary>
            Camera Manager for 2D use. Can be explicitly converted to FollowBehaviour, TransformLimiter and Camera.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.op_Explicit(WarWolfWorks.Utility.CameraManager2D)~WarWolfWorks.Utility.FollowBehavior">
            <summary>
            Explicitly returns the <see cref="T:WarWolfWorks.Utility.CameraManager2D"/>'s <see cref="F:WarWolfWorks.Utility.CameraManager2D.h_FollowBehavior"/>.
            </summary>
            <param name="cm2d"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.op_Explicit(WarWolfWorks.Utility.CameraManager2D)~WarWolfWorks.Utility.PositionLimiter">
            <summary>
            Explicitly returns the <see cref="T:WarWolfWorks.Utility.CameraManager2D"/>'s <see cref="F:WarWolfWorks.Utility.CameraManager2D.h_TransformLimiter"/>.
            </summary>
            <param name="cm2d"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.op_Implicit(WarWolfWorks.Utility.CameraManager2D)~UnityEngine.Camera">
            <summary>
            Implicitly returns the <see cref="T:WarWolfWorks.Utility.CameraManager2D"/>'s Camera it is attached to.
            </summary>
            <param name="cm2d"></param>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManager2D.CameraDefaultSize">
            <summary>
            The default size of the camera, used in cases of exceptions or <see cref="M:WarWolfWorks.Utility.CameraManager2D.SetCameraSizeDefault"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManager2D.CameraDestinationSize">
            <summary>
            The size towards which the camera's orthographic size will move.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManager2D.CameraResizeSpeed">
            <summary>
            Speed at which the camera's orthographic size moves towards <see cref="F:WarWolfWorks.Utility.CameraManager2D.CameraDestinationSize"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.CurrentSize">
            <summary>
            Current size of the camera.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.GetCurrentlyAppliedSize">
            <summary>
            Returns the size currently applied to the camera; This is useful if you're using cinemachine or
            other components which override the camera size in lateupdates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.Position">
            <summary>
            Pointer to transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.Rotation">
            <summary>
            Pointer to transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.EulerAngles">
            <summary>
            Pointer to transform.eulerAngles.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.GetCamera">
            <summary>
            Returns the camera attached to this camera manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.GetFollowBehavior">
            <summary>
            Returns the <see cref="T:WarWolfWorks.Utility.FollowBehavior"/> attached to this camera manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.GetLimiter">
            <summary>
            Returns the <see cref="T:WarWolfWorks.Utility.PositionLimiter"/> attached to this camera manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.SetCameraSizeDefault">
            <summary>
            Sets the camera size to it's initial value.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.CameraManagerFPS">
            <summary>
            Camera manager for an FPS game.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.op_Implicit(WarWolfWorks.Utility.CameraManagerFPS)~UnityEngine.Camera">
            <summary>
            Returns implicitly the Camera component.
            </summary>
            <param name="cmfps"></param>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManagerFPS.SensitivityHorizontal">
            <summary>
            Sensitivity of the camera controller's horizontal axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManagerFPS.SensitivityVertical">
            <summary>
            Sensitivity of the camera controller's vertical axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManagerFPS.MaxVerticalRotation">
            <summary>
            Sets the maximum rotation allowed vertically.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManagerFPS.InversedHorizontal">
            <summary>
            If true, the horizontal axis of the camera rotation will be reversed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManagerFPS.InversedVertical">
            <summary>
            If true, the vertical axis of the camera rotation will be reversed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.CameraManagerFPS.LockStateStart">
            <summary>
            Describes the lock state of the mouse when it's first instantiated in the scene.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManagerFPS.Position">
            <summary>
            Pointer to transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManagerFPS.Rotation">
            <summary>
            Pointer to transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManagerFPS.EulerAngles">
            <summary>
            Pointer to transform.eulerAngles.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.GetCamera">
            <summary>
            Returns the camera attached to this camera manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.IsInversed(UnityEngine.RectTransform.Axis)">
            <summary>
            Returns true if an axis is inverted.
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.SetInversed(UnityEngine.RectTransform.Axis,System.Boolean)">
            <summary>
            Inverts the controls of an axis.
            </summary>
            <param name="axis"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.SetFOV(System.Single)">
            <summary>
            Sets the Field of View of the camera.
            </summary>
            <param name="degreesDelta"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.CMColor">
            <summary>
            Color class used to apply colors to a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.Value">
            <summary>
            The color value this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> originally applies.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration">
            <summary>
            The duration at which this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> will stay inside a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> based on <see cref="T:WarWolfWorks.Utility.Coloring.ColorBehavior"/>.
            (Serialized as "Duration" inside the inspector)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.CurrentDuration">
            <summary>
            The current countdown of this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>. Used based on <see cref="T:WarWolfWorks.Utility.Coloring.ColorBehavior"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.Behavior">
            <summary>
            Determines how this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s countdown behaves.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.Application">
            <summary>
            Determines how the color is applied to a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.#ctor(UnityEngine.Color,System.Single,WarWolfWorks.Utility.Coloring.ColorBehavior,WarWolfWorks.Utility.Coloring.ColorApplication)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> instance.
            </summary>
            <param name="color"></param>
            <param name="duration"></param>
            <param name="behaviour"></param>
            <param name="application"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Explicit(WarWolfWorks.Utility.Coloring.CMColor)~WarWolfWorks.Utility.Coloring.ColorBehavior">
            <summary>
            The explicit returning of a <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.Behavior"/>.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Explicit(WarWolfWorks.Utility.Coloring.CMColor)~WarWolfWorks.Utility.Coloring.ColorApplication">
            <summary>
            The explicit returning of a <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.Application"/>.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Implicit(WarWolfWorks.Utility.Coloring.CMColor)~UnityEngine.Color">
            <summary>
            The implicit returning of a <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.Value"/>.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Equality(WarWolfWorks.Utility.Coloring.CMColor,WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Returns true if both instances are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Inequality(WarWolfWorks.Utility.Coloring.CMColor,WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Returns true if both instances are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.Equals(System.Object)">
            <summary>
            CMColor's Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.Equals(WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Returns true if all variables in the other <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> are the same.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.GetHashCode">
            <summary>
            Returns this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s HashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorableRenderer2D">
            <summary>
            To use with <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> for application of color(s) to sprite renderers.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorableRenderer2D.Renderers">
            <summary>
            Reference of all <see cref="T:UnityEngine.SpriteRenderer"/> assigned to be changed.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorApplication">
            <summary>
            How the color is applied for a final result inside a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.ignore">
            <summary>
            The <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> will be ignored completely.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.FlatAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s raw color value on the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.FlatRemove">
            <summary>
            Removes the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s raw color value from the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AverageAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied on the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AverageRemove">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied on the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value on the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingRemove">
            <summary>
            Removes the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value from the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingAverageAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied on the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingAverageRemove">
            <summary>
            Removes the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied from the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorBehavior">
            <summary>
            Determines how a <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> should behave inside a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorBehavior.RemoveOnDurationEnd">
            <summary>
            When <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration"/> reaches 0 or less, it will be removed from it's <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> host.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorBehavior.StayAfterDurationEnd">
            <summary>
            <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration"/> will still be counted, however it will simply stop at 0 and not remove the color.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorBehavior.NoDurationCountdown">
            <summary>
            <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration"/> will not be counted.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorManager">
            <summary>
            Class used to manage colors. It works on a systen similar to layers, where there is 8 lists of <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>s,
            where 8 is always displayed as it is of the lowest depth. 
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorManager.BaseColor">
            <summary>
            The base color that the color manager will default to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.GetColorables">
            <summary>s
            Returns all <see cref="T:WarWolfWorks.Interfaces.IColorable"/> elements affected by this <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.AddColorable(WarWolfWorks.Interfaces.IColorable)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.Interfaces.IColorable"/> to colorables affected by this <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
            <param name="colorable"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveColorable(WarWolfWorks.Interfaces.IColorable)">
            <summary>
            Removes specified <see cref="T:WarWolfWorks.Interfaces.IColorable"/> from colorables affected by this <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
            <param name="colorable"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.ColorManager.FinalColor">
            <summary>
            The color that will be applied to all Colorables.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RefreshColorDuration(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Restarts the duration from the beginning for the given color.
            </summary>
            <param name="color"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.AddColor(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Add a color to be processed by the <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
            <param name="color"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveColor(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Removes a previously added <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> and returns true if the color was successfully removed.
            </summary>
            <param name="color"></param>
            <param name="from"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveColor(WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Removes the first instance of the given color in any layer.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveAll(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Removes all instances of the given object from the specified layer.
            </summary>
            <param name="color"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveAll(WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Removes all instances of the given object from all layers.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.DefaultKeys">
            <summary>
            A more customizable Input system compared to the <see cref="T:UnityEngine.Input"/> class.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.DefaultKeys.WKey">
            <summary>
            Struct used to store keys and identify them by name.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.DefaultKeys.WKey.Name">
            <summary>
            Name of the <see cref="T:WarWolfWorks.Utility.DefaultKeys.WKey"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.DefaultKeys.WKey.Key">
            <summary>
            Value of the <see cref="T:WarWolfWorks.Utility.DefaultKeys.WKey"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.WKey.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Base constructor of the <see cref="T:WarWolfWorks.Utility.DefaultKeys.WKey"/>.
            </summary>
            <param name="name"></param>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.WKey.#ctor(WarWolfWorks.IO.CTS.Variable)">
            <summary>
            Constructor based off of <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/> save lines.
            </summary>
            <param name="variable"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.DefaultKeys.IsOptimized">
            <summary>
            Is the optimization mode currently on?
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Optimize">
            <summary>
            Optimizes the DefaultKeys system to store all keys into a Dictionary, 
            instead of directly Stream-Reading it from the file. (Automatically triggers on <see cref="T:UnityEngine.RuntimeInitializeOnLoadMethodAttribute"/>.<see cref="F:UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Unoptimize">
            <summary>
            Unoptimizes the DefaultKeys system to make DefaultKeys read directly from file through Stream Reading.
            (Recommended only to add multiple keys to DefaultKeys through code)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Reoptimize">
            <summary>
            Updates the stored list of optimized keys to be up to date with DefaultKeys file.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetDatabaseKey(System.String)">
            <summary>
            Returns a <see cref="T:UnityEngine.KeyCode"/> assigned with given name.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetDatabaseKeys(System.String[])">
            <summary>
            Returns a list of <see cref="T:UnityEngine.KeyCode"/>s assigned with the given names.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKey(System.String)">
            <summary>
            Returns true if the <see cref="T:UnityEngine.KeyCode"/> under keyName is held down.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKey(System.Boolean,System.String[])">
            <summary>
            Returns true if either is false and all given keys are held, or when either is true and any of the given keys is held.
            </summary>
            <param name="either"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyUp(System.String)">
            <summary>
            Returns true if the <see cref="T:UnityEngine.KeyCode"/> under keyName is lifted.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyUp(System.Boolean,System.String[])">
            <summary>
            Returns true if either is false and all given keys are lifted, or when either is true and any of the given keys is lifted.
            </summary>
            <param name="either"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyDown(System.String)">
            <summary>
            Returns true if the <see cref="T:UnityEngine.KeyCode"/> under keyName is pressed.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyDown(System.Boolean,System.String[])">
            <summary>
            Returns true if either is false and all given keys are pressed, or when either is true and any of the given keys is pressed.
            </summary>
            <param name="either"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetAllKeys">
            <summary>
            Returns a <see cref="T:System.ValueTuple"/> array of all keys stored inside DefaultKeys. (If optimization is active, it will return all keys in Dictionary, otherwise returns directly from the file.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.KeyExists(System.String)">
            <summary>
            Returns true if key under keyName exists inside <see cref="T:WarWolfWorks.Utility.DefaultKeys"/>.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.AddKey(WarWolfWorks.Utility.DefaultKeys.WKey)">
            <summary>
            Adds a key to the database; If a key under <see cref="F:WarWolfWorks.Utility.DefaultKeys.WKey.Name"/> already exists, it will only change that key's value with <see cref="F:WarWolfWorks.Utility.DefaultKeys.WKey.Key"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.AddKey(System.String,UnityEngine.KeyCode)">
            <summary>
            Adds a key to the database; If a key under the given name already exists, it will only change that key's value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ForceAddKey(WarWolfWorks.Utility.DefaultKeys.WKey)">
            <summary>
            Forces <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> to add/change a key inside the database even if optimization mode is active.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ForceAddKey(System.String,UnityEngine.KeyCode)">
            <summary>
            Forces <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> to add/change a key inside the database even if optimization mode is active.
            </summary>
            <param name="key"></param>
            <param name="name"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ChangeKeyName(System.String,System.String)">
            <summary>
            Changes a key's name.
            </summary>
            <param name="from">Current name of the key.</param>
            <param name="to">New name of the key.</param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.RemoveKey(System.String)">
            <summary>
            Removes a key from the database.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ForceRemoveKey(System.String)">
            <summary>
            Forces DefaultKeys to remove key from database even if optimization mode is active.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Apply">
            <summary>
            Applies all changes made to <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> to it's save file (CTS).
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.FloatRange">
            <summary>
            Range struct for Clamping/Range utility in <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FloatRange.Min">
            <summary>
            The minimal value of this <see cref="T:WarWolfWorks.Utility.FloatRange"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FloatRange.Max">
            <summary>
            The maximal value of this <see cref="T:WarWolfWorks.Utility.FloatRange"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.GetClampedValue(System.Single)">
            <summary>
            Returns the value given clamped between MinRange and MaxRange.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.IsWithinRange(System.Single)">
            <summary>
            Returns true if the given value is within Min (inclusive) and Max (inclusive).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.GetRandom">
            <summary>
            Returns a random value between <see cref="F:WarWolfWorks.Utility.FloatRange.Min"/> (inclusive) and <see cref="F:WarWolfWorks.Utility.FloatRange.Max"/> (inclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.GetTupleRange">
            <summary>
            Returns a <see cref="T:System.Tuple`2"/> of <see cref="F:WarWolfWorks.Utility.FloatRange.Min"/> and <see cref="F:WarWolfWorks.Utility.FloatRange.Max"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.Equals(WarWolfWorks.Utility.FloatRange)">
            <summary>
            Returns true if Min and Max are of the exact same value for both FloatRanges.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.FloatRange"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.#ctor(System.Single)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.FloatRange"/> with <see cref="F:WarWolfWorks.Utility.FloatRange.Min"/> and <see cref="F:WarWolfWorks.Utility.FloatRange.Max"/> set to the same value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.FollowBehavior">
            <summary>
            Behaviour used to make an object follow a list of transforms. Useful for cameras.
            (Explicitly convertible to <see cref="T:UnityEngine.Transform"/>)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehavior.Followed">
            <summary>
            All followed transform components.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehavior.Is2D">
            <summary>
            If true, the Z axis is ignored.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehavior.Speed">
            <summary>
            Speed at which this object will be moved towards the final destination.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehavior.Acceleration">
            <summary>
            When far away from the desired position, the follow behavior will start accelerating by the given value based on distance.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehavior.AccelerationDistance">
            <summary>
            Required distance for the acceleration to be applied.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehavior.MovedPosition">
            <summary>
            Override this Vector3 to set a specific position to move; Points to transform.position by default.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehavior.DeltaTime">
            <summary>
            Used to apply physics-based speed on follow; Points to <see cref="P:UnityEngine.Time.deltaTime"/> by default.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehavior.GetFinalPosition">
            <summary>
            Returns the position towards which this <see cref="T:WarWolfWorks.Utility.FollowBehavior"/> is going to.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks">
            <summary>
            A class which contains 20+Gadzillion-billion-yes methods for various utilities.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToRainbow(System.String,System.Int32,UnityEngine.Color[])">
            <summary>
            Puts a string value into a rainbow text using Unity's Rich Text format.
            </summary>
            <param name="original"></param>
            <param name="frequency"></param>
            <param name="colorsToUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cutout(System.String,System.String,System.String)">
            <summary>
            Extention method for <see cref="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.String,System.String)"/>.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cutout(System.String,System.Char,System.Char)">
            <summary>
            Extention method for <see cref="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.Char,System.Char)"/>.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsApproximate(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if numberToApproximate is not lower than or higer than numberToCompare using approximation as range.
            </summary>
            <param name="NumberToApproximate"></param>
            <param name="NumberToCompare"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Truncate(System.Single,System.Int32)">
            <summary>
            Cuts a float to digits length.
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToPositive(System.Single)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(System.Single)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToPositive(System.Int32)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(System.Int32)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToPositive(System.Int64)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(System.Int64)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(UnityEngine.Color)">
            <summary>
            Puts all values of a given color into negatives. (If a value was negative, it will be put into positive)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector4)">
            <summary>
            Extention method. Points to <see cref="M:WarWolfWorks.Utility.Hooks.MathF.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector4)"/>.
            </summary>
            <param name="rt"></param>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Extention method. Points to <see cref="M:WarWolfWorks.Utility.Hooks.MathF.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2)"/>.
            </summary>
            <param name="rt"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetAnchoredUI(UnityEngine.RectTransform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Extention method. Points to <see cref="M:WarWolfWorks.Utility.Hooks.MathF.SetAnchoredUI(UnityEngine.RectTransform,System.Single,System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="rt"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetAnchoredPosition(UnityEngine.RectTransform)">
            <summary>
            Returns the anchored position of a <see cref="T:UnityEngine.RectTransform"/> in <see cref="T:UnityEngine.Vector4"/>: X = minX, Y = minY, z = maxX, W = maxY.
            </summary>
            <param name="rt"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector4)">
            <summary>
            Returns true if the given position is within the bounds given. (<see cref="T:UnityEngine.Vector4"/> bounds: X = minX, Y = minY, z = maxX, W = maxY)
            </summary>
            <param name="position"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns true if the given position is within the bounds given.
            </summary>
            <param name="position"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Find``1(``0[],System.Predicate{``0})">
            <summary>
            <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.Find``1(``0[],System.Predicate{``0})"/> Pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.FindIndex``1(``0[],System.Predicate{``0})"/> Pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ForEach``1(``0[],System.Action{``0})">
            <summary>
            <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.ForEach``1(``0[],System.Action{``0})"/> Pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RemoveNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list with all null elements removed (if any)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Itterates through each element <typeparamref name="T"/>, calls it's <typeparamref name="T"/>.ToString()
            and returns all of them in a string array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetNullIndex``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns the index of the first element T equal to null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetNullIndex``1(``0[])">
            <summary>
            Returns the index of the first element T equal to null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetNullIndex``1(``0[],System.Int32)">
            <summary>
            Returns the index of the first element T equal to null starting from specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetNullIndex``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns the index of the first element T equal to null starting from specified index up to count times upwards in the enumerator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetNullIndex``1(``0[],WarWolfWorks.Utility.IntRange)">
            <summary>
            Returns index of the first element T equal to null starting from IntRange.Min to IntRange.Max.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetNullIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the index of the first element T equal to null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetCollectionSizeIfNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.ICollection`1"/> of given size if collection passed was null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToQueueSized``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Takes <paramref name="size"/> elements of the given collection and returns them as a <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Collection to itterate through.</param>
            <param name="size">Amount of items from <paramref name="collection"/> to itterate through.</param>
            <param name="fromEnd">If true, it will start from collection's Count-1 and go in descending order to get items, instead of 0 in ascending order.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToStackSized``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Takes <paramref name="size"/> elements of the given collection and returns them as a <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Collection to itterate through.</param>
            <param name="size">Amount of items from <paramref name="collection"/> to itterate through.</param>
            <param name="fromEnd">If true, it will start from collection's Count-1 and go in descending order to get items, instead of 0 in ascending order.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetItemsFromTupleIndex``1(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``0}},System.Int32)">
            <summary>
            Gets all <typeparamref name="T"/> items inside a <see cref="T:System.ValueTuple`2"/> based on item index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">If 0, it returns Item1, otherwise returns Item2.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetItemsFromTupleIndex``1(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``0,``0}},System.Int32)">
            <summary>
            Gets all <typeparamref name="T"/> items inside a <see cref="T:System.ValueTuple`3"/> based on item index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">If 0, it returns Item1; if 1, returns Item2; otherwise returns Item3.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RemoveArrayFromString(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes an array of strings from original.
            </summary>
            <param name="original"></param>
            <param name="removers"></param>
            <completionlist cref="T:System.String"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RotateTo(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Creates a rotation from original position to destination.
            </summary>
            <param name="original"></param>
            <param name="destination"></param>
            <param name="reversed"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RotateTowards2D(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
             Creates a rotation from center position to destination using Atan2.
            </summary>
            <param name="center"></param>
            <param name="destination"></param>
            <param name="adder">Z rotation to add onto the result.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RotateToNormalized(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3)"/> with both vectors being normalized before calculation.
            </summary>
            <param name="original"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToByteArray(System.String)">
            <summary>
            Equivalent to ASCII <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToStringFromBytes(System.Byte[])">
            <summary>
            Equivalent to ASCII <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/>.
            </summary>
            <param name="byt"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetAttributeValue``2(System.Type,System.Func{``0,``1})">
            <summary>
            Returns an attribute value based on type and func given.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="type"></param>
            <param name="valueSelector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Starts a singleton-type unity coroutine.
            </summary>
            <param name="caller"></param>
            <param name="routine"></param>
            <param name="isRunningBool"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Stops a singleton-type unity coroutine.
            </summary>
            <param name="caller"></param>
            <param name="routine"></param>
            <param name="isRunningBool"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Random">
            <summary>
            Subclass with all utility methods for use of a random factor.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Random.RandomVector01WithNeg">
            <summary>
            Returns anything between -Vector3.one and Vector3.one.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Random.RandomVector01">
            <summary>
            Returns anything between Vector3.zero and Vector3.one.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.GetRandomVector2(System.Boolean)">
            <summary>
            Returns a random vector2 with a magniture of 1.
            </summary>
            <param name="includeNegative">If true, the vector returned can also go into negative values.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.GetRandomVector3(System.Boolean)">
            <summary>
            Returns a random vector3 with a magniture of 1.
            </summary>
            <param name="includeNegative">If true, the vector returned can also go into negative values.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.GetRandomVector4(System.Boolean)">
            <summary>
            Returns a random vector4 with a magniture of 1.
            </summary>
            <param name="includeNegative">If true, the vector returned can also go into negative values.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            Shuffles all items inside a list, changing their index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.RandomItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random item from an IEnumerable value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Range(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector2"/> with each of it's values being a random number between min and max.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Range(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector3"/> with each of it's values being a random number between min and max.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Range(UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector3"/> with each of it's values being a random number between min and max.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.GetRandomString(System.Int32,System.String)">
            <summary>
            Returns a random string with characters between a-z, A-Z and 0-9.
            </summary>
            <param name="length"></param>
            <param name="characters">Characters used to return the random string.</param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Streaming">
            <summary>
            Subclass with all streaming and saving/loading methods.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.CreateFolder(System.String)">
            <summary>
            Attempts to create a folder. Returns true if the folder was successfully created.
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetAllFilesInFolder(System.String,System.String,System.Boolean)">
            <summary>
            Gets all files inside a given folder.
            </summary>
            <param name="folderPath"></param>
            <param name="extention"></param>
            <param name="includeFolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.EncryptFile(System.String,System.String)">
            <summary>
            Encrypts all contents of a file using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.DecryptFile(System.String,System.String)">
            <summary>
            Decrypts all contents of a file using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>, assuming it was previously encrypted using <see cref="M:WarWolfWorks.Utility.Hooks.Streaming.EncryptFile(System.String,System.String)"/>.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetAllStreamedLines(System.IO.StreamReader)">
            <summary>
            Gets all lines from a StreamReader and returns them as a string array. (THIS METHOD DOES NOT FLUSH OR DISPOSE THE STREAMREADER)
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.LineChanger(System.String,System.Int32,System.String)">
            <summary>
            Overrides a line at the given index of a file.
            </summary>
            <param name="newText"></param>
            <param name="filePath"></param>
            <param name="index"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Streaming.StreamingAssetsPath">
            <summary>
            Returns the StreamingAssets folder path in windows form.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Streaming.AssetsPath">
            <summary>
            Returns the Assets folder path in windows form.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetStreamingAssetsFilePath(System.String)">
            <summary>
            Returns a merged path between <see cref="P:WarWolfWorks.Utility.Hooks.Streaming.StreamingAssetsPath"/> and fileName given.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetAssetsFilePath(System.String)">
            <summary>
            Returns a merged path between <see cref="P:WarWolfWorks.Utility.Hooks.Streaming.AssetsPath"/> and fileName given.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption">
            <summary>
            Encryption class which uses the Rijndael encryption algorithm.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Encrypt(System.String,System.String)">
            <summary>
            Returns an encrypted version of this string using the given password; CipherMode is set to CBC and PaddingMode to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Encrypt(System.String,System.String,System.Security.Cryptography.CipherMode)">
            <summary>
            Returns an encrypted version of this string using the given password; PaddingMode is set to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Encrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Returns an encrypted version of this string using the given password.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string previously encrypted using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>; CipherMode is set to CBC and PaddingMode to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Decrypt(System.String,System.String,System.Security.Cryptography.CipherMode)">
            <summary>
            Decrypts a string previously encrypted using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>; PaddingMode is set to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Decrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts a string previously encrypted using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Ciphers">
            <summary>
            Cipher algorithms.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Ciphers.Caesar(System.String,System.Int32)">
            <summary>
            Ceasar cipher which delays each character in a string by shift.
            </summary>
            <param name="source"></param>
            <param name="shift"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Cursor">
            <summary>
            Contains all methods concerning the mouse/cursor.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Cursor.MousePosInPercent">
            <summary>
            Returns the anchored position of the mouse in Vector2.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cursor.RotateTowardsMouse(UnityEngine.Camera,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a rotation from position based on the camera, which would rotate towards the mouse.
            </summary>
            <param name="camera"></param>
            <param name="position"></param>
            <param name="adder"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cursor.GetMouseWorldPosition(UnityEngine.Camera)">
            <summary>
            Gets the world position of the mouse.
            </summary>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cursor.GetMouseUIPosition(UnityEngine.Camera,System.Boolean)">
            <summary>
            Returns the Mouse's World position, 
            pixel position on screen if convertToViewPort is false, 
            otherwise it returns by using camera's ScreenToViewportPoint.
            </summary>
            <param name="camera"></param>
            <param name="convertToViewPort"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Colors">
            <summary>
            Contains all Color utilities.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.White">
            <summary>The White color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Black">
            <summary>The Black color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Red">
            <summary>The Red color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Orange">
            <summary>The Orange color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Yellow">
            <summary>The Yellow color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Green">
            <summary>The Green color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Blue">
            <summary>The Blue color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Cyan">
            <summary>The Cyan color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Pink">
            <summary>The Pink color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Purple">
            <summary>The Purple color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Magenta">
            <summary>The Magenta/Fuchsia color.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Tangelo">
            <summary>
            The best color. (Orange color with a red-ish hue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Crimson">
            <summary>
            The Crimson color. (light red)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.CrimsonRed">
            <summary>
            The Crimson Red color. (dark red, not to be confused with <see cref="F:WarWolfWorks.Utility.Hooks.Colors.Crimson"/>)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.MidnightBlue">
            <summary>
            The Midnight Blue color. (dark blue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.DodgerBlue">
            <summary>
            The Dodger Blue color. (vivid blue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Wisteria">
            <summary>
            The Wisteria color. (dark purple)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.CottonCandy">
            <summary>
            The Cotton Candy color. (dark, high contrast pink)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Daffodil">
            <summary>
            The Daffodil color. (slightly darker yellow)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Azure">
            <summary>
            The Azure color. (very light blue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Ao">
            <summary>
            The Ao/Office Green color. (dark green)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.ElectricUltramarine">
            <summary>
            The Electric Ultramarine color. (high contrast purple)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.FerrariRed">
            <summary>
            The Ferrari Red color. (slightly orange red)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Gold">
            <summary>
            The Gold color. (high contrast yellow)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.LapisLazuli">
            <summary>
            The Lapis Lazuli color. (pale blue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.LawnGreen">
            <summary>
            The Lawn Green color. (VERY high contract green)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.OxfordBlue">
            <summary>
            The Oxford Blue color. (very dark blue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.PsychedelicPurple">
            <summary>
            The Psychedelic Purple/Phlox color. (slightly lighter <see cref="P:UnityEngine.Color.magenta"/>)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.RoyalBlue">
            <summary>
            The Royal Blue color. (slightly pale blue)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.Timberwolf">
            <summary>
            The Timberwolf color. (gray with a brown tint)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.ZinnwalditeBrown">
            <summary>
            The Zinnwaldite Brown color. (very dark brown)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MoveTowards(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Returns the Vector4.MoveTowards equivalent for colors.
            </summary>
            <param name="point"></param>
            <param name="destination"></param>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.ToNegative(UnityEngine.Color)">
            <summary>
            Returns the original color with it's values being put into negatives. (If a value is negative, it will be put back to positive)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.ToAbsoluteNegative(UnityEngine.Color)">
            <summary>
            Returns the original color with it's values being put into negatives. (If a value is negative, it will be kept as is)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.Reverse(UnityEngine.Color)">
            <summary>
            Short for <see cref="P:UnityEngine.Color.white"/> - original.
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.PrimaryColors">
            <summary>
            Returns in order: Color.red, Color.yellow, Color.blue.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.ColorWheel">
            <summary>
            Returns colors in following order:
            Red -> Tangelo -> Orange -> Yellow -> Green -> Ao -> Cyan -> DodgerBlue -> Blue -> Purple -> Magenta.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.RainbowColors">
            <summary>
            Returns colors in following order:
            Red -> Orange -> Yellow -> Green -> Cyan -> Dodger Blue -> Magenta.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.ColorToHex(UnityEngine.Color)">
            <summary>
            Returns the hexcode value of a color. (Pointer of <see cref="M:UnityEngine.ColorUtility.ToHtmlStringRGB(UnityEngine.Color)"/>)
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MiddleMan(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Returns the median of two given colors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MiddleMan(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Returns the median of two given colors, where percentage 0 is a, 0.5 is the exact median, and 1 is b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="percentage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MiddleMan(System.Collections.Generic.ICollection{UnityEngine.Color})">
            <summary>
            Returns the average of all colors inside a collection.
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Enumeration">
            <summary>
            Contains some utility methods concerting enumeration and generic collections.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.GetItemCount``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the amount of times an item is present in a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.GetMatchCount``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns the amount of times a condition matched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.GetEmptyIndex``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first empty index of a list; Returns -1 if none were found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.GetEmptyIndex``1(``0[])">
            <summary>
            Returns the first empty index of an array; Returns -1 if none were found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ListContainsType``1(System.Collections.Generic.List{``0},System.Type)">
            <summary>
            Returns true if a list contains an item of type. (Only works on inherited classes)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ArrayMerger``1(``0[],``0[])">
            <summary>
            Returns an array which is a merged version of array1 and array2.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.EnumerableContains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Equivalent to <paramref name="collection"/>.Intersect(<paramref name="objectsToFind"/>).Any().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="objectsToFind"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the Array or all of it's elements are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Equivalent to <see cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/> for Arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Equivalent to <see cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/> for Arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Equivalent to <see cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.RemoveNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all null elements inside a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.RemoveDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all default elements inside a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ToGenericList``1(System.Collections.IList,System.Boolean)">
            <summary>
            Returns a generic <see cref="T:System.Collections.Generic.List`1"/> from a non-generic <see cref="T:System.Collections.IList"/>. In case of an incorrect cast, it will return null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="linqReturn">If false, it will return a new list instead of using System.Linq to generate a list.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ToGeneric``1(System.Collections.IEnumerable)">
            <summary>
            Returns a generic <see cref="T:System.Collections.Generic.IEnumerable`1"/> from a non-generic <see cref="T:System.Collections.IEnumerable"/>. In case of an incorrect cast, it will return null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.InstantiateList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of instantiated objects (unity copy). (Supports <see cref="T:WarWolfWorks.Interfaces.IInstantiatable"/> interface)
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.InstantiateList``1(``0[])">
            <summary>
            Returns an array of instantiated objects. (Supports <see cref="T:WarWolfWorks.Interfaces.IInstantiatable"/> interface)
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Physics">
            <summary>
            Raycasts and physics.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Physics.CastMultiple(UnityEngine.Vector2,UnityEngine.Vector2[],System.Int32)">
            <summary>
            Casts multiple raycasts in given directions from origin.
            </summary>
            <param name="origin">Center of the raycast.</param>
            <param name="directions">Directions which will be used for raycasts. Note that it will return a number of 
            <see cref="T:UnityEngine.RaycastHit2D"/> equal to the directions given, in the same order.</param>
            <param name="bitmask">The layermask(s) to use.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Physics.CastMultiple(UnityEngine.Vector2,UnityEngine.Vector2[],System.Int32,System.Int32@)">
            <summary>
            Performs a <see cref="M:WarWolfWorks.Utility.Hooks.Physics.CastMultiple(UnityEngine.Vector2,UnityEngine.Vector2[],System.Int32)"/> and gives the index of the closest raycast to the center.
            </summary>
            <param name="origin">Center of the raycast.</param>
            <param name="directions">Directions which will be used for raycasts. Note that it will return a number of 
            <see cref="T:UnityEngine.RaycastHit2D"/> equal to the directions given, in the same order.</param>
            <param name="bitmask">The layermask(s) to use.</param>
            <param name="closestIndex">The index of the raycast that hit closest to the center. Returns -1 if none hit.</param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.MathF">
            <summary>
            Contains all methods Math related.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
              <para>Moves a point current towards target.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MoveTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Moves a point current towards target.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MoveTowards(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
            <summary>
              <para>Moves a point current towards target.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Magnitude(UnityEngine.Vector2)">
            <summary>
            Returns the magnitude of a vector. (Square root of it's dot product)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Sqrt(System.Single)">
            <summary>
            Returns the square root of f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Magnitude(UnityEngine.Vector3)">
            <summary>
            Returns the magnitude of a vector. (Square root of it's dot product)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Magnitude(UnityEngine.Vector4)">
            <summary>
            Returns the magnitude of a vector. (Square root of it's dot product)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.DirectionTowards(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns direction which would make Position look at Destination.
            </summary>
            <param name="Position"></param>
            <param name="Destination"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Average(UnityEngine.Vector3[])">
            <summary>
            Returns the total of vectors divided by Length of array given.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.MathF.AllDirections">
            <summary>
            Returns in order: Vector3.back, Vector3.down, Vector3.forward, Vector3.left, Vector3.one, Vector3.right, Vector3.up
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.MathF.AllDirections2D">
            <summary>
            Returns in order: Vector2.right, Vector2.one, Vector2.up, new Vector2(-1f, 1f), Vector2.left, -Vector2.one, Vector2.down, new Vector2(1f, -1f)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.MathF.DiagonalDirections2D">
            <summary>
            Returns in order: Vector2.one, new Vector2(-1f, 1f), -Vector2.one, new Vector2(1f, -1f)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.MathF.MainDirections2D">
            <summary>
            Returns in order: Vector2.right, Vector2.up, Vector2.left, Vector2.down
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.MathF.HorizontalSides2D">
            <summary>
            Returns in order: Vector2.left, Vector2.right
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.MathF.VerticalSides2D">
            <summary>
            Returns in order: Vector2.up, Vector2.down
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAnchoredPosition(UnityEngine.RectTransform)">
            <summary>
            Returns the Anchored position of a RectTransform in Vector4,
            where x = anchorMin.x, y = anchorMin.y, z = anchorMax.x, w = anchorMax.y.
            </summary>
            <param name="rt"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector4)">
            <summary>
            Sets the anchored position of an RectTransform with it's offset set to 0.
            Vector4 use: x = anchorMin.x, y = anchorMin.y, z = anchorMax.x, w = anchorMax.y.
            </summary>
            <param name="rt"></param>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Sets the anchored position of an RectTransform with it's offset set to 0.
            </summary>
            <param name="rt"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAnchoredUI(UnityEngine.RectTransform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the anchored position of an RectTransform with it's offset set to 0.
            </summary>
            <param name="rt"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAllAnchoredUIFitHorizontal(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform})">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.y = 0 and anchorMax.y = 1.
            </summary>
            <param name="rts"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAllAnchoredUIFitHorizontal(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform},System.Single)">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.y = 0 and anchorMax.y = 1, with x values being limited from 0 to maxSize01.
            </summary>
            <param name="rts"></param>
            <param name="maxSize01"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAllAnchoredUIFitVertical(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform})">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.x = 0 and anchorMax.x = 1.
            </summary>
            <param name="rts"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.SetAllAnchoredUIFitVertical(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform},System.Single)">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.y = 0 and anchorMax.y = 1, with x values being limited from 0 to maxSize01.
            </summary>
            <param name="rts"></param>
            <param name="maxSize01"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAspectRatio">
            <summary>
            Gets the aspect ratio of the game in Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAspectRatio(UnityEngine.Resolution)">
            <summary>
            Gets the aspect ratio of a given Resolution.
            </summary>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.RotatePointAroundPivot(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Rotates point around pivot based on angle (Euler).
            </summary>
            <param name="point"></param>
            <param name="pivot"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.RotatePointAroundPivot(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Rotates point around pivot based on angle (Quaternion).
            </summary>
            <param name="point"></param>
            <param name="pivot"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.HighestValue(UnityEngine.Vector2)">
            <summary>
            Returns a Vector2 that has the highest axis value kept, and the lowest set to 0.
            </summary>
            <param name="evaluator"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToInt(UnityEngine.Vector3)">
            <summary>
            Converts a Vector3 to a Vector3Int.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToIntNormal(UnityEngine.Vector3)">
            <summary>
            Convert all values of a given Vector3 into Int32 values without turning it into a <see cref="T:UnityEngine.Vector3Int"/>.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToIntNormal(UnityEngine.Vector3,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Convert all values of a given Vector3 into Int32 values without turning it into a <see cref="T:UnityEngine.Vector3Int"/>, and ignores the corresponding values for conversion.
            </summary>
            <param name="vector"></param>
            <param name="ignoreX"></param>
            <param name="ignoreY"></param>
            <param name="ignoreZ"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Snap(UnityEngine.Vector3,System.Single)">
            <summary>
            Snaps a vector to given factor. Useful to make grid-like behaviour.
            </summary>
            <param name="vector"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Snap(UnityEngine.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Snaps a vector to given factor, while ignoring all corresponding Ignore values.
            </summary>
            <param name="vector"></param>
            <param name="factor"></param>
            <param name="IgnoreX"></param>
            <param name="IgnoreY"></param>
            <param name="IgnoreZ"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.EulerRotateTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Quaternion.RotateTowards(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.LowestValue(UnityEngine.Vector2)">
            <summary>
            Returns a Vector2 that has the lowest axis value kept, and the highest set to 0.
            </summary>
            <param name="evaluator"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.DistanceBetween(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Vector3.Distance(UnityEngine.Vector3,UnityEngine.Vector3)"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.DistanceBetween(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Vector2.Distance(UnityEngine.Vector2,UnityEngine.Vector2)"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.DistanceBetween(UnityEngine.Vector2,UnityEngine.Vector2,WarWolfWorks.Utility.Axis)">
            <summary>
            Returns the distance of an axis between two Vector2 values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="axisChoice"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector4)">
            <summary>
            Returns true if position is wihin bounds. (bounds are: x and y as min, z and w as max (z is max X and w is max Y))
            </summary>
            <param name="position"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsInsideBoundsOld(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns true if position is within size from center. 
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsInsideBounds(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns true if position is within size from center. 
            </summary>
            <param name="position"></param>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsInsideBounds(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns true if the position is within the radius of center.
            </summary>
            <param name="position"></param>
            <param name="center"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns true if position is wihin min and max.
            </summary>
            <param name="position"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Vector3D(UnityEngine.Vector3)">
            <summary>
            Returns a Vector2 which has it's Y value set to the given Vector3 Z value.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MoveTowardsAccelerated(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Returns a Vector3 which moves a towards b based on speed. Accelerates based on the distance between both positions.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="speed"></param>
            <param name="acceleration"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MoveTowardsAccelerated(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="M:UnityEngine.Vector3.MoveTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)"/> which accelerates when A and B are far away.
            </summary>
            <param name="a">The current position.</param>
            <param name="b">The desired position.</param>
            <param name="speed">Speed at which a moves towards b.</param>
            <param name="acceleration">How heavy the acceleration is.</param>
            <param name="accelerationMinDist">Acceleration is applied only when the distance between a and b is greater than this value.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(UnityEngine.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)"/> for Vector3s.
            </summary>
            <param name="toClamp"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)"/> for Vector3s.
            </summary>
            <param name="toClamp"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
            <param name="minZ"></param>
            <param name="maxZ"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)"/> for Vector3s.
            </summary>
            <param name="toClamp"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Reformalize(UnityEngine.Vector3)">
            <summary>
            Sets NaN, null or Infinite values of the given Vector to 0.
            </summary>
            <param name="toReform"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsApproximate(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns true if PositionToApproximate is within approximation of PositionToCompare.
            </summary>
            <param name="PositionToApproximate"></param>
            <param name="PositionToCompare"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MiddleMan(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a position between a and b, based on percent (0-1).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.VectorIntConverter(UnityEngine.Vector2)">
            <summary>
            Converts Vector2 to Vector2Int,
            </summary>
            <param name="vectorToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetClosestToPoint``1(UnityEngine.Vector3,System.Single,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the closest element to the given point from a given collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="point"></param>
            <param name="maxDistance"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetClosestToPoint(UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the closest gameobject to the given point within a maximum distance.
            </summary>
            <param name="point"></param>
            <param name="maxDistance"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetClosestToPoint(UnityEngine.Vector3,System.Single,UnityEngine.GameObject[])">
            <summary>
            Gets the closest gameobject to the given point within a maximum distance.
            </summary>
            <param name="point"></param>
            <param name="maxDistance"></param>
            <param name="excluded">Any gameobject in this list will be skipped.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAllWithinDistance(UnityEngine.Vector3,System.Single,System.String)">
            <summary>
            Gets all GameObjects within radius based on their tags. (SLOW, uses GameObject.FindGameObjectsWithTag, avoid using in Update functions)
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="tagUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAllWithinDistance(UnityEngine.Vector3,System.Single,System.String[])">
            <summary>
            Gets all GameObjects within radius based on their tags. (SLOW, uses GameObject.FindGameObjectsWithTag, avoid using in Update functions)
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="tagsUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.AverageValue(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns x + y + z / 3 if includeZValue is true, otherwise returns x + y / 2.
            </summary>
            <param name="vector3"></param>
            <param name="includeZValue"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetClosestToPosition``1(UnityEngine.Vector3,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets all components who's .transform.position is the closest to center, based on amount requested.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="from"></param>
            <param name="amount"></param>
            <exception cref="T:WarWolfWorks.Security.WWWException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetFurthestFromPosition``1(UnityEngine.Vector3,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Return all components who's .transform.position is the furthest from center.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="from"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAllWithinDistance``1(UnityEngine.Vector3,System.Single,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all components who's .transform.position is within center by radius.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="used"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.GetAllWithinRange``1(UnityEngine.Vector3,WarWolfWorks.Utility.FloatRange,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all components who's .transform.position is within center by range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="range"></param>
            <param name="used"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Euler(UnityEngine.Vector3)">
            <summary>
            Returns a quaternion from a euler rotation.
            </summary>
            <param name="euler">The rotation in Vector3 space.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.YPRRotation(System.Single,System.Single,System.Single,UnityEngine.Quaternion@)">
            <summary>
            Returns a quaternion based on yaw, pitch and roll.
            </summary>
            <param name="yaw">The yaw, equivalent to the X axis in euler.</param>
            <param name="pitch">The pitch, equivalent to the Y axis in euler.</param>
            <param name="roll">The roll, equivalent to the Z axis in euler.</param>
            <param name="result">Returned quaternion.</param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Get2DRotationsAroundPoint(System.Single,System.Int32,System.Single)">
            <summary>
            Returns a list of rotations based around the amount given; amount 2 would return 0 and 180, 3 would return 0, 120 and 240, 4 would return 0, 80, 160 and 240, etc...
            </summary>
            <param name="offset"></param>
            <param name="amount"></param>
            <param name="maxRotation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.CopySign(System.Double,System.Double)">
            <summary>
            Returns a value with the magnitude of x and the sign of y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.CopySign(System.Single,System.Single)">
            <summary>
            Returns a value with the magnitude of x and the sign of y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.CopySign(System.Int32,System.Int32)">
            <summary>
            Returns a value with the magnitude of x and the sign of y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves the value current towards target.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.DeminishingReturnHalfCurve(System.Single,System.Single)">
            <summary>
            Returns: value / maxValue * (maxValue - value)
            </summary>
            <param name="value"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Hyperbolic(System.Single,System.Single)">
            <summary>
            Returns a value that scales hyperbolically.
            </summary>
            <param name="max">The max amount reachable.</param>
            <param name="amount">This can be used for scaling stats, say max is 100, and a stat increases by 20 for each stack;
            the value passed in amount would be: 20 * stacks.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Hyperbolic(System.Double,System.Double)">
            <summary>
            Returns a value that scales hyperbolically.
            </summary>
            <param name="max">The max amount reachable.</param>
            <param name="amount">This can be used for scaling stats, say max is 100, and a stat increases by 20 for each stack;
            the value passed in amount would be: 20 * stacks.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.HyperbolicP(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value that scales hyperbolically, to the power of P.
            </summary>
            <param name="max">The max amount reachable.</param>
            <param name="amount">This can be used for scaling stats, say max is 100, and a stat increases by 20 for each stack;
            the value passed in amount would be: 20 * stacks.</param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.HyperbolicP(System.Double,System.Double,System.Double)">
            <summary>
            Returns a value that scales hyperbolically, to the power of P.
            </summary>
            <param name="max">The max amount reachable.</param>
            <param name="amount">This can be used for scaling stats, say max is 100, and a stat increases by 20 for each stack;
            the value passed in amount would be: 20 * stacks.</param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the given value between min (inclusive) and max (inclusive).
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the given value between min (inclusive) and max (inclusive).
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the given value between min (inclusive) and max (inclusive).
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ClampAngle(System.Single,System.Single,System.Single)">
            <summary>
            Attempts to clamp a euler rotation value.
            </summary>
            <param name="angle"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ClampAngle(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Attempts to clamp a euler rotation value.
            </summary>
            <param name="angle"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Truncate(System.Single,System.Int32)">
            <summary>
            Cuts a float to digits length.
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.RoundValue(System.Single,System.Boolean)">
            <summary>
            Rounds a float value.
            </summary>
            <param name="value"></param>
            <param name="favorLower"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Repeat(System.Single,System.Single)">
            <summary>
            Loops a value so it never goes below 0, and never above length.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Repeat(System.Int32,System.Int32)">
            <summary>
            Loops a value so it never goes below 0, and never above length.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.PingPong(System.Single,System.Single)">
            <summary>
            Returns a value that will increment and decrement between 0 and length.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.PingPong(System.Int32,System.Int32)">
            <summary>
            Returns a value that will increment and decrement between 0 and length.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToPositive(System.Int32)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToNegative(System.Int32)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToPositive(System.Single)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToNegative(System.Single)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToPositive(System.Int64)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.ToNegative(System.Int64)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Clamps the given value between range.Min and range.Max.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.Clamp(System.Int32,WarWolfWorks.Utility.IntRange)">
            <summary>
            Clamps the given value between range.Min and range.Max.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsFormal(System.Single)">
            <summary>
            Returns true if a float is NaN, Infinity or Negative Infinity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsApproximate(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if numberToApproximate is not lower than or higer than numberToCompare using approximation as range.
            </summary>
            <param name="NumberToApproximate"></param>
            <param name="NumberToCompare"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.MiddleMan(System.Single,System.Single,System.Single)">
            <summary>
            Returns a mid-point between two values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsWithinRange(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Returns true if the value given is not higher than range.Max nor lower than range.Min.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.MathF.IsWithinRange(System.Int32,WarWolfWorks.Utility.IntRange)">
            <summary>
            Returns true if the value given is not higher than range.Max nor lower than range.Min.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Fun">
            <summary>
            Methods used for fun; They provide no actual utility.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Fun.MeterToBaldEaglePerObeseChild(System.Single)">
            <summary>
            Returns a metric value into Bald eagle per obese child.
            </summary>
            <param name="meters"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Fun.Freeze">
            <summary>
            Freezes the program by creating an infinite for loop.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Fun.EncryptWithRandomKey(System.String@)">
            <summary>
            Encrypts a local string value with a completely random encryption key.
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Fun.CauseStackOverflow(System.Boolean)">
            <summary>
            Causes a stack overflow.
            </summary>
            <param name="cause">Only causes a stack overflow if true.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Fun.UnityGameStressTest(System.Single,UnityEngine.MonoBehaviour)">
            <summary>
            Overloads the first active Unity scene with random objects, 
            changes the position of original ones, might delete their components, or them.
            If extremity is over 50, it additionally causes a stack overflow per GameObject created...
            Because science!
            </summary>
            <param name="extremity">How "Intense" should the stress test be. 0 is nothing, 100 is massacre.</param>
            <param name="handler"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Fun.GetRandomComponent">
            <summary>
            Gets a random Unity component type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Rendering">
            <summary>
            Rendering, view and matrices.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.GetMask(System.Int32[])">
            <summary>
            Returns LayerMask int value of all layers. Useful for Raycasting.
            </summary>
            <param name="layers"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.LayerNameToIndex(System.String)">
            <summary>
            Converts given maskname into it's layer number.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.MaskToLayer(System.Int32)">
            <summary> 
            Converts given bitmask to it's layer number. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.IsVisibleFrom(UnityEngine.Renderer,UnityEngine.Camera)">
            <summary>
            Returns true if a renderer is visible from a Camera's view.
            </summary>
            <param name="renderer"></param>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.GetVisibleCorners(UnityEngine.RectTransform)">
            <summary>
            Returns how many anchored positions are between 0 and 1.
            </summary>
            <returns></returns>
            <param name="rect"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.IsFullyVisible(UnityEngine.RectTransform)">
            <summary>
            Returns true if the given <see cref="T:UnityEngine.RectTransform"/> is fully visible in anchored position bounds.
            </summary>
            <returns></returns>
            <param name="rectTransform"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.IsVisible(UnityEngine.RectTransform)">
            <summary>
            Determines if this <see cref="T:UnityEngine.RectTransform"/> is visible to the camera.
            </summary>
            <returns></returns>
            <param name="rectTransform"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.LayerIdsToNames(System.Int32[])">
            <summary>
            Retuns an array of layer names based on ids given.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Text">
            <summary>
            Contains all Regex, string and StringBuilder utilities.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Text.Is_InterfaceFile_Name">
            <summary>
            A regex expression used to match a given string as an acceptable interface name. (Used for files, as .cs is also counted as true)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Text.Is_Interface_Name">
            <summary>
            A regex expression used to see if a given string is an acceptable interface name. (Used for full names only, .cs and other extensions is counted as invalid)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.GetRichColoredText(System.String,UnityEngine.Color)">
            <summary>
            Returns a string which is wrapped in rich-text to make it colored.
            </summary>
            <param name="original"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.ToRainbow(System.String,System.Int32,UnityEngine.Color[])">
            <summary>
            Puts a string value into a rainbow color using Unity's Rich Text format.
            </summary>
            <param name="original"></param>
            <param name="frequency"></param>
            <param name="colorsToUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.ToRainbow(System.String,System.Int32,UnityEngine.Color[],System.Int32)">
            <summary>
            Puts a string value into a rainbow color using Unity's Rich Text format.
            </summary>
            <param name="original"></param>
            <param name="frequency"></param>
            <param name="colorsToUse"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.LevenshteinDistance(System.String,System.String)">
            <summary>
            Finds the distance between two string in similarity.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.GetConsoleHexColor(WarWolfWorks.Debugging.MessageType)">
            <summary>
            Returns the hex string for the color used by the console.
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.StringWrapper(System.String,System.Char,System.Char)">
            <summary>
            Wraps original between startWrapper and endWrapper.
            </summary>
            <param name="original"></param>
            <param name="startWrapper"></param>
            <param name="endWrapper"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.StringWrapper(System.String,System.String,System.String)">
            <summary>
            Wraps original between startWrapper and endWrapper.
            </summary>
            <param name="original"></param>
            <param name="startWrapper"></param>
            <param name="endWrapper"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.String,System.String)">
            <summary>
            Cuts out a string between from and to.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsKanji(System.String)">
            <summary>
            Returns true if the given string contains a Kanji character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsHiragana(System.String)">
            <summary>
            Returns true if the given string contains a Hiragana character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsKatakana(System.String)">
            <summary>
            Returns true if the given string contains a Katakana character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsJapanese(System.String)">
            <summary>
            Returns true if the given string contains either a Kanji, Hiragana or Katakana character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.Char,System.Char)">
            <summary>
            Cuts out a string between from and to in char values.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.HooksMethods">
            <summary>
            Returns MethodInfo of all public methods inside <see cref="T:WarWolfWorks.Utility.Hooks"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.FullMethods">
            <summary>
            Returns <see cref="T:System.Reflection.MethodInfo"/> of all public methods inside <see cref="T:WarWolfWorks.Utility.Hooks"/> and all of it's nested classes.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ParseType(System.String)">
            <summary>
            Tries to parse a type with <see cref="M:System.Type.GetType(System.String)"/>; 
            if it fails, it then tries to itterate through every Assembly inside <see cref="P:System.AppDomain.CurrentDomain"/> to parse the given typeName.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ParseTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Itterates through each string, and uses <see cref="M:WarWolfWorks.Utility.Hooks.ParseType(System.String)"/>.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Implements(System.Type,System.Type)">
            <summary>
            Returns true if type is implementing implementation.
            </summary>
            <param name="type"></param>
            <param name="implementation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ImplementsGeneric(System.Type,System.Type)">
            <summary>
            Returns true if type has a generic implementation.
            </summary>
            <param name="type"></param>
            <param name="genericImplementation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ParseNullable``1(System.String)">
            <summary>
            Tries to parse an Enum, if not successful, it returns null instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Parse``1(System.String)">
            <summary>
            Equivalent to <see cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)"/>, with the painful parts taken care of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetKeyStroke(System.Int32)">
            <summary>
            Returns the first keycode pressed in the same frame as <see cref="M:WarWolfWorks.Utility.Hooks.GetKeyStroke(System.Int32)"/> was called in.
            </summary>
            <param name="type">0 = <see cref="M:UnityEngine.Input.GetKey(UnityEngine.KeyCode)"/>; 1 = <see cref="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)"/>; 2 = <see cref="M:UnityEngine.Input.GetKeyUp(UnityEngine.KeyCode)"/></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsOnMainThread">
            <summary>
            Checks if the current thread is the main thread.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToSingle(System.String)">
            <summary>
            Equivalent to <see cref="M:System.Single.Parse(System.String,System.IFormatProvider)"/> where <see cref="T:System.IFormatProvider"/>
            is <see cref="T:System.Globalization.CultureInfo"/>.InvariantCulture.NumberFormat.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.OverflowException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.DestroyObject``1(``0)">
            <summary>
            Destroys a Unity Object using Object.Destroy().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDestroy"></param>
            <exception cref="T:UnityEngine.UnityException"/>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.AddEventTriggerListener(UnityEngine.EventSystems.EventTrigger,UnityEngine.EventSystems.EventTriggerType,System.Action{UnityEngine.EventSystems.BaseEventData})">
            <summary>
            Adds an event to a given trigger.
            </summary>
            <param name="trigger"></param>
            <param name="eventType"></param>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:UnityEngine.UnityException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetParent(UnityEngine.Collider2D)">
            <summary>
            Returns the parent of the collider. If collider is already the parent, it returns the collider's GameObject instead.
            </summary>
            <param name="collider"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetAllChildren(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Populates a list with all children of a parent.
            </summary>
            <param name="parent"></param>
            <param name="list"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetAllChildren(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.GameObject}@)">
            <summary>
            Populates a list with all children of a parent.
            </summary>
            <param name="parent"></param>
            <param name="list"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetChildren(UnityEngine.Transform,System.Predicate{UnityEngine.Transform})">
            <summary>
            Gets all children of a parent who match a specified condition.
            </summary>
            <param name="parent"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetChildren(UnityEngine.Transform,System.Predicate{UnityEngine.GameObject})">
            <summary>
            Gets all children of a parent who match a specified condition.
            </summary>
            <param name="parent"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetOldestParent(UnityEngine.Transform)">
            <summary>
            Gets the oldest parent inside the hierarchy.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.TrueParent(UnityEngine.GameObject)">
            <summary>
            Returns the oldest parent in the hierarchy of the given object.
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetWindowText(System.IntPtr,System.String)">
            <summary>
            Sets the text/title of an application widow. Argument hwnd is a window, 
            which can be found using <see cref="M:WarWolfWorks.Utility.Hooks.FindWindow(System.String,System.String)"/> or
            <see cref="M:WarWolfWorks.Utility.Hooks.GetActiveWindow"/>.
            </summary>
            <param name="hwnd"></param>
            <param name="lp"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.FindWindow(System.String,System.String)">
            <summary>
            Returns all info on a window using <see cref="T:System.IntPtr"/>; See https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowa
            for more info.
            </summary>
            <param name="className"></param>
            <param name="windowName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetActiveWindow">
            <summary>
            Returns the currently active window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetWindowText(System.String)">
            <summary>
            Sets the application's title to a given string.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ObjectParent(UnityEngine.GameObject)">
            <summary>
            Returns the parent gameobject of the given <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="Gobj"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetSpriteFromSpriteSheet(System.String,System.String)">
            <summary>
            Returns a sprite from a Unity multisprite spritesheet; 
            SpriteSheetName is the name of the file, spriteName is the name of the sprite itself. 
            (sprite file MUST be in a resources folder)
            </summary>
            <param name="SpriteSheetName"></param>
            <param name="spriteName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Returns true if type is subclass of baseType.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ConvertEnum``1(System.Int32)">
            <summary>
            Converts a given int value into an Enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.IntRange">
            <summary>
            Range struct for Clamping/Range utility in <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.IntRange.Min">
            <summary>
            The minimal value of this <see cref="T:WarWolfWorks.Utility.IntRange"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.IntRange.Max">
            <summary>
            The maximal value of this <see cref="T:WarWolfWorks.Utility.IntRange"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.GetClampedValue(System.Int32)">
            <summary>
            Returns the value given clamped between <see cref="F:WarWolfWorks.Utility.IntRange.Min"/> (inclusive) and <see cref="F:WarWolfWorks.Utility.IntRange.Max"/> (exclusive).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.IsWithinRange(System.Int32)">
            <summary>
            Returns true if the given value is within <see cref="F:WarWolfWorks.Utility.IntRange.Min"/> (inclusive) and <see cref="F:WarWolfWorks.Utility.IntRange.Max"/> (exclusive).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.GetRandom">
            <summary>
            Returns a random value between <see cref="F:WarWolfWorks.Utility.IntRange.Min"/> (inclusive) and <see cref="F:WarWolfWorks.Utility.IntRange.Max"/> (exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.GetTupleRange">
            <summary>
            Returns a <see cref="T:System.Tuple`2"/> of <see cref="F:WarWolfWorks.Utility.IntRange.Min"/> and <see cref="F:WarWolfWorks.Utility.IntRange.Max"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.Equals(WarWolfWorks.Utility.IntRange)">
            <summary>
            Returns true if Min and Max are of the exact same value for both IntRanges.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.IntRange"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.IntRange"/> with <see cref="F:WarWolfWorks.Utility.IntRange.Min"/> and <see cref="F:WarWolfWorks.Utility.IntRange.Max"/> set to the same value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Langroup">
            <summary>
            Used by <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Langroup.Value">
            <summary>
            Value of this group in string.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Langroup.Language">
            <summary>
            What language is this value used for.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Langroup.#ctor(System.String,UnityEngine.SystemLanguage)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.Langroup"/> instance.
            </summary>
            <param name="value"></param>
            <param name="language"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Langroup.op_Implicit(System.ValueTuple{System.String,UnityEngine.SystemLanguage})~WarWolfWorks.Utility.Langroup">
            <summary>
            Implicitly converts a tuple into a Langroup.
            </summary>
            <param name="tuple"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.LanguageString">
            <summary>
            Struct which returns a string based on language given; If used directly, it will use <see cref="P:UnityEngine.Application.systemLanguage"/> to determine the language.
            To use with a specified language, use an indexer.
            (Example: ItemName = LanguageItemName[<see cref="F:UnityEngine.SystemLanguage.Polish"/>])
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LanguageString.English">
            <summary>
            Returned by default.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LanguageString.Values">
            <summary>
            All values contained by this <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.#ctor(System.String,System.ValueTuple{System.String,UnityEngine.SystemLanguage}[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
            <param name="english"></param>
            <param name="other"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.#ctor(System.String,WarWolfWorks.Utility.Langroup[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
            <param name="english"></param>
            <param name="other"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.LanguageString.Item(UnityEngine.SystemLanguage)">
            <summary>
            Returns a string associated with this language; If not found, will return <see cref="F:WarWolfWorks.Utility.LanguageString.English"/> as default.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.ToString">
            <summary>
            Returns the text instead of the full type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.ToString(UnityEngine.SystemLanguage)">
            <summary>
            Returns text based on language given. This is simply a pointer to <see cref="T:WarWolfWorks.Utility.LanguageString"/>'s indexer.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.op_Implicit(WarWolfWorks.Utility.LanguageString)~System.String">
            <summary>
            Pointer to <see cref="T:WarWolfWorks.Utility.LanguageString"/>[<see cref="P:WarWolfWorks.Internal.Settings.LibraryLanguage"/>].
            </summary>
            <param name="languageString"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.LevelFloat">
            <summary>
            A float value which changes based on it's level.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.LevelFloat.LevelValue">
            <summary>
            Used with <see cref="T:WarWolfWorks.Utility.LevelFloat"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.LevelValue.Value">
            <summary>
            Value of this <see cref="T:WarWolfWorks.Utility.LevelFloat.LevelValue"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.LevelValue.Level">
            <summary>
            Level at which <see cref="F:WarWolfWorks.Utility.LevelFloat.LevelValue.Value"/> will be used.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.LevelValue.#ctor(System.Single,System.Int32)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.LevelFloat.LevelValue"/>.
            </summary>
            <param name="value"></param>
            <param name="level"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.LevelFloat.Value">
            <summary>
            Returns the final value of this <see cref="T:WarWolfWorks.Utility.LevelFloat"/> based on it's <see cref="F:WarWolfWorks.Utility.LevelFloat.Level"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.DefaultValue">
            <summary>
            Value which is used when the current level is 0 or when an exception occurs.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.Level">
            <summary>
            The current level of the <see cref="T:WarWolfWorks.Utility.LevelFloat"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.Values">
            <summary>
            All level values used for this <see cref="T:WarWolfWorks.Utility.LevelFloat"/> to return it's <see cref="P:WarWolfWorks.Utility.LevelFloat.Value"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.Clone">
            <summary>
            Clones this LevelFloat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.CompareTo(System.Single)">
            <summary>
             Implement the generic CompareTo method with <see cref="T:System.Single"/> as argument.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.CompareTo(WarWolfWorks.Utility.LevelFloat)">
            <summary>
            Implement the generic CompareTo method with <see cref="T:WarWolfWorks.Utility.LevelFloat"/> as argument.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.Equals(System.Single)">
            <summary>
            Returns true if this <see cref="T:WarWolfWorks.Utility.LevelFloat"/>'s current value equals other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.#ctor(System.Single,System.Int32,WarWolfWorks.Utility.LevelFloat.LevelValue[])">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.LevelFloat"/>.
            </summary>
            <param name="defaultValue"></param>
            <param name="level"></param>
            <param name="values"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.#ctor(System.Single,System.Int32,System.Collections.Generic.IEnumerable{WarWolfWorks.Utility.LevelFloat.LevelValue})">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.LevelFloat"/> using a collection.
            </summary>
            <param name="defaultValue"></param>
            <param name="level"></param>
            <param name="collection"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.op_Implicit(WarWolfWorks.Utility.LevelFloat)~System.Single">
            <summary>
            Implicitly returns <see cref="P:WarWolfWorks.Utility.LevelFloat.Value"/>.
            </summary>
            <param name="lf"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.MonoDestroyer">
            <summary>
            A monobehaviour class which has a public action called when it is destroyed.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.MonoDestroyer.OnDestroyed">
            <summary>
            Called in OnDestroy.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.MonoRotation">
            <summary>
            Utility component for rotation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.GetDestination">
            <summary>
            Rotation towards which this <see cref="T:WarWolfWorks.Utility.MonoRotation"/> is destinated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.CurrentRotation">
            <summary>
            The Currently applied rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.DefaultEulerRotation">
            <summary>
            The Euler Rotation that's used as the default rotation.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.MonoRotation.s_BaseRotationSpeed">
            <summary>
            Determines the base rotation speed of this <see cref="T:WarWolfWorks.Utility.MonoRotation"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.BaseRotationSpeed">
            <summary>
            Pointer to <see cref="F:WarWolfWorks.Utility.MonoRotation.s_BaseRotationSpeed"/>, overridable.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.RotationSpeed">
            <summary>
            The absolute RotationSpeed used by this <see cref="T:WarWolfWorks.Utility.MonoRotation"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.MonoRotation.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.MonoRotation.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.ToRotateX">
            <summary>
            <see cref="T:UnityEngine.Transform"/> which will be used for the X rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.ToRotateY">
            <summary>
            <see cref="T:UnityEngine.Transform"/> which will be used for the Y rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoRotation.ToRotateZ">
            <summary>
            <see cref="T:UnityEngine.Transform"/> which will be used for the Z rotation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.Update">
            <summary>
            Used by the <see cref="T:WarWolfWorks.Utility.MonoRotation"/> to apply it's transform.rotation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.TryGetRotator(UnityEngine.Transform@,WarWolfWorks.Utility.Axis)">
            <summary>
            Gets the rotated transform of the specified axis. Returns false if null. (Doesn't support Axis Flags)
            </summary>
            <param name="rotator"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.SetRotator(UnityEngine.Transform,WarWolfWorks.Utility.Axis)">
            <summary>
            Sets the rotated transform of the specified Axis. (Can be set to null; Supports Axis Flags)
            </summary>
            <param name="to"></param>
            <param name="of"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.SetRotation(UnityEngine.Quaternion)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Utility.MonoRotation"/>.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.MonoRotation.SetRotation(UnityEngine.Vector3)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Utility.MonoRotation"/> in euler angles.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.MonoSingleton`1">
            <summary>
            Inherit from this class with generic type T being the name of your class to make a class that implements a Singleton pattern.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WarWolfWorks.Utility.MonoSingleton`1.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.PositionLimiter">
            <summary>
            Limits a transform's position to specified positions or transforms.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.Is2D">
            <summary>
            Does the limiter only work on 2D axis?
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.PositionLimiter.LimitationType">
            <summary>
            How the <see cref="T:WarWolfWorks.Utility.PositionLimiter"/> limits it's position.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitationType.Disabled">
            <summary>Does not limit the position of the transform in any way.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitationType.StaticLimitX">
            <summary>Limits the position based on <see cref="F:WarWolfWorks.Utility.PositionLimiter.LimitBoundsX"/>.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitationType.StaticLimitY">
            <summary>Limits the position based on <see cref="F:WarWolfWorks.Utility.PositionLimiter.LimitBoundsY"/>.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitationType.StaticLimitZ">
            <summary>Limits the position based on <see cref="F:WarWolfWorks.Utility.PositionLimiter.LimitBoundsZ"/>.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitationType.DynamicLimit">
            <summary>Limits the position based on <see cref="F:WarWolfWorks.Utility.PositionLimiter.Limiters"/>.</summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitType">
            <summary>
            The currently applied limitation type.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.Limiters">
            <summary>
            All limiters used when <see cref="T:WarWolfWorks.Utility.PositionLimiter.LimitationType"/> is set to <see cref="F:WarWolfWorks.Utility.PositionLimiter.LimitationType.DynamicLimit"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitBoundsX">
            <summary>
            Limit applied to the respectice coordinate.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitBoundsY">
            <summary>
            Limit applied to the respectice coordinate.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.PositionLimiter.LimitBoundsZ">
            <summary>
            Limit applied to the respectice coordinate.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.PositionLimiter.LimitedPosition">
            <summary>
            Override this Vector3 to set a specific position to move; points to transform.position by default.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.PositionLimiter.GetFinalPosition(WarWolfWorks.Utility.PositionLimiter.LimitationType)">
            <summary>
            Gets the position hypothetically applied based on given limitations.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.PositionLimiter.LateUpdate">
            <summary>
            Applies <see cref="M:WarWolfWorks.Utility.PositionLimiter.GetFinalPosition(WarWolfWorks.Utility.PositionLimiter.LimitationType)"/> to <see cref="P:WarWolfWorks.Utility.PositionLimiter.LimitedPosition"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Singleton`1">
            <summary>
            A class which represents a singleton pattern.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WarWolfWorks.Utility.Singleton`1.#ctor">
            <summary>
            Creates the singleton.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Singleton`1.Instance">
            <summary>
            The singleton instance of the object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Singleton`1.Dispose">
            <summary>
            Disposes of the static T Instance.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Singleton`1.Finalize">
            <summary>
            Calls it's <see cref="M:WarWolfWorks.Utility.Singleton`1.Dispose"/> method.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.StackList`1">
            <summary>
            A stack which can use utility methods from other IEnumerables like Remove or Find.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.#ctor">
            <summary>
            Creates an empty <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.#ctor(System.Int32)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.StackList`1"/> with the default capacity specified.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.StackList`1"/> that contains elements from a given collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.ToArray">
            <summary>
            Returns all elements inside the stack as an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Utility.StackList`1.Count">
            <summary>
            Returns the number of elements contained inside the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.StackList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Push(`0)">
            <summary>
            Adds an element to the top of the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.PushRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of elements at the top of the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Pop">
            <summary>
            Removes and returns the element from the top of the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.PopRange(System.Int32)">
            <summary>
            Returns and removes a range of elements from the top of the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Peek">
            <summary>
            Returns the element at the top of the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Lift">
            <summary>
            Returns the element at the bottom of the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Remove(System.Predicate{`0})">
            <summary>
            Removes the first element that matches the specified predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Remove(`0)">
            <summary>
            Removes the given element from the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Find(System.Predicate{`0})">
            <summary>
            Finds and returns the first item that matches the specified predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds and returns all elements inside the <see cref="T:WarWolfWorks.Utility.StackList`1"/> that match the given predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Returns true if the given predicate matches all elements.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Clear">
            <summary>
            Removes all elements from this <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the first occurance of the given element.
            </summary>
            <param name="item">Element to look for.</param>
            <returns>Zero-based index of the first occurance of the element in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.IndexOf(`0,System.Int32)">
            <summary>
            Returns the zero-based index of the first occurance of the given element within the range of the list that
            extends from the given index up until the last elements.
            </summary>
            <param name="item">Element to look for.</param>
            <param name="index">Start index of the search.</param>
            <returns>Zero-based index of the first occurance of the element in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the zero-based index of the first occurance of the given element within the range of the list that
            extends from the given index for the specified amount.
            </summary>
            <param name="item">Element to look for.</param>
            <param name="index">Start index of the search.</param>
            <param name="count">Amount of elements to search.</param>
            <returns>Zero-based index of the first occurance of the element in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.LastIndexOf(`0)">
            <summary>
            Returns the zero-based index of the last occurance of the given element.
            </summary>
            <param name="item">Element to look for.</param>
            <returns>Zero-based index of the last occurance of the element in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Returns the zero-based index of the last occurance of the given element within the range of the list that
            extends from the given index up until the last elements.
            </summary>
            <param name="item">Element to look for.</param>
            <param name="index">Start index of the search.</param>
            <returns>Zero-based index of the last occurance of the element in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the zero-based index of the last occurance of the given element within the range of the list that
            extends from the given index for the specified amount.
            </summary>
            <param name="item">Element to look for.</param>
            <param name="index">Start index of the search.</param>
            <param name="count">Amount of elements to search.</param>
            <returns>Zero-based index of the last occurance of the element in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Returns the index of the first element which matches the given predicate and returns it's zero-based index.
            </summary>
            <param name="match">Predicate to match.</param>
            <returns>Zero-based index of the first element found in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the first element which matches the given predicate and returns it's zero-based index.
            </summary>
            <param name="index">Start index of the search.</param>
            <param name="match">Predicate to match.</param>
            <returns>Zero-based index of the first element found in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the first element which matches the given predicate and returns it's zero-based index.
            </summary>
            <param name="index">Start index of the search.</param>
            <param name="count">Amount of items to search.</param>
            <param name="match">Predicate to match.</param>
            <returns>Zero-based index of the first element found in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Returns the index of the last element which matches the given predicate and returns it's zero-based index.
            </summary>
            <param name="match">Predicate to match.</param>
            <returns>Zero-based index of the last element found in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the last element which matches the given predicate and returns it's zero-based index.
            </summary>
            <param name="index">Start index of the search.</param>
            <param name="match">Predicate to match.</param>
            <returns>Zero-based index of the last element found in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the last element which matches the given predicate and returns it's zero-based index.
            </summary>
            <param name="index">Start index of the search.</param>
            <param name="count">Amount of items to search.</param>
            <param name="match">Predicate to match.</param>
            <returns>Zero-based index of the last element found in the <see cref="T:WarWolfWorks.Utility.StackList`1"/>; Otherwise, -1.</returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.AsReadonly">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> from the elements inside the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts all elements to specified TOutput type,
            and returns a <see cref="T:WarWolfWorks.Utility.StackList`1"/> of the converted items.
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the <see cref="T:WarWolfWorks.Utility.StackList`1"/> to a compatible 
            one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source <see cref="T:WarWolfWorks.Utility.StackList`1"/> at which copying begins.</param>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied 
            from <see cref="T:WarWolfWorks.Utility.StackList`1"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies a range of elements from the <see cref="T:WarWolfWorks.Utility.StackList`1"/> to a compatible 
            one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied 
            from <see cref="T:WarWolfWorks.Utility.StackList`1"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.CopyTo(`0[])">
            <summary>
            Copies a range of elements from the <see cref="T:WarWolfWorks.Utility.StackList`1"/> to a compatible 
            one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied 
            from <see cref="T:WarWolfWorks.Utility.StackList`1"/>. The array must have zero-based indexing.
            </param>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.Equals(System.Collections.Generic.List{`0})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="compared"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.GetEnumerator">
            <summary>
            Returns an enumerator that itterates through the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.StackList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a non-generic enumerator that itterates through the <see cref="T:WarWolfWorks.Utility.StackList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.WWWResources">
            <summary>
            All constant and readonly values of the <see cref="N:WarWolfWorks"/> library.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SV_Path_Preferences">
            <summary>
            Path to personal preferences of this library.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SV_Path_Settings">
            <summary>
            Path to the WWWSettings.cts file.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SV_Path_DefaultKeys">
            <summary>
            Path to DefaultKeys.cts.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SVCN_KEYS">
            <summary>
            Category name for keys.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SV_DEFAULT_SPLIT">
            <summary>
            Default variable split character for saving.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.Expression_NoS">
            <summary>
            Matches any string value that starts with "s_" or "S_".
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.Expression_Hiragana">
            <summary>
            Matches all japanese hiragana text.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.Expression_Katakana">
            <summary>
            Matches all japanese katakana text.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.Expression_Kanji">
            <summary>
            Matches all kanji text.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.Expression_Japanese">
            <summary>
            Matches all japanese text. Note: Does not match if the given text contains kanji characters only;
            For such an expression match, use <see cref="F:WarWolfWorks.WWWResources.Expression_Japanese_Greedy"/>
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.Expression_Japanese_Greedy">
            <summary>
            Matches katakana, hiragana and kanji; Note: Can have ambiguity with Chinese, to avoid such behavior use <see cref="F:WarWolfWorks.WWWResources.Expression_Japanese"/> instead.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SVCN_CORECANVAS">
            <summary>
            Name of the category given to the <see cref="P:WarWolfWorks.Internal.Settings.UtilityCanvas"/> Settings in WWWSettings.ini.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.SVCN_DEBUG">
            <summary>
            Name of the category given to <see cref="T:WarWolfWorks.AdvancedDebug"/> settings in WWWSettings.ini.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.FixedUpdateWaiter">
            <summary>
            An instance of <see cref="T:UnityEngine.WaitForFixedUpdate"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.LateUpdateWaiter">
            <summary>
            An instance of <see cref="T:UnityEngine.WaitForEndOfFrame"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.VN_PROJECTILE_HOLDER">
            <summary>
            Name of the <see cref="T:WarWolfWorks.NyuEntities.ProjectileSystem.NyuProjectile"/> game object.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.VN_PROJECTILE">
            <summary>
            Name of projectile objects in the scene.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.VN_NYUMANAGER">
            <summary>
            Name of the <see cref="T:WarWolfWorks.NyuEntities.NyuManager"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.DEBUG_LAYER_EXCEPTIONS_INDEX">
            <summary>
            Layer at which exceptions are handled.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.DEBUG_LAYER_EXCEPTIONS_NAME">
            <summary>
            Layer at which exceptions are handled.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.DEBUG_LAYER_WWW_INDEX">
            <summary>
            Layer at which WWWLibrary gives simple debug information.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.DEBUG_LAYER_WWW_NAME">
            <summary>
            Layer at which WWWLibrary gives simple debug information.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.UI_SLICK_BACK_TRANSPARENCY">
            <summary>
            The default transparency of slick UI elements.
            </summary>
        </member>
        <member name="F:WarWolfWorks.WWWResources.UI_Slick_Color_Default">
            <summary>
            The default color of slick UI elements.
            </summary>
        </member>
        <member name="M:WarWolfWorks.WWWResources.AdaptSlickAnchors(WarWolfWorks.Enums.SlickBorderFlags,UnityEngine.RectTransform)">
            <summary>
            Used to apply offset to <see cref="T:WarWolfWorks.UI.MenusSystem.SlickMenu.SlickBorder"/> based on given flags.
            </summary>
            <param name="flags"></param>
            <param name="rectTransform"></param>
        </member>
    </members>
</doc>
