<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WarWolfWorks</name>
    </assembly>
    <members>
        <member name="T:WarWolfWorks.CollisionSystem.Collidable">
            <summary>
            Base class for all scripts inside WWW.CollisionSystem.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.Collidable.IsUsable">
            <summary>
            Determines if the class is usable or not, based on if the required conditions are met.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.Collidable.コンディション">
            <summary>
            Condition to be met for Collidable class functions to work.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Collidable.Awake">
            <summary>
            Unity's awake method.
            </summary>
        </member>
        <member name="T:WarWolfWorks.CollisionSystem.ColliderDetector2D">
            <summary>
            Used to detect 2D collisions using collision2D methods.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.ColliderDetector2D.コンディション">
            <summary>
            Returns true if <see cref="P:WarWolfWorks.CollisionSystem.ColliderDetector2D.AttachedCollider"/> and <see cref="P:WarWolfWorks.CollisionSystem.ColliderDetector2D.AttachedRigidbody"/> are not null.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.ColliderDetector2D.AttachedRigidbody">
            <summary>
            Rigidbody attached to this Detector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.ColliderDetector2D.AttachedCollider">
            <summary>
            Collider attached to this Detector. 
            (Gets the first collider in the hierarchy, doesn't have function by itself)
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.ColliderDetector2D.Awake">
            <summary>
            Unity's awake function, used to get rigidbody and base collider.
            </summary>
        </member>
        <member name="T:WarWolfWorks.CollisionSystem.Detector`1">
            <summary>
            Contains collision triggers to be detected.
            </summary>
        </member>
        <member name="T:WarWolfWorks.CollisionSystem.Detector`1.衝突グループ">
            <summary>
            Group used to manage collisions. (しょうとつ)
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.Detector`1.衝突グループ.コリダー">
            <summary>
            Collider of the group.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.Detector`1.衝突グループ.トリガーは">
            <summary>
            If the collider was drawn from an OnTrigger collision.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.衝突グループ.#ctor(`0,System.Boolean)">
            <summary>
            Creates a new CollisionGroup.
            </summary>
            <param name="collider"></param>
            <param name="isTrigger"></param>
        </member>
        <member name="E:WarWolfWorks.CollisionSystem.Detector`1.OnEnter">
            <summary>
            Event is triggered when ColliderDetector detects an Enter collision.
            Collider is the collider which was detected,
            Boolean is if the collision was an OnTrigger type collision.
            </summary>
        </member>
        <member name="E:WarWolfWorks.CollisionSystem.Detector`1.OnStay">
            <summary>
            Event is triggered as long as previously entered collision did not exit.
            Collider is the collider which was detected,
            Boolean is if the collision was an OnTrigger type collision.
            </summary>
        </member>
        <member name="E:WarWolfWorks.CollisionSystem.Detector`1.OnExit">
            <summary>
            Event is triggered when ColliderDetector detects an Exit collision.
            Collider is the collider which was detected,
            Boolean is if the collision was an OnTrigger type collision.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.エンター呼び出す(`0,System.Boolean)">
            <summary>
            Invokes the <see cref="E:WarWolfWorks.CollisionSystem.Detector`1.OnEnter"/> event action. (よびだす)
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.ソテー呼び出す(`0,System.Boolean)">
            <summary>
            Invokes the <see cref="E:WarWolfWorks.CollisionSystem.Detector`1.OnStay"/> event action.(よびだす)
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.出口呼び出す(`0,System.Boolean)">
            <summary>
            Invokes the <see cref="E:WarWolfWorks.CollisionSystem.Detector`1.OnExit"/> event action.(でぐちよびだす)
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.FixedUpdate">
            <summary>
            Unity's FixedUpdate method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.グループ追加(`0,System.Boolean)">
            <summary>
            Adds a group to CollisionGroups.
            </summary>
            <param name="ち"></param>
            <param name="てい"></param>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.グループ削除(`0)">
            <summary>
            Removes a group containing ち as collider.
            </summary>
            <param name="ち"></param>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.CollisionGroupExists(`0)">
            <summary>
            Returns true if a group contains the given collider.
            </summary>
            <param name="groupCollider"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.Detector`1.ホーイチ(System.Action{WarWolfWorks.CollisionSystem.Detector{`0}.衝突グループ})">
            <summary>
            Executes the action given on CollisionGroups.ForEach.
            </summary>
            <param name="アクション"></param>
        </member>
        <member name="T:WarWolfWorks.CollisionSystem.RaycastDetector2D">
            <summary>
            Used to detect 2D collisions using raycasts.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.DisplayGizmos">
            <summary>
            If true, all raycasts will be displayed with wire-type gizmos.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.IsFixedUpdate">
            <summary>
            Determines if calculations are made inside FixedUpdate or Update.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.RaycastFilter">
            <summary>
            Filter applied to raycasts.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.RaycastType">
            <summary>
            What type of raycasting will the <see cref="T:WarWolfWorks.CollisionSystem.RaycastDetector2D"/> perform.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RaycastDetector2D.レーキヤスト方面">
            <summary>
            (ほうめん)
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.RaycastDirection">
            <summary>
            Direction at which all raycasts will be performed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RaycastDetector2D.レーキヤスト距離">
            <summary>
            (きょり)
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.RaycastDistance">
            <summary>
            Distance at which all raycasts will be performed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RaycastDetector2D.レーキヤスト面積">
            <summary>
            (めんせき)
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.RaycastSize">
            <summary>
            Size of all raycasts performed (If raycast takes float value instead of Vector2 to determine size, it will simply take the X value for non-overlap raycasts and Y value for overlap raycasts).
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.AreaCastPointA">
            <summary>
            Point A used for <see cref="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.AreaCastPointB">
            <summary>
            Point B used for <see cref="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RaycastDetector2D.中心ポイント">
            <summary>
            (ちゅうしん)
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.CenterPoint">
            <summary>
            Origin point of all raycasts.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.Center">
            <summary>
            Equivalent to <see cref="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.CenterPoint"/>.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.CollisionSystem.RaycastDetector2D.コンディション">
            <summary>
            No condition, always true.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.FixedUpdate">
            <summary>
            Unity's FixedUpdate Method. All calculations are made here.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.算定">
            <summary>
            Calculates all raycasts. (さんてい)
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.レーキヤスト">
            <summary>
            Performs a raycast.
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.箱キヤスト">
            <summary>
            Performs a boxcast. (はこ)
            </summary>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.丸キヤスト">
            <summary>
            Performs a circlecast. (まる)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.打ち合わせ丸キヤスト">
            <summary>
            Performs a overlapcircle cast. (うちあわせまる)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.打ち合わせ辺キヤスト">
            <summary>
            Performs a overlaparea cast. (うちあわせへん)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.CollisionSystem.RaycastDetector2D.打ち合わせ箱キヤスト">
            <summary>
            Performs a overlapbox cast. (うちあわせはこ)
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.CollisionSystem.RaycastFilter2D">
            <summary>
            Used by <see cref="T:WarWolfWorks.CollisionSystem.RaycastDetector2D"/> for raycasting settings.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RaycastFilter2D.LayerMask">
            <summary>
            Layermask used for raycasts.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RaycastFilter2D.Depth">
            <summary>
            Min-Max Depth for raycasting.
            </summary>
        </member>
        <member name="T:WarWolfWorks.CollisionSystem.RD2DType">
            <summary>
            Used by <see cref="T:WarWolfWorks.CollisionSystem.RaycastDetector2D"/> to adapt it's raycasting.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RD2DType.raycast">
            <summary>
            If flagged, it will perform a <see cref="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RD2DType.boxcast">
            <summary>
            If flagged, it will perform a <see cref="M:UnityEngine.Physics2D.BoxCastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RD2DType.circlecast">
            <summary>
            If flagged, it will perform a <see cref="M:UnityEngine.Physics2D.CircleCastAll(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RD2DType.overlapCircle">
            <summary>
            If flagged, it will perform a <see cref="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RD2DType.overlapArea">
            <summary>
            If flagged, it will perform a <see cref="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.CollisionSystem.RD2DType.overlapBox">
            <summary>
            If flagged, it will perform a <see cref="M:UnityEngine.Physics2D.OverlapBoxAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.AdvancedDebug">
            <summary>
            An advanced way to debug code information.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AdvancedDebug.InfoColor">
            <summary>
            Color which will be used for Log information.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AdvancedDebug.WarningColor">
            <summary>
            Color which will be used for LogWarning information.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AdvancedDebug.ErrorColor">
            <summary>
            Color which will be used for LogError information.
            </summary>
        </member>
        <member name="P:WarWolfWorks.AdvancedDebug.DebugStyle">
            <summary>
            Current <see cref="T:WarWolfWorks.Internal.Settings.DebugStyle"/> of <see cref="T:WarWolfWorks.AdvancedDebug"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.AdvancedDebug.DEBUG_LAYER_EXCEPTIONS_INDEX">
            <summary>
            Layer at which exceptions are handled.
            </summary>
        </member>
        <member name="F:WarWolfWorks.AdvancedDebug.DEBUG_LAYER_EXCEPTIONS_NAME">
            <summary>
            Layer at which exceptions are handled.
            </summary>
        </member>
        <member name="F:WarWolfWorks.AdvancedDebug.DEBUG_LAYER_WWW_INDEX">
            <summary>
            Layer at which WWWLibrary gives simple debug information.
            </summary>
        </member>
        <member name="F:WarWolfWorks.AdvancedDebug.DEBUG_LAYER_WWW_NAME">
            <summary>
            Layer at which WWWLibrary gives simple debug information.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LayerIsActive(System.Int32)">
            <summary>
            Returns true if the given layer is active.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LayerIsActive(System.String)">
            <summary>
            Returns true if the given layer is active.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.RefreshDebugger">
            <summary>
            Refreshes all variables to be up-to-date with WWWSettings.ini file.
            </summary>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogException(System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.Int32)">
            <summary>
            Logs a message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarning(System.Object,System.Int32)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarning(System.Object,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogError(System.Object,System.Int32)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogError(System.Object,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogFormat(System.String,System.Int32,System.Object[])">
            <summary>
            Logs a message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogFormat(System.String,System.String,System.Object[])">
            <summary>
            Logs a message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarningFormat(System.String,System.Int32,System.Object[])">
            <summary>
            Logs a warning message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogWarningFormat(System.String,System.String,System.Object[])">
            <summary>
            Logs a warning message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogErrorFormat(System.String,System.Int32,System.Object[])">
            <summary>
            Logs an error message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogErrorFormat(System.String,System.String,System.Object[])">
            <summary>
            Logs an error message using <see cref="M:System.String.Format(System.String,System.Object[])"/>-like formatting.
            </summary>
            <param name="message"></param>
            <param name="layer"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogDelegate(System.Delegate)">
            <summary>
            Uses <see cref="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.Int32)"/> to debug all delegates inside a <see cref="T:System.Delegate"/>.
            </summary>
            <param name="delegate"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Uses <see cref="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.Int32)"/> to debug all elements inside a IEnumerable using T.ToString().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.AdvancedDebug.LogIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Uses <see cref="M:WarWolfWorks.AdvancedDebug.Log(System.Object,System.String)"/> to debug all elements inside a IEnumerable using T.ToString().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="layer"></param>
        </member>
        <member name="T:WarWolfWorks.Debugging.Command">
            <summary>
            Used with <see cref="T:WarWolfWorks.Debugging.WWWConsole"/> to add commands.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.Command.Name">
            <summary>
            Name of the command.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.Command.CaseSensitiveName">
            <summary>
            If true, all characters must be of the same case to be accepted.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.Command.Description">
            <summary>
            Description of the command.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.Command.OnCommandUsed">
            <summary>
            What happens when the command is entered; String value is the text after the '='.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.Command.#ctor(System.String,System.Boolean,System.String,System.Action{System.String})">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Debugging.Command"/>.
            </summary>
            <param name="name"></param>
            <param name="caseSensitiveName"></param>
            <param name="description"></param>
            <param name="onCommandUsed"></param>
        </member>
        <member name="T:WarWolfWorks.Debugging.EnumFlagsAttribute">
            <summary>
            Displays an enum value inside the inspector as Flags.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.EnumFlagsAttribute.enumName">
            <summary>
            Custom name of the enum value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.EnumFlagsAttribute.#ctor">
            <summary>
            Displays an enum value inside the inspector as Flags.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.EnumFlagsAttribute.#ctor(System.String)">
            <summary>
            Displays an enum value inside the inspector as Flags with a custom name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:WarWolfWorks.Debugging.WWWConsole">
            <summary>
            In game console (For visual display, see <see cref="T:WarWolfWorks.UI.ConsoleMenu"/>).
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.WWWConsole.AcceptableKeys">
            <summary>
            All non-function input keys acceptable by the <see cref="T:WarWolfWorks.Debugging.WWWConsole"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.WWWConsole.FunctionKeys">
            <summary>
            All function keys readable by the console.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.WWWConsole.COMMAND_ARG_SEPARATOR">
            <summary>
            What separates the command name from it's argument.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.WWWConsole.PreviousInputs">
            <summary>
            All previous inputs confirmed inside the console.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.WWWConsole.AllConsoleText">
            <summary>
            The entirety of text inside the console.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.WWWConsole.InsertOffsetIndex">
            <summary>
            Index of the | inside the input.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Debugging.WWWConsole.Commands">
            <summary>
            All commands.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.AddCommand(WarWolfWorks.Debugging.Command)">
            <summary>
            Adds a command to the list of commands. (Note: Cannot add two commands of the same <see cref="F:WarWolfWorks.Debugging.Command.Name"/> value)
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.RemoveCommand(System.String)">
            <summary>
            Removes a command under the given name from the list of commands.
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.Debugging.WWWConsole.OnInputConfirmed">
            <summary>
            Invoked when Input inside the console is confirmed.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Debugging.WWWConsole.OnCommandConfirmed">
            <summary>
            Invoked when a command was successfully called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Debugging.WWWConsole.OnConsoleTextInsert">
            <summary>
            Invoked when text is inserted inside the console content.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.GetCurrentInput">
            <summary>
            Returns the current input text from the console.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.WriteCommandHelper(System.String)">
            <summary>
            Use this to display a helper message.
            </summary>
            <param name="commandListText"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.GetCommandNameDescriptionText(WarWolfWorks.Debugging.Command)">
            <summary>
            Returns a nicely formatted text of a command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.SetInputText(System.String)">
            <summary>
            Sets the console input text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.InsertTextToConsole(System.String)">
            <summary>
            Pointer to <see cref="M:WarWolfWorks.Debugging.WWWConsole.InsertTextToConsole(System.String,UnityEngine.Color)"/> with set as <see cref="P:UnityEngine.Color.green"/> * 0.6f.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.InsertTextToConsole(System.String,UnityEngine.Color)">
            <summary>
            Inserts text inside the console with a specified color.
            </summary>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.InsertInput(UnityEngine.KeyCode)">
            <summary>
            Inserts a <see cref="T:UnityEngine.KeyCode"/> inside the input text.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.DebugException(System.Exception,System.String)">
            <summary>
            Writes an exception inside the console with a premade message pointing the user to a helper command.
            </summary>
            <param name="e"></param>
            <param name="commandTip"></param>
        </member>
        <member name="M:WarWolfWorks.Debugging.WWWConsole.ConfirmInput">
            <summary>
            Confirms the current input of the console.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.WWWConsole.InputFieldIndex">
            <summary>
            Index of the Console's UI input field.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.WWWConsole.ScrollSpeed">
            <summary>
            Scroll speed of the console's UI.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Debugging.WWWConsole.FontSize">
            <summary>
            Font size of the console's UI.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Internal.Settings">
            <summary>
            General settings of the WWWLibrary.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.SettingsPath">
            <summary>
            Path to the WWWSettings.ini file.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Internal.Settings.UtilityCanvasType">
            <summary>
            Used to determine the behaviour of <see cref="P:WarWolfWorks.Utility.Hooks.UtilityCanvas"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.FIRST_FOUND">
            <summary>
            Takes the first <see cref="T:UnityEngine.Canvas"/> found inside the given scene.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.PREFABBED">
            <summary>
            Takes a canvas inside a Resources folder and loads it through <see cref="M:UnityEngine.Resources.Load``1(System.String)"/>
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.BY_NAME_IN_SCENE">
            <summary>
            Takes the first <see cref="T:UnityEngine.GameObject"/> inside the active scene under given name.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.INSTANTIATE_NEW">
            <summary>
            Instantiates a new canvas that will be purely used by the WWWLibrary.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.CATEGORY_CANVAS_NAME">
            <summary>
            Name of the category given to the <see cref="P:WarWolfWorks.Utility.Hooks.UtilityCanvas"/> Settings in WWWSettings.ini.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasType">
            <summary>
            Gets the <see cref="T:WarWolfWorks.Internal.Settings.UtilityCanvasType"/> read directly from the WWWSettings.ini file.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasResourcesPath">
            <summary>
            If the <see cref="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasType"/> is <see cref="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.PREFABBED"/>, it will return the path to the object it was set to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasNameLoad">
            <summary>
            If the <see cref="M:WarWolfWorks.Internal.Settings.GetUtilityCanvasType"/> is <see cref="F:WarWolfWorks.Internal.Settings.UtilityCanvasType.BY_NAME_IN_SCENE"/>, it will return the name of the object that will be searched for in the scene.
            </summary>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.CATEGORY_DEBUG_NAME">
            <summary>
            Name of the category given to <see cref="T:WarWolfWorks.AdvancedDebug"/> settings in WWWSettings.ini.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.LayerToSavableString(System.String,System.Boolean)">
            <summary>
            Default layer used by <see cref="T:WarWolfWorks.AdvancedDebug"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.ToLayerStreamingName(System.Int32)">
            <summary>
            Gives the name of the variable to be used with <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/>'s loading.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Internal.Settings.DebugStyle">
            <summary>
            Determines how <see cref="T:WarWolfWorks.AdvancedDebug"/> will behave.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.EDITOR_GAME_DEBUG">
            <summary>
            Will display using both <see cref="T:WarWolfWorks.Debugging.WWWConsole"/> and editor debugging.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.EDITOR_DEBUG_ONLY">
            <summary>
            Will only display messages inside the editor.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.IN_GAME_DEBUG_ONLY">
            <summary>
            Will only display messages using <see cref="T:WarWolfWorks.Debugging.WWWConsole"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Internal.Settings.DebugStyle.DISABLED">
            <summary>
            Disables <see cref="T:WarWolfWorks.AdvancedDebug"/> debugging.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugStyle">
            <summary>
            Gets the <see cref="T:WarWolfWorks.Internal.Settings.DebugStyle"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugLayers">
            <summary>
            Gets the debug layer read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugLogColor">
            <summary>
            Gets the Log <see cref="T:UnityEngine.Color"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugWarningColor">
            <summary>
            Gets the LogWarning <see cref="T:UnityEngine.Color"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Internal.Settings.GetDebugErrorColor">
            <summary>
            Gets the LogError <see cref="T:UnityEngine.Color"/> read directly from WWWSettings.ini.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Internal.Settings.LibraryLanguage">
            <summary>
            Language of this library.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Attacking.Attack">
            <summary>
            Base scriptable object to use with the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack"/> component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.EntityMain">
            <summary>
            The <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> holder of this attack.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.EntityAttack">
            <summary>
            The <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.EntityAttack"/> component of the holder.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnAttack">
            <summary>
            Invoked when the Attack successfully invokes <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnTrigger"/>
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnReloadTrigger">
            <summary>
            Invokes when <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/> is called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnReload">
            <summary>
            Invokes after <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/> finishes.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.IsInitiated">
            <summary>
            Determines if the attack was assigned to an entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.Name">
            <summary>
            Name given to this attack through the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.Description">
            <summary>
            The description of the Attack, serialized as "Attack Description" in the inspector.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Attacking.Attack.damage">
            <summary>
            Uncalculated damage. (overridable through <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.Damage"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.Damage">
            <summary>
            The calculated damage of the attack. (overridable)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Attacking.Attack.attackSpeed">
            <summary>
            Uncalculated attack speed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.AttackSpeed">
            <summary>
            Rate at which Attack.Trigger() can be called. (Calculated as 60 / AttackSpeed for an RPM-like functionality).
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Attacking.Attack.magazineSize">
            <summary>
            Uncalculated magazine size.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.MagazineSize">
            <summary>
            Calculated maximum capacity of the attack's magazine.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.InfiniteAmmo">
            <summary>
            If true, MagazineSize and ReloadSpeed will be ignored and all shots will not consume any ammunition.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.SetInfiniteAmmo(System.Boolean)">
            <summary>
            Sets <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.InfiniteAmmo"/> to given value.
            </summary>
            <param name="to"></param>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Attacking.Attack.currentMagazine">
            <summary>
            Used by <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.CurrentMagazine"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.CurrentMagazine">
            <summary>
            How many "bullets" are currently in the magazine.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.AmmoConsumption">
            <summary>
            The ammo consumption of the attack per <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Trigger"/>. (1 by default)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Attacking.Attack.reloadSpeed">
            <summary>
            Uncalculated reload speed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.ReloadSpeed">
            <summary>
            Calculated speed at which <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/> is invoked.
            The lower this value is the faster it will reload.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.DefaultAttackCondition">
            <summary>
            The default attack condition which is set when an attack group inside <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.EntityAttack"/> is not set.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnInitiate">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Awake().
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.AttackSpeedAllowsTrigger">
            <summary>
            Returns true if the interval between attack based on attack speed was met.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnUpdate">
            <summary>
            Equivalent to a Monobehaviour's Update method.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.HasAmmo">
            <summary>
            Returns true if either: InfiniteAmmo is true, CurrentMagazine is higher than 0 or AmmoConsumption is less than 1.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.CanAttack">
            <summary>
            Returns true if AttackSpeedAllowsTrigger is true, Has ammo is true and IsReloading is false.
            Keep in mind this does not take into account <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetCanAttack(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.TimeScale">
            <summary>
            Multiplier at which <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.AttackSpeed"/> is calculated. Works in a similar way to <see cref="P:UnityEngine.Time.timeScale"/>. (Implemented as <see cref="P:WarWolfWorks.Interfaces.ILockable.Locked"/> = 1 else 0 in WWW2.5 or higher)
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTrigger(System.Boolean)">
            <summary>
            Allows you to trigger <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnTrigger"/> without meeting any required condition.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTriggerOnRepeat(System.Boolean,System.Single,System.Single)">
            <summary>
            Activates <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTrigger(System.Boolean)"/> repeatedly with a Unity Coroutine for a specified duration in seconds.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTriggerOnRepeat(System.Boolean,System.Int32,System.Single)">
            <summary>
            Activates <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTrigger(System.Boolean)"/> repeatedly with a Unity Coroutine for a specified duration in triggers invoked.
            </summary>
            <param name="consumeAmmo"></param>
            <param name="shotsLength"></param>
            <param name="delayBetweenShots"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTriggerOnRepeat(System.Boolean,System.Predicate{WarWolfWorks.EntitiesSystem.Attacking.Attack},System.Single)">
            <summary>
            Activates <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ForceTrigger(System.Boolean)"/> repeatedly with a Unity Coroutine as long as @while returns true.
            </summary>
            <param name="consumeAmmo"></param> 
            <param name="while"></param>
            <param name="delayBetweenShots"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.TroubleShootTrigger">
            <summary>
            Here in case an Attack is permanently frozen due to bad exception handling.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ConsumeAmmo">
            <summary>
            When called, it will remove AmmoConsumption from CurrentMagazine, and if CurrentMagazine is less than or equal to 0, it will automatically invoke <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload">
            <summary>
            Starts a reload.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload(System.Single)">
            <summary>
            Starts a reload from specified point (0 being beginning, 1 being end).
            </summary>
            <param name="from01"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.InstantReload">
            <summary>
            Goes through <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/> with a delay equal to 0 instead of <see cref="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.ReloadSpeed"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.GetReloadProgress">
            <summary>
            Returns the current progress of the reload in percent (01). Used by <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/>.
            You should override this if you have already overridden <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.SetReloadProgress(System.Single)"/>,
            and it should point to the exact same value, except if you're absolutely sure of what you're doing.
            Pointing to a different variable than <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.SetReloadProgress(System.Single)"/> is using will
            always cause an infinite reload to happen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.SetReloadProgress(System.Single)">
            <summary>
            The progress of the reload in percent (01). Used by <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/>.
            You should override this only to change what value this is applied to, otherwise
            it can generate unwanted behaviour. If you override this method, make sure to override
            <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.GetReloadProgress"/> to point to the exact same value.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.ReloadIsPaused">
            <summary>
            Determines if the <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/>'s invokation was paused.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Attack.IsReloading">
            <summary>
            Determines if the weapon is currently reloading.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.CancelReload(System.Boolean)">
            <summary>
            If <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/> was called, it's invokation will be canceled.
            </summary>
            <param name="resetProgress"/>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.PauseReload">
            <summary>
            Pauses the invokation of <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.Reload"/> without completely stopping it. To resume, call <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ResumeReload"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.ResumeReload">
            <summary>
            Resumes a paused invokation called by <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.PauseReload"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.Attack.OnTrigger">
            <summary>
            This method is called when all conditions are met and the Attack successfully attacks.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Attacking.Condition">
            <summary>
            Condition used for <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.Condition.ConditionIsMet">
            <summary>
            Predicate which determines if the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> assigned with this <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> inside <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack"/> will be able to shoot.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack">
            <summary>
            Class used for entity attacking. (sealed)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.OnAttackTriggered">
            <summary>
            Triggers when this entity successfully attacks.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.OnBeforeAttackTriggered">
            <summary>
            Triggers right before this entity attack. (only triggers if the attack was successful)
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetAttacks``1(System.Int32[])">
            <summary>
            Gets all attacks of given indexes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ofIndex"></param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetAttack(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> scriptable object through index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.TryGetAttack(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> scriptable object through index; 
            In case of an exception, it will simply return null.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetCondition(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> of an attack group through index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetCondition(WarWolfWorks.EntitiesSystem.Attacking.Attack)">
            <summary>
            Returns the first <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> inside an attack group which has the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> given.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.TryGetCondition(System.Int32)">
            <summary>
            Gets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> of an attack group through index; 
            In case of an exception, it will simply return null.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.TryGetCondition(WarWolfWorks.EntitiesSystem.Attacking.Attack)">
            <summary>
            Returns the first <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> inside an attack group which has the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> given.
            In case of an exception, it will simply return null.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetPoint(System.Int32)">
            <summary>
            Returns the attack point (<see cref="T:UnityEngine.Transform"/>) of an attack group through index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetPoint(WarWolfWorks.EntitiesSystem.Attacking.Attack)">
            <summary>
            Returns the first attack point (<see cref="T:UnityEngine.Transform"/>) inside an attack group which has the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> given.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.TryGetPoint(System.Int32)">
            <summary>
            Returns the attack point (<see cref="T:UnityEngine.Transform"/>) of an attack group through index.
            In case of an exception, it will simply return null.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.TryGetPoint(WarWolfWorks.EntitiesSystem.Attacking.Attack)">
            <summary>
            Returns the first attack point (<see cref="T:UnityEngine.Transform"/>) inside an attack group which has the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> given.
            In case of an exception, it will simply return null.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetCanAttack(System.Int32)">
            <summary>
            Returns the CanAttack variable if the given group index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetIndex(WarWolfWorks.EntitiesSystem.Attacking.Attack)">
            <summary>
            Gets the index of the group in which the given <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> component resides.
            Returns -1 if Group of <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> given was not found.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetIndex(WarWolfWorks.EntitiesSystem.Attacking.Condition)">
            <summary>
            Gets the index of the group in which the given <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> component resides.
            Returns -1 if Group of <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> given was not found.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.GetIndex(UnityEngine.Transform)">
            <summary>
            Gets the index of the group in which the given attack point (<see cref="T:UnityEngine.Transform"/>) component resides.
            Returns -1 if Group of attack point given was not found.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SetAttack(System.Int32,WarWolfWorks.EntitiesSystem.Attacking.Attack)">
            <summary>
            Sets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="atk"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SetAttack(System.Int32,WarWolfWorks.EntitiesSystem.Attacking.Attack@)">
            <summary>
            Sets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="atk"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SetCondition(System.Int32,WarWolfWorks.EntitiesSystem.Attacking.Condition)">
            <summary>
            Sets the <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="condition"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SetAttackPoint(System.Int32,UnityEngine.Transform)">
            <summary>
            Sets the attack point (<see cref="T:UnityEngine.Transform"/>) component under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="point"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SetCanAttack(System.Int32,System.Boolean)">
            <summary>
            Set the CanAttack variable under groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.AddAttack(WarWolfWorks.EntitiesSystem.Attacking.Attack,WarWolfWorks.EntitiesSystem.Attacking.Condition,UnityEngine.Transform,System.Boolean)">
            <summary>
            Adds an attack group to all attacks of this <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack"/>.
            </summary>
            <param name="attack"></param>
            <param name="condition"></param>
            <param name="point"></param>
            <param name="canAttack"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.RemoveAttack(System.Int32)">
            <summary>
            Removes an attack at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachAttack(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Attack})">
            <summary>
            Loops through each Group's <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Attack"/> component and calls given action with it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachCondition(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Condition})">
            <summary>
            Loops through each Group's <see cref="T:WarWolfWorks.EntitiesSystem.Attacking.Condition"/> component and calls given action with it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachPoint(System.Action{UnityEngine.Transform})">
            <summary>
            Loops through each Group's attack point (<see cref="T:UnityEngine.Transform"/>) and calls given action with it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachGroup(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Attack,WarWolfWorks.EntitiesSystem.Attacking.Condition,UnityEngine.Transform})">
            <summary>
            Loops through each Group using their main variables and invokes given action based upon them.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SafeForEachAttack(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Attack})">
            <summary>
            A safer but slighly less optimal <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachAttack(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Attack})"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SafeForEachCondition(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Condition})">
            <summary>
            A safer but slighly less optimal <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachCondition(System.Action{WarWolfWorks.EntitiesSystem.Attacking.Condition})"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.SafeForEachPoint(System.Action{UnityEngine.Transform})">
            <summary>
            A safer but slighly less optimal <see cref="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.ForEachPoint(System.Action{UnityEngine.Transform})"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.OnAwake">
            <summary>
            Unity's Awake method called by EntityComponent.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Attacking.EntityAttack.OnUpdate">
            <summary>
            Unity's Update method called by EntityComponent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.DefaultHealthDamage">
            <summary>
            Default health damage set on <see cref="T:WarWolfWorks.EntitiesSystem.EntityHealth"/> when <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.Calculator"/> is null. 
            Uses <see cref="T:System.Single"/> as it's base type.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.DefaultHealthDamage.AcceptableValue(System.Object)">
            <summary>
            Checks if the value given is a float value.
            </summary>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.DefaultHealthDamage.FinalValue(System.Object,WarWolfWorks.EntitiesSystem.EntityHealth,System.Boolean@)">
            <summary>
            Returns the value given in float.
            </summary>
            <param name="damage"></param>
            <param name="entity"></param>
            <param name="triggersImmunity"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Entity">
            <summary>
            The core class of everything inside <see cref="N:WarWolfWorks.EntitiesSystem"/>
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.EntityType">
            <summary>
            Override this to set the entity's base type. (E.G Enemy, Boss, Player, etc...)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.Name">
            <summary>
            The name of the entity. (To get the component name, use lowercase name instead).
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.IsEntity(System.Type)">
            <summary>
            Returns true if this entity is of the same type as the value given; Compares <see cref="P:WarWolfWorks.EntitiesSystem.Entity.EntityType"/>, not the class' actual type.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.IsUnderlyingEntity(System.Type)">
            <summary>
            Returns true if this entity's underlying type is the same as the value given; Compares <see cref="P:WarWolfWorks.EntitiesSystem.Entity.EntityType"/>, not the class' actual type.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.Position">
            <summary>
            Pointer to <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.Rotation">
            <summary>
            Pointer to <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.Euler">
            <summary>
            Pointer to <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.transform.eulerAngles.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Entity.CallType">
            <summary>
            Call type used for Unity Monobehaviour called by Entity-related scripts. (see <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/>)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.awake">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.Awake().
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.start">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.Start().
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.enable">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.OnEnable().
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.disable">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.OnDisable().
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.update">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.Update().
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.fixedU">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.FixedUpdate().
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Entity.CallType.destroy">
            <summary>
            Used for <see cref="T:UnityEngine.MonoBehaviour"/>.OnDestroy().
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.Stats">
            <summary>
            All stats contained by the entity.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Entity.OnCallEventTrigger">
            <summary>
            Triggers when a Unity method is called on the Entity. 
            Only triggers on: <see cref="F:WarWolfWorks.EntitiesSystem.Entity.CallType.destroy"/>, <see cref="F:WarWolfWorks.EntitiesSystem.Entity.CallType.enable"/>, <see cref="F:WarWolfWorks.EntitiesSystem.Entity.CallType.disable"/>, <see cref="F:WarWolfWorks.EntitiesSystem.Entity.CallType.awake"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.CallComponentMethods(WarWolfWorks.EntitiesSystem.Entity.CallType)">
            <summary>
            Calls a Monobehaviour method from all <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/>s attached to this entity.
            </summary>
            <param name="callType"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.GetEntityComponent``1">
            <summary>
            A more performant way of getting an <see cref="T:WarWolfWorks.Interfaces.IEntityComponent"/> as opposed to <see cref="M:UnityEngine.Component.GetComponent``1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.GEC``1">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.EntitiesSystem.Entity.GetEntityComponent``1"/> with a shorter name.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.GetEntityComponents``1">
            <summary>
            Returns all entity components which are of given generic type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.TryGetEntityComponent``1(``0@)">
            <summary>
            Equivalent to <see cref="M:WarWolfWorks.EntitiesSystem.Entity.GetEntityComponent``1"/> in an try-out fashion.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.TGEC``1(``0@)">
            <summary>
            Same method as <see cref="M:WarWolfWorks.EntitiesSystem.Entity.TryGetEntityComponent``1(``0@)"/> with a shorter name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.GetAllEntityComponents">
            <summary>
            Returns all <see cref="T:WarWolfWorks.Interfaces.IEntityComponent"/> components attached to this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Entity.AnimationManager">
            <summary>
            Entity's Animation Manager. (Always attached by default)
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.AddEntityComponent``1">
            <summary>
            Adds an <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/> to this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.AddEntityComponent(System.Type)">
            <summary>
            Adds an <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/> to this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.RemoveEntityComponent``1">
            <summary>
            Removes an <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/> from this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.RemoveEntityComponent(System.Type)">
            <summary>
            Removes an <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/> from this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnAwake">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Awake().
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnStart">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Start().
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnEnabled">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnEnable().
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnUpdate">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Update().
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnFixed">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.FixedUpdate().
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnDisabled">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnDisable().
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnDestroyed">
            <summary>
            Called after the entity is destroyed, but not cleared.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.OnBeforeDestroy">
            <summary>
            Called right before the entity is destroyed.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.Destroy">
            <summary>
            Destroys this entity officially, removing it from all Entity lists inside the WWW library and calls it's <see cref="M:WarWolfWorks.EntitiesSystem.Entity.OnDestroyed"/> method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.DestroyUnofficially">
            <summary>
            Destroys the entity without invoking it's destroy method(s) or it's component's destroy method(s).
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.RemoveComponent``1">
            <summary>
            Removes a component from the list of <see cref="T:WarWolfWorks.Interfaces.IEntityComponent"/>s.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.RemoveComponent(WarWolfWorks.Interfaces.IEntityComponent)">
            <summary>
            Removes a specific element, countrary to <see cref="M:WarWolfWorks.EntitiesSystem.Entity.RemoveComponent``1"/> which removes the first element of type given.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Entity.op_Implicit(WarWolfWorks.EntitiesSystem.Entity)~UnityEngine.Transform">
            <summary>
            Returns the entity's .transform.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.EntityComponent">
            <summary>
            Base class for all Components used by an Entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityComponent.EntityMain">
            <summary>
            The Entity which uses this component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityComponent.Position">
            <summary>
            Pointer to EntityMain.Position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityComponent.Rotation">
            <summary>
            Pointer to EntityMain.Rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityComponent.Euler">
            <summary>
            Pointer to EntityMain.Euler.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityComponent.StartCoroutine(System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Pointer to <see cref="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
            <param name="routine"></param>
            <param name="verifier"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityComponent.StopCoroutine(System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Pointer to <see cref="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
            <param name="routine"></param>
            <param name="verifier"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.EntityHealth">
            <summary>
            Class which acts as the Entity's health.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.EntityHealth.OnDamaged">
            <summary>
            What happends when <see cref="M:WarWolfWorks.EntitiesSystem.EntityHealth.DamageHealth(System.Object)"/> is successfully invoked.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.EntityHealth.OnDeath">
            <summary>
            What happends when the <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.CurrentHealth"/> reaches 0.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.EntityHealth.OnHealthAdded">
            <summary>
            Ivoked when <see cref="M:WarWolfWorks.EntitiesSystem.EntityHealth.AddHealth(System.Single)"/> is called. Float value is the amount of health that was added.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.CurrentHealth">
            <summary>
            The current health of the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.MaxHealth">
            <summary>
            The maximum value at which <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.CurrentHealth"/> can be.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.Defense">
            <summary>
            The <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>'s defense.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.DamageParent">
            <summary>
            If true and this component's <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is <see cref="T:WarWolfWorks.Interfaces.IEntityParentable"/>,
            it will damage the parent's Health instead.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.PreviousDamage">
            <summary>
            Damage previously passed in <see cref="M:WarWolfWorks.EntitiesSystem.EntityHealth.DamageHealth(System.Object)"/>. (Only accepted)
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityHealth.OnAwake">
            <summary>
            Unity's Awake method called by <see cref="T:WarWolfWorks.EntitiesSystem.EntityComponent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.ImmunityDuration">
            <summary>
            Duration in which the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is unable to take damage. (Only works if <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.UsesImmunity"/> is true)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.UsesImmunity">
            <summary>
            Determines if the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> can use the immunity system.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.IsImmune">
            <summary>
            Is the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> currently immune?
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.Calculator">
            <summary>
            The calculator used by this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>. If null on Awake, it will be set to <see cref="T:WarWolfWorks.EntitiesSystem.DefaultHealthDamage"/> by default.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityHealth.AddHealth(System.Single)">
            <summary>
            Adds the specified amount to <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityHealth.RemoveHealth(System.Single)">
            <summary>
            Removes the specified amount from <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityHealth.DamageHealth(System.Object)">
            <summary>
            To make this method work, you will need to assign a custom or premade <see cref="T:WarWolfWorks.EntitiesSystem.HealthDamage"/>.
            </summary>
            <param name="damage"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityHealth.TriggerImmunity(System.Single)">
            <summary>
            Triggers the immunity of this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>. (Works only if <see cref="P:WarWolfWorks.EntitiesSystem.EntityHealth.UsesImmunity"/> is true)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.ImmunityEffect">
            <summary>
            Effect which will be Invoked when Immunity is triggered.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityHealth.WarWolfWorks#Interfaces#IAdvancedHealth#ImmunityEffect">
            <summary>
            Must be of type <see cref="T:WarWolfWorks.Interfaces.IImmunityEffect`1"/> where T is <see cref="T:WarWolfWorks.EntitiesSystem.EntityHealth"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityHealth.StopImmunity">
            <summary>
            Stops an immunity previously triggered with <see cref="M:WarWolfWorks.EntitiesSystem.EntityHealth.TriggerImmunity(System.Single)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.EntityManager">
            <summary>
            Utility class based around Entities.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.Find(System.Predicate{WarWolfWorks.EntitiesSystem.Entity})">
            <summary>
            Finds an existing entity based on Predicate given.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.FindAll(System.Predicate{WarWolfWorks.EntitiesSystem.Entity})">
            <summary>
            Finds all entities who match the given condition.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.Exists(System.Type)">
            <summary>
            Returns true if an entity of given type exists inside the scene.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntity(UnityEngine.Vector3)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> to position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntity``1(UnityEngine.Vector3)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> to position of specified T type.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntity(System.Single,UnityEngine.Vector3)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> in within range from position.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntity``1(System.Single,UnityEngine.Vector3)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> in within range from position of given type.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntity(System.Single,UnityEngine.Vector3,System.Type)">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> in within range from position of given type.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntity(System.Single,UnityEngine.Vector3,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> in within range from position of given type.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntities(System.Single,UnityEngine.Vector3)">
            <summary>
            Gets all entities in within range from position.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntities``1(System.Single,UnityEngine.Vector3)">
            <summary>
            Gets all entities in within range from position of given type.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntities(System.Single,UnityEngine.Vector3,System.Type)">
            <summary>
            Gets all entities in within range from position of given type.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestEntities(System.Single,UnityEngine.Vector3,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets all entities in within range from position of given types.
            </summary>
            <param name="within"></param>
            <param name="position"></param>
            <param name="ofTypes"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestWithinView(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            Returns the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> that is visible to the given camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestWithinView``1(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            Returns the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> that is visible to the given camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestWithinView(UnityEngine.Camera,UnityEngine.Vector3,System.Type)">
            <summary>
            Returns the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> that is visible to the given camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <param name="position"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetClosestWithinView(UnityEngine.Camera,UnityEngine.Vector3,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns the closest <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> that is visible to the given camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <param name="position"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinView(UnityEngine.Camera)">
            <summary>
            Returns all entities visible to a camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinView(UnityEngine.Camera,System.Type)">
            <summary>
            Returns all entities of given type visible to a camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinView``1(UnityEngine.Camera)">
            <summary>
            Returns all entities of given T type visible to a camera. Only works on entities with a renderer component.
            Rather slow, avoid using on any Update method.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinBounds(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets all entities inside of bounds.
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinBounds``1(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets all entities of given generic type inside of bounds.
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinBounds(UnityEngine.Vector3,UnityEngine.Vector3,System.Type)">
            <summary>
            Gets all entities of given type inside of bounds.
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.GetAllWithinBounds(UnityEngine.Vector3,UnityEngine.Vector3,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets all entities of given types inside of bounds.
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityManager.GetAllEntities">
            <summary>
            Gets all entities currently inside the scene (Includes inactive/disabled Entities).
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityManager.GetAllEntitiesList">
            <summary>
            Gets all entities currently inside the scene into a <see cref="T:System.Collections.Generic.IList`1"/> (Includes inactive/disabled Entities).
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityManager.GetAllDisabledEntities">
            <summary>
            Gets all disabled entites inside the scene.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityManager.GetAllEnabledEntities">
            <summary>
            Gets all enabled entites inside the scene.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.OldestOf(WarWolfWorks.EntitiesSystem.Entity,System.Boolean)">
            <summary>
            Returns the oldest parent of an Entity with <see cref="T:WarWolfWorks.Interfaces.IEntityParentable"/> interface.
            </summary>
            <param name="entity"></param>
            <param name="includeNonParentableParent"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.EntityManager.OnEntityInstantiated">
            <summary>
            Called when an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is instantiated.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.EntityManager.OnEntityDestroyed">
            <summary>
            Called when an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is destroyed; Boolean value is true if the entity was destroyed officially.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.New``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Creates a new entity from an existing prefab.
            </summary>
            <param name="original"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.New(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Creates a new entity from an existing prefab.
            </summary>
            <param name="original"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.New(System.Type,UnityEngine.Vector3,UnityEngine.Quaternion,System.String,System.Type[],System.Type[])">
            <summary>
            Creates an entity from scratch.
            </summary>
            <param name="entity"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="hierarchyName"></param>
            <param name="entityComponents"></param>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.New``1(UnityEngine.Vector3,UnityEngine.Quaternion,System.String,System.Type[],System.Type[])">
            <summary>
            Creates an entity from scratch.
            </summary>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="hierarchyName"></param>
            <param name="entityComponents"></param>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.Destroy(WarWolfWorks.EntitiesSystem.Entity)">
            <summary>
            Destroys a given entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.DestroyUnofficially(WarWolfWorks.EntitiesSystem.Entity)">
            <summary>
            Destroys a given entity without invoking any of it's destroy methods.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityManager.ToString">
            <summary>
            Returns the name of the class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Movement.EntityMovement">
            <summary>
            Base class of all EntityMovement scripts. Use only this to move entites.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity">
            <summary>
            Class which is used to add or remove velocity from the Entity.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.Value">
            <summary>
            Value of the velocity.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.DeleteOnCount0">
            <summary>
            When the velocity timer reaches 0, it will be removed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.Affections">
            <summary>
            Affections. See <see cref="T:WarWolfWorks.Interfaces.IStat"/> for more info.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.StartTime">
            <summary>
            Time which was set for this velocity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.Time">
            <summary>
            Current countdown time.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.Time01">
            <summary>
            Returns the percent of the velocity runout. (Time / StartTime).
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.#ctor(UnityEngine.Vector3)">
            <summary>
            Creates a simple velocity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.#ctor(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Creates a velocity with a countdown.
            </summary>
            <param name="value"></param>
            <param name="time"></param>
            <param name="deleteOn0"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.#ctor(UnityEngine.Vector3,System.Int32[])">
            <summary>
            Creates a velocity with affections.
            </summary>
            <param name="value"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.#ctor(UnityEngine.Vector3,System.Single,System.Boolean,System.Int32[])">
            <summary>
            Creates a complete velocity.
            </summary>
            <param name="value"></param>
            <param name="time"></param>
            <param name="deleteOn0"></param>
            <param name="affections"></param>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.DefaultVelocity">
            <summary>
            The default velocity to be applies to this <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>. (<see cref="P:UnityEngine.Vector3.zero"/> by default)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.IsMoving">
            <summary>
            Boolean which returns true if the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is moving. (Doesn't have any function  by itself, if you want it to be functional you would need to give it the functionality yourself).
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocities">
            <summary>
            Every velocity stacked onto the entity's movement.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.UsedVelocity">
            <summary>
            Final Velocity that will be applied to this entity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> to the given position.
            </summary>
            <param name="position">World position to move the <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> to.</param>
            <param name="respectPhysics">If true, this method will try to respect the world physics in your game. (E.G not move inside another collider but next to it, etc..)</param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D">
            <summary>
            Base class used for 2D movement of an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>. (Requires a <see cref="T:UnityEngine.Rigidbody2D"/> component) (Inheritable)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.Rigidbody">
            <summary>
            Rigidbody used by this component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.MoveParent">
            <summary>
            If true and this component's <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is <see cref="T:WarWolfWorks.Interfaces.IEntityParentable"/>,
            it will move the parent instead.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.OnAwake">
            <summary>
            Unity's Awake method called by EntityComponent system.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.OnFixed">
            <summary>
            When overriding this class, make sure to call base.OnFixed(); inside it as it is what 
            calculates the time left in Velocities through <see cref="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.Time"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.OnUpdate">
            <summary>
            Base OnUpdate method applies UsedVelocity to <see cref="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.Rigidbody"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement2D.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the entity to the specified position.
            </summary>
            <param name="position">Position to which the entity will be moved.</param>
            <param name="respectPhysics">If true, the position moving will respect other colliders and will try not to go inside or past them, otherwise it will ignore that.</param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D">
            <summary>
            Base class used for 3D movement of an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>. (Requires a <see cref="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.Rigidbody"/> component) (Inheritable)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.Rigidbody">
            <summary>
            Rigidbody used by this component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.MoveParent">
            <summary>
            If true and this component's <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> is <see cref="T:WarWolfWorks.Interfaces.IEntityParentable"/>,
            it will move the parent instead.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.OnAwake">
            <summary>
            Unity's Awake method called by EntityComponent system.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.OnFixed">
            <summary>
            When overriding this class, make sure to call base.OnFixed(); inside it as it is what 
            calculates the time left in Velocities through <see cref="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement.Velocity.Time"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.OnUpdate">
            <summary>
            Base OnUpdate method applies UsedVelocity to <see cref="P:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.Rigidbody"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Movement.EntityMovement3D.MovePosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the entity to the specified position.
            </summary>
            <param name="position">Position to which the entity will be moved.</param>
            <param name="respectPhysics">If true, the position moving will respect other colliders and will try not to go inside or past them, otherwise it will ignore that.</param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.EntityRotation">
            <summary>
            Basic script for controling an entity's rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.EntityRotation.EntityMain">
            <summary>
            Entity using this <see cref="T:WarWolfWorks.EntitiesSystem.EntityRotation"/> component.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.EntityRotation.Update">
            <summary>
            Overrided <see cref="M:WarWolfWorks.Utility.Rotation.Update"/> method to do nothing; 
            This is to adapt this <see cref="T:WarWolfWorks.EntitiesSystem.EntityRotation"/> to an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>'s Execution order.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.HealthDamage">
            <summary>
            Base class to use with <see cref="T:WarWolfWorks.EntitiesSystem.EntityHealth"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.HealthDamage.AcceptableValue(System.Object)">
            <summary>
            Should determine if the type of object is correct.
            </summary>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.HealthDamage.FinalValue(System.Object,WarWolfWorks.EntitiesSystem.EntityHealth,System.Boolean@)">
            <summary>
            Returns the final calculated value.
            </summary>
            <param name="damage"></param>
            <param name="entity"></param>
            <param name="triggersImmunity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.HealthDamage.WarWolfWorks#Interfaces#IHealthDamage#FinalValue(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth,System.Boolean@)">
            <summary>
            Returns the final calculated value.
            </summary>
            <param name="damage"></param>
            <param name="health"></param>
            <param name="triggersImmunity"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory">
            <summary>
            Advanced Non-Fixed-Size Inventory for your Non-Fixed-Size Inventory needs.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.Item(System.Int32)">
            <summary>
            Returns the item at the current index; In case of an exception, returns null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.ItemsCount">
            <summary>
            Returns the amount of items currently inside the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.OnItemAdded">
            <summary>
            Invoked when an item is successfully added to the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.OnItemRemoved">
            <summary>
            Invoked when an item is successfully removed from the inventory.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.AddItem(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Adds an item to this inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.GetAllItems(System.Boolean)">
            <summary>
            Returns all items currently inside the inventory.
            </summary>
            <param name="clone"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.GetItem(System.String)">
            <summary>
            Returns the first item found under given name.
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.GetItem(System.Int32)">
            <summary>
            Returns the first item under given ID.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.GetItem(System.Predicate{WarWolfWorks.EntitiesSystem.Itemization.Item})">
            <summary>
            Returns an item based on given match.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.GetItemIndex(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Returns the index of an item currently inside the inventory; If no item was found, it will return -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.RemoveItem(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Removes an item from this inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.RemoveItem(System.Int32)">
            <summary>
            Removes an item from this inventory at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.FlexibleInventory.RemoveItem(System.Int32,WarWolfWorks.EntitiesSystem.Itemization.Item@)">
            <summary>
            Removes an item from this inventory based on index and returns it in out.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Itemization.Inventory">
            <summary>
            Advanced Fixed-Size Inventory for your Fixed-Size Inventory needs.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Inventory.InventorySize">
            <summary>
            The max capacity of the inventory. (Settable only through the inspector)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Inventory.ItemsCount">
            <summary>
            Returns the count of all inventory slots assigned with an Item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.FirstEmptyIndex">
            <summary>
            Gets the first slot index that doesn't contain an item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.FirstEmptyIndex(System.Int32)">
            <summary>
            Gets the first slot index that doesn't contain an item starting from specified index.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.FirstEmptyIndex(System.Int32,System.Int32)">
            <summary>
            Gets the first slot index that doesn't contain an item starting from specified index with specific count.
            </summary>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.FirstEmptyIndex(WarWolfWorks.Utility.IntRange)">
            <summary>
            Gets the first slot index that within given range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.GetAllItems(System.Boolean)">
            <summary>
            Returns all items held by this inventory.
            </summary>
            <param name="clone">If true, it will return a list of cloned Items, instead of the real ones.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.GetItem(System.String)">
            <summary>
            Gets the first item inside the Inventory with the given name.
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.GetItem(System.Int32)">
            <summary>
            Gets the first item inside the Inventory with the given ID.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.GetItem(System.Predicate{WarWolfWorks.EntitiesSystem.Itemization.Item})">
            <summary>
            Gets an Item through custom predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.GetItemIndex(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Gets the index of a given item inside the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Itemization.Inventory.OnItemAdded">
            <summary>
            Triggers when an item is added to the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Itemization.Inventory.OnItemRemoved">
            <summary>
            Triggers when an item is removed from the inventory. Int indicates it's index in the inventory.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Inventory.Item(System.Int32)">
            <summary>
            Returns the item under specified index.
            </summary>
            <param name="key"></param>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.InvalidCastException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.OnAwake">
            <summary>
            Initiates the inventory inside this method. (Sealed, if you want to use OnAwake, use <see cref="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.PostAwake"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.PostAwake">
            <summary>
            Call this instead of <see cref="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.OnAwake"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.AddItem(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Adds an Item to the first empty slot.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.AddItem(WarWolfWorks.EntitiesSystem.Itemization.Item,System.Int32)">
            <summary>
            Adds an Item to the specified index.
            </summary>
            <param name="item"></param>
            <param name="toIndex"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.AddItem(WarWolfWorks.EntitiesSystem.Itemization.Item,System.Int32,WarWolfWorks.EntitiesSystem.Itemization.Item@)">
            <summary>
            Adds an item to specified index regardless of if the index already has an item.
            If the an Item existed at specified index, it will be assigned to replacedItem.
            </summary>
            <param name="item"></param>
            <param name="toIndex"></param>
            <param name="replacedItem"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.RemoveItem(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Removes the specified item from Inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.RemoveItem(System.Int32)">
            <summary>
            Removes an Item inside the inventory under given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Inventory.RemoveItem(System.Int32,WarWolfWorks.EntitiesSystem.Itemization.Item@)">
            <summary>
            Removes an item from this inventory based on index and returns it in out.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Itemization.Item">
            <summary>
            Base class for Itemization in the WWWLibrary.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Item.Name">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Item.Description">
            <summary>
            Description of the item. (for In-Game use)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Item.Sprite">
            <summary>
            The item's UI.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Item.Rarity">
            <summary>
            Rarity of the item in integer value; You can use a custom enum value and cast it as an integer.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Itemization.Item.ID">
            <summary>
            Unique ID of this item.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Item.OnAddedToInventory(WarWolfWorks.Interfaces.IInventory)">
            <summary>
            Invoked when this item is added to an Inventory.
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Itemization.Item.OnRemovedFromInventory(WarWolfWorks.Interfaces.IInventory)">
            <summary>
            Invoked when this item is removed from an Inventory.
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile">
            <summary>
            Core class of the projectile system.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall">
            <summary>
            Used with <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.CallBehaviors(WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall,System.Object)"/>; It calls a method inside a <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior"/>
            according to it's name.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.Initiate">
            <summary>
            Calls <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Init(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.Update">
            <summary>
            Calls <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Update"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.Fixed">
            <summary>
            Calls <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.FixedUpdate"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.CollideEnter">
            <summary>
            Calls a custom method which triggers inside a <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/> parent's OnTriggerEnter method (2D or 3D).
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.CollideExit">
            <summary>
            Calls a custom method which triggers inside a <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/> parent's OnTriggerExit method (2D or 3D).
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.Destroy">
            <summary>
            Called inside <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Destroy(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)"/>, calls <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.OnDestroy"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior">
            <summary>
            Base behavioural class for <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/> behaviour.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Initiated">
            <summary>
            Initiated state of this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior"/>. (<see cref="T:WarWolfWorks.Interfaces.IParentInitiatable`1"/> implementation)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Parent">
            <summary>
            Parent of this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Init(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)">
            <summary>
            Initiates this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior"/>.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.OnInitiate">
            <summary>
            Called when the behavior is added to a <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Update">
            <summary>
            Called every in-game frame.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.FixedUpdate">
            <summary>
            Called every in-game physics frame.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.OnDestroy">
            <summary>
            Called when a <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/> is destroyed.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.ActiveProjectiles">
            <summary>
            List of all active projectiles.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.InactiveProjectiles">
            <summary>
            List of all inactive projectiles.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.GetActiveProjectiles">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all active projectiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.GetInactiveProjectiles">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all inactive projectiles.
            </summary>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.OnProjectileNew">
            <summary>
            Invoked when a <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.New method is called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.OnProjectileDestroy">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Destroy(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)"/> is succesfully called.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Populated">
            <summary>
            Returns true if <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Populate``1(System.Int32,System.Action{``0})"/> was previously called.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.PopulationType">
            <summary>
            What type the pool population was instantiated as.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.EntityMain">
            <summary>
            Owner of this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Active">
            <summary>
            Active state of this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behaviors">
            <summary>
            All behaviors of this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Position">
            <summary>
            Pointer to transform.position.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Rotation">
            <summary>
            Pointer to transform.rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Velocity">
            <summary>
            The velocity of this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.SceneSegregator">
            <summary>
            The scene <see cref="T:UnityEngine.GameObject"/> that holds all pooled projectiles.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Populate``1(System.Int32,System.Action{``0})">
            <summary>
            Populates the <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/> pool.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="population">How many projectiles will be instantiated in the pool.</param>
            <param name="OnInstantiate">This action is invoked when a Projectile is instantiated; Useful for adding components into the projectile.</param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.NewArgsSet(WarWolfWorks.EntitiesSystem.Projectiles.Projectile,WarWolfWorks.EntitiesSystem.Entity,System.Collections.Generic.IEnumerable{WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior})">
            <summary>
            Sets protected behaviors un-settable throught inherited members for any New/Instantiate methods.
            </summary>
            <param name="for"></param>
            <param name="entityMain"></param>
            <param name="behaviors"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.PostNew(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)">
            <summary>
            You are required to call this method at the end of a New/Instantiate method, as it set all required variables that are inaccessible through inherited members;
            Creating a projectile without calling this method will make the projectile behave inconsistently, or not at all.
            </summary>
            <param name="for"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.PreNew(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)">
            <summary>
            You are required to call this method at the beginning of a New/Instantiate method, as it set all required variables that are inaccessible through inherited members;
            Creating a projectile without calling this method will result in an exception.
            </summary>
            <param name="for"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.CallBehaviors(WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall,System.Object)">
            <summary>
            Call a behavior method of all behaviors with optional data.
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.SetBehaviors(System.Collections.Generic.IEnumerable{WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior})">
            <summary>
            Sets behaviors of this projectile, then calls <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.CallBehaviors(WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall,System.Object)"/> with <see cref="F:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall.Initiate"/>.
            </summary>
            <param name="behaviors"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.OnEnabled">
            <summary>
            <see cref="T:UnityEngine.MonoBehaviour"/>'s OnEnable equivalent.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Destroy(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)">
            <summary>
            Destroys a projectile.
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.EnumeratorCurrent">
            <summary>
            The current itteration of the Enumerator-like implementation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.EnumeratorMoveNext">
            <summary>
            Enumerator-like implementation for getting a new projectile for instantiation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.EnumeratorReset">
            <summary>
            Enumerator-like implementation to reset the itteration.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D">
            <summary>
            2D version of <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Behavior2D">
            <summary>
            2D version of <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Behavior2D.OnTriggerEnter(UnityEngine.Collider2D)">
            <summary>
            Called when <see cref="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Parent"/> collides with an object.
            </summary>
            <param name="collider"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Behavior2D.OnTriggerExit(UnityEngine.Collider2D)">
            <summary>
            Called when <see cref="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Parent"/> stops colliding with an object.
            </summary>
            <param name="collider"></param>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.SpriteRenderer">
            <summary>
            The <see cref="T:UnityEngine.SpriteRenderer"/> attached to this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Rigidbody2D">
            <summary>
            The <see cref="T:UnityEngine.Rigidbody2D"/> attached to this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Collider">
            <summary>
            The collider of this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Velocity">
            <summary>
            The velocity of this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D"/>'s rigidbody.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Populate(System.Int32)">
            <summary>
            Populates the projectile pool.
            </summary>
            <param name="population"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.New(WarWolfWorks.EntitiesSystem.Entity,UnityEngine.Vector2,UnityEngine.Quaternion,UnityEngine.Sprite,WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.Behavior2D[])">
            <summary>
            Instantiates a new <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D"/>.
            </summary>
            <param name="owner"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="sprite"></param>
            <param name="behaviors"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile2D.CallBehaviors(WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall,System.Object)">
            <summary>
            Calls behaviors accordingly to their 2D functionality.
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D">
            <summary>
            3D version of <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Behavior3D">
            <summary>
            3D version of <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Behavior3D.OnTriggerEnter(UnityEngine.Collider)">
            <summary>
            Called when <see cref="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Parent"/> collides with an object.
            </summary>
            <param name="collider"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Behavior3D.OnTriggerExit(UnityEngine.Collider)">
            <summary>
            Called when <see cref="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Behavior.Parent"/> stops colliding with an object.
            </summary>
            <param name="collider"></param>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.MeshFilter">
            <summary>
            The <see cref="T:UnityEngine.MeshFilter"/> attached to this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.MeshRenderer">
            <summary>
            The <see cref="T:UnityEngine.MeshRenderer"/> attached to this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Rigidbody">
            <summary>
            The <see cref="T:UnityEngine.Rigidbody"/> attached to this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Collider">
            <summary>
            The collider of this projectile.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Velocity">
            <summary>
            The velocity of this <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D"/>'s rigidbody.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Populate(System.Int32)">
            <summary>
            Populates the projectile pool.
            </summary>
            <param name="population"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.New(WarWolfWorks.EntitiesSystem.Entity,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Mesh,UnityEngine.Material[],WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.Behavior3D[])">
            <summary>
            Instantiates a new <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D"/>.
            </summary>
            <param name="owner"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="mesh"></param>
            <param name="meshMaterials"></param>
            <param name="behaviors"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile3D.CallBehaviors(WarWolfWorks.EntitiesSystem.Projectiles.Projectile.BehaviorCall,System.Object)">
            <summary>
            Calls behaviors accordingly to their 3D functionality.
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat">
            <summary>
            <see cref="T:WarWolfWorks.Interfaces.IStat"/> which is removed after a given countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.SetValue">
            <summary>
            Use this value to set the base value of this stat. (Set-Only)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.Stacking">
            <summary>
            How the Stat should be calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.Affections">
            <summary>
            Which stats will this stat interact with.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.Countdown">
            <summary>
            Starting countdown.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.#ctor(System.Single,System.Int32,System.Single,System.Int32[])">
            <summary>
            Create a Stat.
            </summary>
            <param name="value"></param>
            <param name="stacking"></param>
            <param name="countdown"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.#ctor(WarWolfWorks.EntitiesSystem.Statistics.CountdownStat)">
            <summary>
            Creates a duplicate of the given stat.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.#ctor(WarWolfWorks.EntitiesSystem.Statistics.CountdownStat,System.Single)">
            <summary>
            Creates a duplicate of the given stat with a different value.
            </summary>
            <param name="stat"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.Equals(System.Single)">
            <summary>
            Returns true if the Stat's value returns other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.CountdownStat)~System.Single">
            <summary>
            Returns the Stat's value implicitly.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.CountdownStat)~System.Int32">
            <summary>
            Returns the Stat's value implicitly as int.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.CountdownStat)~WarWolfWorks.EntitiesSystem.Statistics.Stat">
            <summary>
            Returns an equivalent Stat to this <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat"/>.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat.ToString">
            <summary>
            Returns the <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.CountdownStat"/>'s value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking">
            <summary>
            Enum value depicting <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking"/>'s stacking values. Useful when used with Editor's Enum List Displayer.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.Original">
            <summary>
            Stacking index: Used as base value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.Adder">
            <summary>
            Stacking index: All stats tagged will be added onto the original value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.StackingOriginalMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the original.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.StackingMultiplier">
            <summary>
            Stacking index: tagged will muliply the original value and Adder value. (Applies before StackingOriginalMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.OriginalMultiplier">
            <summary>
            Stacking index: Multiplies the original immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.Multiplier">
            <summary>
            Stacking index: Multiplies the original with adder values immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.StackingFullMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the total value after all multiplications (excluding FullMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking.FullMultiplier">
            <summary>
            Stacking index: Absolute multiplier.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat">
            <summary>
            Stat which uses <see cref="T:WarWolfWorks.Utility.LevelFloat"/> as value.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.Level">
            <summary>
            This stat's level.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.Values">
            <summary>
            All LevelValues of this stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.SetValue">
            <summary>
            Sets the default value of the <see cref="T:WarWolfWorks.Utility.LevelFloat"/> contained by this <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.Stacking">
            <summary>
            How is this LevelStat calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.Affections">
            <summary>
            Which stats will this LevelStat interact with.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.#ctor(System.Single,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates a <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/> with a default value, a level, stacking and affections.
            </summary>
            <param name="defaultVal"></param>
            <param name="level"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.#ctor(WarWolfWorks.Utility.LevelFloat,System.Int32,System.Int32[])">
            <summary>
            Creates a LevelStat instance with multiple affections.
            </summary>
            <param name="levelval"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.#ctor(WarWolfWorks.EntitiesSystem.Statistics.LevelStat,System.Int32)">
            <summary>
            Creates a duplicate of a LevelStat with the specified level.
            </summary>
            <param name="levelStat"></param>
            <param name="level"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.LevelStat)~System.Single">
            <summary>
            Returns the <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/>'s value implicitly.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.LevelStat)~System.Int32">
            <summary>
            Returns the <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/>'s value implicitly as int.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.LevelStat)~WarWolfWorks.EntitiesSystem.Statistics.Stat">
            <summary>
            Returns an equivalent Stat to this <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/>.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.op_Explicit(WarWolfWorks.EntitiesSystem.Statistics.LevelStat)~WarWolfWorks.Utility.LevelFloat">
            <summary>
            Returns explicitly the <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/>'s <see cref="T:WarWolfWorks.Utility.LevelFloat"/> value.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.ToString">
            <summary>
            Returns the <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.LevelStat"/>'s value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.Equals(System.Single)">
            <summary>
            Returns true if the LevelStat's value is equal to other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.LevelStat.Equals(WarWolfWorks.EntitiesSystem.Statistics.Stat)">
            <summary>
            Returns true if all <see cref="T:WarWolfWorks.Interfaces.IStat"/> variables from this LevelStat equals to all <see cref="T:WarWolfWorks.Interfaces.IStat"/> variables from other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.NonEntityUsage">
            <summary>
            Use this attribute if a Stat isn't always owned by an Entity.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.NonEntityUsage.NeverUsed">
            <summary>
            If true, it means that the stat will never be used by an Entity, not just temporary.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.NonEntityUsage.#ctor(System.Boolean)">
            <summary>
            Determines a Stat that may sometimes not be used by an Entity.
            </summary>
            <param name="neverUsed">If true, it means that the stat will never be used by an Entity, not just temporary.</param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.Stacking">
            <summary>
            Base class to use to apply to a <see cref="P:WarWolfWorks.EntitiesSystem.Statistics.Stats.Stacking"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.Stacking.AllStats">
            <summary>
            All stats of the parent <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.Stats"/> class.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.CalculatedValue(WarWolfWorks.Interfaces.IStat)">
            <summary>
            What will be used inside <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.Stats"/>.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.GetStatsByAffection(System.Int32)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.IStat"/> with the given affection from <see cref="P:WarWolfWorks.EntitiesSystem.Statistics.Stacking.AllStats"/>.
            </summary>
            <param name="affection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.GetStatsByAffection(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.IStat},System.Int32)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.IStat"/> with the given affection from a custom list.
            </summary>
            <param name="stats"></param>
            <param name="affection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.GetStatsByAffections(System.Int32[])">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.IStat"/> with the given affections from <see cref="P:WarWolfWorks.EntitiesSystem.Statistics.Stacking.AllStats"/>.
            </summary>
            <param name="affections"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.GetStatsByAffections(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.IStat},System.Int32[])">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.IStat"/> with the given affections from a custom list.
            </summary>
            <param name="stats"></param>
            <param name="affections"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.GetStatValuesByStacking(System.Int32)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.IStat"/> with the given stacking from <see cref="P:WarWolfWorks.EntitiesSystem.Statistics.Stacking.AllStats"/>.
            </summary>
            <param name="stacking"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.GetStatValuesByStacking(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.IStat},System.Int32)">
            <summary>
            Gets all <see cref="T:WarWolfWorks.Interfaces.IStat"/> with the given stacking from a custom list.
            </summary>
            <param name="stats"></param>
            <param name="stacking"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.Stat">
            <summary>
            Base class used for all <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> statistics.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.Stat.SetValue">
            <summary>
            Use this value to set the base value of this stat. (Set-Only)
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.Stat.Stacking">
            <summary>
            How the Stat should be calculated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.Stat.Affections">
            <summary>
            Which stats will this stat interact with.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.#ctor(System.Single,System.Int32,System.Int32[])">
            <summary>
            Create a Stat.
            </summary>
            <param name="value"></param>
            <param name="stacking"></param>
            <param name="affections"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.#ctor(WarWolfWorks.EntitiesSystem.Statistics.Stat)">
            <summary>
            Creates a duplicate of the given stat.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.#ctor(WarWolfWorks.EntitiesSystem.Statistics.Stat,System.Single)">
            <summary>
            Creates a duplicate of the given stat with a different value.
            </summary>
            <param name="stat"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.Equals(System.Single)">
            <summary>
            Returns true if the Stat's value returns other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.ToString">
            <summary>
            Returns the value in string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.Stat)~System.Single">
            <summary>
            Returns the Stat's value implicitly.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stat.op_Implicit(WarWolfWorks.EntitiesSystem.Statistics.Stat)~System.Int32">
            <summary>
            Returns the Stat's value implicitly as int.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.Stats">
            <summary>
            Class used by entities to get Stat values.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.CalculatedValue(WarWolfWorks.Interfaces.IStat)">
            <summary>
            Pointer to <see cref="M:WarWolfWorks.EntitiesSystem.Statistics.Stacking.CalculatedValue(WarWolfWorks.Interfaces.IStat)"/>.
            </summary>
            <param name="BaseStat"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.CalculatedValue(System.Single,System.Int32[])">
            <summary>
            Creates a temporary stat and uses it to retrieve the calculated value (Temporary Stat has a default stacking of 0).
            </summary>
            <param name="original"></param>
            <param name="affections"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.Stats.Stacking">
            <summary>
            
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Statistics.Stats.OnStatAdded">
            <summary>
            Invoked when a stat is added.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Statistics.Stats.OnStatRemoved">
            <summary>
            Invoked when a stat is removed.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statistics.Stats.EntityMain">
            <summary>
            Entity of which these stats belong to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.GetAllStats">
            <summary>
            Gets all stats returned in an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.AddStat(WarWolfWorks.Interfaces.IStat)">
            <summary>
            Adds an <see cref="T:WarWolfWorks.Interfaces.IStat"/> to stats to be calculated.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.RemoveStat(WarWolfWorks.Interfaces.IStat)">
            <summary>
            Removes the given <see cref="T:WarWolfWorks.Interfaces.IStat"/> from stats.
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.AddStats(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.IStat})">
            <summary>
            Adds a range of stats to calculated stats.
            </summary>
            <param name="stats"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.RemoveStats(System.Collections.Generic.IEnumerable{WarWolfWorks.Interfaces.IStat})">
            <summary>
            Removes a range of stats from calculated stats.
            </summary>
            <param name="stats"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.Contains(WarWolfWorks.Interfaces.IStat)">
            <summary>
            Returns true if the given <see cref="T:WarWolfWorks.Interfaces.IStat"/> was inside the calculated stats list.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking">
            <summary>
            Default stacking which is used if <see cref="P:WarWolfWorks.EntitiesSystem.Statistics.Stats.Stacking"/> is not set.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.Original">
            <summary>
            Stacking index: Used as base value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.Adder">
            <summary>
            Stacking index: All stats tagged will be added onto the original value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.StackingOriginalMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the original.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.StackingMultiplier">
            <summary>
            Stacking index: tagged will muliply the original value and Adder value. (Applies before StackingOriginalMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.OriginalMultiplier">
            <summary>
            Stacking index: Multiplies the original immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.Multiplier">
            <summary>
            Stacking index: Multiplies the original with adder values immediatly without stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.StackingFullMultiplier">
            <summary>
            Stacking index: All stats tagged will stack on themselves to form a final value, which will then multiply the total value after all multiplications (excluding FullMultiplier)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.FullMultiplier">
            <summary>
            Stacking index: Absolute multiplier.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking.CalculatedValue(WarWolfWorks.Interfaces.IStat)">
            <summary>
            Returns the calculated value. See <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.WWWStacking"/>'s constant values for more info.
            </summary>
            <param name="BaseStat"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier">
            <summary>
            The class which handles status application.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.Statuses">
            <summary>
            All statuses currently affecting the <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.GetAllStatuses">
            <summary>
            Returns all statuses affecting this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.GetAllResistances">
            <summary>
            Returns all resistances of this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.Locked">
            <summary>
            Locked state of the <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>. See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.OnLocked">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/> is locked.
            </summary>
        </member>
        <member name="E:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.OnUnlocked">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/> is unlocked.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.ContainsResistance(System.Type)">
            <summary>
            Returns true if a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/> contained in this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/> has <see cref="P:WarWolfWorks.EntitiesSystem.Statusing.Resistance.ResistantTo"/> equal to the given value.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.GetResistance(System.Type)">
            <summary>
            Returns a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/> of which <see cref="P:WarWolfWorks.EntitiesSystem.Statusing.Resistance.ResistantTo"/> is equal to the value given.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.AddStatus(WarWolfWorks.Interfaces.IStatus)">
            <summary>
            Adds a single status to affect this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.AddStatuses(WarWolfWorks.Interfaces.IStatus[])">
            <summary>
            Adds a params of Statuses to affect this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
            <param name="statuses"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.AddResistance(WarWolfWorks.EntitiesSystem.Statusing.Resistance)">
            <summary>
            Adds a resistance of a certain <see cref="T:WarWolfWorks.Interfaces.IStatus"/> to this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
            <param name="resistance"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.AddResistances(WarWolfWorks.EntitiesSystem.Statusing.Resistance[])">
            <summary>
            Adds a range of resistances using params.
            </summary>
            <param name="resistances"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.RemoveStatus(WarWolfWorks.Interfaces.IStatus,System.Boolean)">
            <summary>
            Removes a status which currently affects this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
            <param name="status"></param>
            <param name="ignoreOnEnd">If true, <see cref="M:WarWolfWorks.Interfaces.IStatus.OnEnd(WarWolfWorks.Interfaces.IStatusApplier)"/> will not be triggered.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.RemoveStatuses(System.Boolean,WarWolfWorks.Interfaces.IStatus[])">
            <summary>
            Removes statuses which currently affect this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
            <param name="ignoreOnEnd"></param>
            <param name="statuses">If true, <see cref="M:WarWolfWorks.Interfaces.IStatus.OnEnd(WarWolfWorks.Interfaces.IStatusApplier)"/> will not be triggered.</param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.RemoveResistance(WarWolfWorks.EntitiesSystem.Statusing.Resistance)">
            <summary>
            Removes a resistance from this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
            <param name="resistance"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.RemoveResistances(WarWolfWorks.EntitiesSystem.Statusing.Resistance[])">
            <summary>
            Removes a range of Resistances using params.
            </summary>
            <param name="resistances"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.OnFixed">
            <summary>
            Calls <see cref="M:WarWolfWorks.Interfaces.IStatus.OnTick(WarWolfWorks.Interfaces.IStatusApplier)"/> for all statuses currently applied to this <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance">
            <summary>
            Class used to give resistance towards <see cref="T:WarWolfWorks.Interfaces.IStatus"/>es.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.Statusing.Resistance.ResistantTo">
            <summary>
            Type of <see cref="T:WarWolfWorks.Interfaces.IStatus"/> which this resistance is affecting.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.Resistance.#ctor(System.Type)">
            <summary>
            Instantiate a new resistance class.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.Statusing.Resistance.#ctor(System.Type,System.Action{WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier},System.Action{WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier})">
            <summary>
            Instantiate a new resistance class with actions performed when added and removed from a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.EntityStatusApplier"/>. (can be null)
            </summary>
            <param name="to"></param>
            <param name="onadded"></param>
            <param name="onremoved"></param>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.Statusing.StatusOverlapType">
            <summary>
            Determines how the <see cref="T:WarWolfWorks.Interfaces.IStatus"/> is handled when a <see cref="T:WarWolfWorks.Interfaces.IStatus"/> of the same type was found inside a <see cref="T:WarWolfWorks.Interfaces.IStatus"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statusing.StatusOverlapType.ignore">
            <summary>
            Ignores this <see cref="T:WarWolfWorks.Interfaces.IStatus"/> and doesn't add it.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statusing.StatusOverlapType.add">
            <summary>
            Adds it regardless.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EntitiesSystem.Statusing.StatusOverlapType.replace">
            <summary>
            Replaces the current one with this one.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EntitiesSystem.ImmunityEffect">
            <summary>
            <see cref="T:UnityEngine.ScriptableObject"/> used for custom effect when an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> enters immunity through <see cref="T:WarWolfWorks.EntitiesSystem.EntityHealth"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.ImmunityEffect.ImmunityTime">
            <summary>
            Duration at which the current immunity will last.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.ImmunityEffect.ImmunityCountdown">
            <summary>
            The countdown/cooldown of the current immunity timer; To be used with ImmunityTime for percentage duration.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EntitiesSystem.ImmunityEffect.Parent">
            <summary>
            Parent of this <see cref="T:WarWolfWorks.EntitiesSystem.ImmunityEffect"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.ImmunityEffect.OnTrigger">
            <summary>
            What happens when Immunity first triggers.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.ImmunityEffect.OnEnd">
            <summary>
            What happens when Immunity stops.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.ImmunityEffect.OnAdded">
            <summary>
            What happens when Immunity is either added to a <see cref="T:WarWolfWorks.EntitiesSystem.EntityHealth"/>, or when it was already attached to it on instantiation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EntitiesSystem.ImmunityEffect.WhileTrigger">
            <summary>
            Equivalent to Unity's update method.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IAdvancedHealth">
            <summary>
            An advanced version of <see cref="T:WarWolfWorks.Interfaces.IHealth"/>.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IAdvancedHealth.OnDamaged">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.Interfaces.IAdvancedHealth.DamageHealth(System.Object)"/> was suiccessful.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.ImmunityDuration">
            <summary>
            Immunity duration in seconds.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.Defense">
            <summary>
            Defense applies to Damage calculation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.UsesImmunity">
            <summary>
            Determines if this instance implements Immunity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.IsImmune">
            <summary>
            Should determine when the immunity is triggered or not.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.Calculator">
            <summary>
            Separate component which should calculate the final value in <see cref="M:WarWolfWorks.Interfaces.IAdvancedHealth.DamageHealth(System.Object)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IAdvancedHealth.ImmunityEffect">
            <summary>
            Separate component which should be used with the immunity system.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAdvancedHealth.DamageHealth(System.Object)">
            <summary>
            What calculates health and triggers all other events in this interface.
            </summary>
            <param name="damage"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAdvancedHealth.TriggerImmunity(System.Single)">
            <summary>
            Method to trigger immunity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAdvancedHealth.StopImmunity">
            <summary>
            Stops an immunity triggered with <see cref="M:WarWolfWorks.Interfaces.IAdvancedHealth.TriggerImmunity(System.Single)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IAwake">
            <summary>
            Icludes OnAwake for <see cref="T:UnityEngine.MonoBehaviour"/>-like Awake() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IAwake.OnAwake">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Awake().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IColorable">
            <summary>
            Interface used by <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> to manage colors.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IColorable.ColorApplier">
            <summary>
            Color which will be applied by a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.ICoroutinable">
            <summary>
            Determines a component which uses a pointer to 
            <see cref="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/> and 
            <see cref="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ICoroutinable.StartCoroutine(System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Should point to <see cref="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
            <param name="routine"></param>
            <param name="verifier"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ICoroutinable.StopCoroutine(System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Should point to <see cref="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)"/>.
            </summary>
            <param name="routine"></param>
            <param name="verifier"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IDestroy">
            <summary>
            Icludes OnDestroyed for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnDestroy() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IDestroy.OnDestroyed">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnDestroy().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IEnableDisable">
            <summary>
            Icludes OnEnabled and OnDisabled for <see cref="T:UnityEngine.MonoBehaviour"/>-like OnEnable() and OnDisable() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IEnableDisable.OnEnabled">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnEnable().
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IEnableDisable.OnDisabled">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.OnDisable().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IEntity">
            <summary>
            Used to include a <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> component name EntityMain.
            Used by virtually every class in the WWWLibrary's premade Entity-related components.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IEntity.EntityMain">
            <summary>
            Parent entity of this component.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IEntityComponent">
            <summary>
            Used by <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>'s EntityComponent management. When using this,
            make sure not to use original MonoBehaviour methods and to add it into
            an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> through <see cref="M:WarWolfWorks.EntitiesSystem.Entity.InternalAddComponent(WarWolfWorks.Interfaces.IEntityComponent)"/>
            when the component is created/instantiated.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IEntityInitiate">
            <summary>
            Used for basic initiation of an object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IEntityInitiate.Init(WarWolfWorks.EntitiesSystem.Entity)">
            <summary>
            Initiates it.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IEntityParentable">
            <summary>
            Interface used for parent-like behaviour for entities and their components.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IEntityParentable.Parent">
            <summary>
            The entity's parent.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IEntityParentable.OnParentSet">
            <summary>
            Invokes when the Parent is set. T1 is child, T2 is Parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IFixedUpdate">
            <summary>
            Icludes OnFixed for <see cref="T:UnityEngine.MonoBehaviour"/>-like FixedUpdate() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IFixedUpdate.OnFixed">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.FixedUpdate().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IHealth">
            <summary>
            Basic interface for implementing a Health class.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IHealth.OnDeath">
            <summary>
            Invoked when <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/> reaches 0.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IHealth.OnHealthAdded">
            <summary>
            Invoked when <see cref="M:WarWolfWorks.Interfaces.IHealth.AddHealth(System.Single)"/> is invoked. Float value is the health added.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IHealth.MaxHealth">
            <summary>
            Value that clamps <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth">
            <summary>
            The current health.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealth.AddHealth(System.Single)">
            <summary>
            Adds to <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealth.RemoveHealth(System.Single)">
            <summary>
            Removes from <see cref="P:WarWolfWorks.Interfaces.IHealth.CurrentHealth"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IHealthDamage">
            <summary>
            Interface used to calcucate health for a Health system.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealthDamage.FinalValue(System.Object,WarWolfWorks.Interfaces.IAdvancedHealth,System.Boolean@)">
            <summary>
            Value that will be used to remove health with.
            </summary>
            <param name="damage"></param>
            <param name="entity"></param>
            <param name="triggerImmunity"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IHealthDamage.AcceptableValue(System.Object)">
            <summary>
            Determines if the value type passed is correct.
            </summary>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IImmunityEffect`1">
            <summary>
            Interface used for custom effect when an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/> enters immunity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.OnAdded">
            <summary>
            Invoked when this immunity effect is added to a <see cref="T:WarWolfWorks.Interfaces.IAdvancedHealth"/>, or when it is initiated with it.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.OnTrigger">
            <summary>
            This is invoked when immunity is first triggered.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.WhileTrigger">
            <summary>
            Invoked for as long as the immunity is active.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IImmunityEffect`1.OnEnd">
            <summary>
            This is invoked when immunity ends.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IIndexMenu">
            <summary>
            Interface for implementing a Index-based Menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IIndexMenu.MenuIndex">
            <summary>
            Current index of the menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IIndexMenu.Events">
            <summary>
            All events of this <see cref="T:WarWolfWorks.Interfaces.IIndexMenu"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInitiatable">
            <summary>
            Used for basic initiation of an object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInitiatable.Init">
            <summary>
            Initiates it.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInitiated">
            <summary>
            Interface to be implemented for an initiatable component/object.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IInitiated.Initiated">
            <summary>
            Returns the initiated state of this <see cref="T:WarWolfWorks.Interfaces.IInitiated"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInstantiatable">
            <summary>
            Used with an Unity Object to be called right after (preferably still inside) <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object)"/>.
            (Compatible with <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.InstantiateList``1(System.Collections.Generic.IEnumerable{``0})"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInstantiatable.PostInstantiate">
            <summary>
            Instantiate sub-objects which are not automatically instantiated by <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object)"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IInventory">
            <summary>
            Interface for implementing an inventory.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IInventory.Item(System.Int32)">
            <summary>
            Returns the item at given index.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.AddItem(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Adds an item to the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.RemoveItem(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Removes an item from the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the inventory based on index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.RemoveItem(System.Int32,WarWolfWorks.EntitiesSystem.Itemization.Item@)">
            <summary>
            Removes an item from inventory based on index and returns it in out.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.GetItem(System.String)">
            <summary>
            Returns the first item under the given name.
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.GetItem(System.Int32)">
            <summary>
            Returns the first item under the given index.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.GetItem(System.Predicate{WarWolfWorks.EntitiesSystem.Itemization.Item})">
            <summary>
            Returns an item based on match given.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.GetItemIndex(WarWolfWorks.EntitiesSystem.Itemization.Item)">
            <summary>
            Returns the index of the item given inside the inventory; If no item was found, it will return -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IInventory.OnItemAdded">
            <summary>
            Invoked when an item is successfully added to the inventory.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.IInventory.OnItemRemoved">
            <summary>
            Invoked when an item is successfully removed from the inventory.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IInventory.GetAllItems(System.Boolean)">
            <summary>
            Returns all items inside the inventory.
            </summary>
            <param name="clone"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IInventory.ItemsCount">
            <summary>
            Returns the amount of items currently inside the inventory.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.ILateUpdate">
            <summary>
            Icludes OnLate for <see cref="T:UnityEngine.MonoBehaviour"/>-like LateUpdate() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ILateUpdate.OnLate">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.LateUpdate().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.ILockable">
            <summary>
            Interface used for "locking" a component.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.ILockable.Locked">
            <summary>
            Determimes if the current object is locked.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.ILockable.SetLock(System.Boolean)">
            <summary>
            Sets the lock.
            </summary>
            <param name="to"></param>
        </member>
        <member name="E:WarWolfWorks.Interfaces.ILockable.OnLocked">
            <summary>
            Called when SetLock was called as true.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Interfaces.ILockable.OnUnlocked">
            <summary>
            Called when SetLock was called as false.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IParentable`1">
            <summary>
            Class for a parenting system.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IParentable`1.Parent">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IParentInitiatable`1">
            <summary>
            Used for basic initiation of an object.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IParentInitiatable`1.Init(`0)">
            <summary>
            Initiates it.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRotation.GetDestination">
            <summary>
            Rotation towards which this <see cref="T:WarWolfWorks.Interfaces.IRotation"/> is destinated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotation.DefaultEulerRotation">
            <summary>
            The default rotation of the <see cref="T:WarWolfWorks.Interfaces.IRotation"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotation.CurrentRotation">
            <summary>
            Where this <see cref="T:WarWolfWorks.Interfaces.IRotation"/> currently is.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IRotation.RotationSpeed">
            <summary>
            Speed at which this <see cref="T:WarWolfWorks.Interfaces.IRotation"/> is rotating.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRotation.SetRotation(UnityEngine.Vector3)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Interfaces.IRotation"/>.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IRotation.SetRotation(UnityEngine.Quaternion)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Interfaces.IRotation"/> in euler angles.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IScrollablePercentMenu">
            <summary>
            Used to make a scroll menu based on min-max position based on a percentage.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.MinPosition">
            <summary>
            Goes towards this position the closer <see cref="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent"/> is to 0.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.MaxPosition">
            <summary>
            Goes towards this position the closer <see cref="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent"/> is to 1.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.ScrollHolder">
            <summary>
            <see cref="T:UnityEngine.RectTransform"/> which will be moved based on <see cref="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IScrollablePercentMenu.Percent">
            <summary>
            Percentage at which this menu is scrolled. (percentage in 0-1)
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IStacking">
            <summary>
            Interface used for calculating stats inside an <see cref="T:WarWolfWorks.EntitiesSystem.Entity"/>'s <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.Stats"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStacking.CalculatedValue(WarWolfWorks.Interfaces.IStat)">
            <summary>
            Final value that will be returned.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStacking.Parent">
            <summary>
            Who's stats should this stacking calculate.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IStart">
            <summary>
            Icludes OnStart for <see cref="T:UnityEngine.MonoBehaviour"/>-like Start() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStart.OnStart">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Start().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IStat">
            <summary>
            Base interface used for Stat calculations.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStat.Value">
            <summary>
            <see cref="T:System.Single"/> Value returned by this stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStat.SetValue">
            <summary>
            Used to set the base value of the Stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStat.Affections">
            <summary>
            Which other stats will it interact with.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStat.Stacking">
            <summary>
            How the value should be calculated.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStat.OnAdded(WarWolfWorks.EntitiesSystem.Statistics.Stats)">
            <summary>
            Invoked when added to <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.Stats"/> with <see cref="M:WarWolfWorks.EntitiesSystem.Statistics.Stats.AddStat(WarWolfWorks.Interfaces.IStat)"/>.
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IStatus">
            <summary>
            Core class used for all statuses.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStatus.OverlapType">
            <summary>
            Determines how this <see cref="T:WarWolfWorks.Interfaces.IStatus"/> will be treated when it is added to an <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/>
            when an <see cref="T:WarWolfWorks.Interfaces.IStatus"/> of the same type is detected.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStatus.MaxDuration">
            <summary>
            The duration at which the status will start with.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStatus.CurrentDuration">
            <summary>
            The current countdown for this <see cref="T:WarWolfWorks.Interfaces.IStatus"/>' duration.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatus.OnStart(WarWolfWorks.Interfaces.IStatusApplier)">
            <summary>
            Invokes when the status is first added to a <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/>.
            </summary>
            <param name="of"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatus.OnEnd(WarWolfWorks.Interfaces.IStatusApplier)">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.Interfaces.IStatus"/> has stayed inside a <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/> for <see cref="P:WarWolfWorks.Interfaces.IStatus.MaxDuration"/>. 
            </summary>
            <param name="of"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatus.OnTick(WarWolfWorks.Interfaces.IStatusApplier)">
            <summary>
            Invoked every in-game physics frame.
            </summary>
            <param name="of"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IStatusApplier">
            <summary>
            The interface used as implementation for <see cref="T:WarWolfWorks.Interfaces.IStatus"/> handling. (Inherits from <see cref="T:WarWolfWorks.Interfaces.IEntity"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStatusApplier.GetAllStatuses">
            <summary>
            Returns a list for all <see cref="T:WarWolfWorks.Interfaces.IStatus"/>es affecting this <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Interfaces.IStatusApplier.GetAllResistances">
            <summary>
             Returns a list for all <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/>s affecting this <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.ContainsResistance(System.Type)">
            <summary>
            Returns true when a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/>'s <see cref="P:WarWolfWorks.EntitiesSystem.Statusing.Resistance.ResistantTo"/> is the same as type given.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.GetResistance(System.Type)">
            <summary>
            Returns a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/> based on <see cref="P:WarWolfWorks.EntitiesSystem.Statusing.Resistance.ResistantTo"/>.
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.AddStatus(WarWolfWorks.Interfaces.IStatus)">
            <summary>
            Adds an <see cref="T:WarWolfWorks.Interfaces.IStatus"/> to the list of <see cref="T:WarWolfWorks.Interfaces.IStatus"/>es affecting this <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/>.
            It also triggers <see cref="M:WarWolfWorks.Interfaces.IStatus.OnStart(WarWolfWorks.Interfaces.IStatusApplier)"/> based on <see cref="P:WarWolfWorks.Interfaces.IStatus.OverlapType"/>.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.AddStatuses(WarWolfWorks.Interfaces.IStatus[])">
            <summary>
            Does the same as <see cref="M:WarWolfWorks.Interfaces.IStatusApplier.AddStatus(WarWolfWorks.Interfaces.IStatus)"/> for a params of <see cref="T:WarWolfWorks.Interfaces.IStatus"/>es.
            </summary>
            <param name="statuses"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.AddResistance(WarWolfWorks.EntitiesSystem.Statusing.Resistance)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/> to the list of <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/>s affecting this <see cref="T:WarWolfWorks.Interfaces.IStatusApplier"/>.
            </summary>
            <param name="resistance"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.AddResistances(WarWolfWorks.EntitiesSystem.Statusing.Resistance[])">
            <summary>
            Does the same as <see cref="M:WarWolfWorks.Interfaces.IStatusApplier.AddResistances(WarWolfWorks.EntitiesSystem.Statusing.Resistance[])"/> for a params of <see cref="T:WarWolfWorks.Interfaces.IStatus"/>es.
            </summary>
            <param name="resistances"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.RemoveStatus(WarWolfWorks.Interfaces.IStatus,System.Boolean)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.Interfaces.IStatus"/> from the list of affecting statuses.
            </summary>
            <param name="status"></param>
            <param name="ignoreOnEnd">If true, <see cref="M:WarWolfWorks.Interfaces.IStatus.OnEnd(WarWolfWorks.Interfaces.IStatusApplier)"/> will be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.RemoveStatuses(System.Boolean,WarWolfWorks.Interfaces.IStatus[])">
            <summary>
            Does the same as <see cref="M:WarWolfWorks.Interfaces.IStatusApplier.RemoveStatus(WarWolfWorks.Interfaces.IStatus,System.Boolean)"/> for a params of <see cref="T:WarWolfWorks.Interfaces.IStatus"/>es.
            </summary>
            <param name="ignoreOnEnd"></param>
            <param name="statuses"></param>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.RemoveResistance(WarWolfWorks.EntitiesSystem.Statusing.Resistance)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/> from the list of affecting <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/>s.
            </summary>
            <param name="resistance"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IStatusApplier.RemoveResistances(WarWolfWorks.EntitiesSystem.Statusing.Resistance[])">
            <summary>
            Same as <see cref="M:WarWolfWorks.Interfaces.IStatusApplier.RemoveStatuses(System.Boolean,WarWolfWorks.Interfaces.IStatus[])"/> for a params of <see cref="T:WarWolfWorks.EntitiesSystem.Statusing.Resistance"/>s.
            </summary>
            <param name="resistances"></param>
        </member>
        <member name="T:WarWolfWorks.Interfaces.IUpdate">
            <summary>
            Icludes OnUpdate for <see cref="T:UnityEngine.MonoBehaviour"/>-like Update() method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Interfaces.IUpdate.OnUpdate">
            <summary>
            Equivalent to <see cref="T:UnityEngine.MonoBehaviour"/>.Update().
            </summary>
        </member>
        <member name="T:WarWolfWorks.Security.EntityException">
            <summary>
            Exception used by the entity system.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Security.ProjectileException">
            <summary>
            Used with <see cref="T:WarWolfWorks.Security.ProjectileException"/> for all unallowed operations.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Security.ProjectileException.Message">
            <summary>
            The message of the unallowed operation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Security.ProjectileException.#ctor(WarWolfWorks.Security.ProjectileExceptionType)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Security.ProjectileException"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:WarWolfWorks.Security.ProjectileExceptionType">
            <summary>
            Used with <see cref="T:WarWolfWorks.Security.ProjectileException"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.ProjectileExceptionType.UnpopulatedProjectileNew">
            <summary>
            <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.New was called when <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Populate``1(System.Int32,System.Action{``0})"/> was never called.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.ProjectileExceptionType.PopulationLessThanOne">
            <summary>
            <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.Populate``1(System.Int32,System.Action{``0})"/> was given a population lesser than one.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.ProjectileExceptionType.InstantiatedWithoutPostNew">
            <summary>
            <see cref="T:WarWolfWorks.EntitiesSystem.Projectiles.Projectile"/>.New was called when <see cref="M:WarWolfWorks.EntitiesSystem.Projectiles.Projectile.PostNew(WarWolfWorks.EntitiesSystem.Projectiles.Projectile)"/> was not called at the end of it.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Security.StreamingException">
            <summary>
            Exception thrown in case of an error in <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Security.StreamingException.Message">
            <summary>
            Message thrown based on <see cref="T:WarWolfWorks.Security.StreamingResult"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Security.StreamingException.Result">
            <summary>
            Result of this exception.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Security.StreamingException.#ctor(WarWolfWorks.Security.StreamingResult)">
            <summary>
            Throws a <see cref="T:WarWolfWorks.Security.StreamingException"/> based on given <see cref="T:WarWolfWorks.Security.StreamingResult"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:WarWolfWorks.Security.StreamingResult">
            <summary>
            Code of a <see cref="T:WarWolfWorks.Security.StreamingException"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.OK">
            <summary>
            No exception.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATEGORY_PASSWORD_MISSMATCH">
            <summary>
            The category's password was not the same as it's variable.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.DEFAULT_PATH_NULL">
            <summary>
            The category's default path was used without being set.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_ARG">
            <summary>
            One or more string values given inside a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> were invalid or null.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_CATALOG">
            <summary>
            A saving catalog was used to load a variable or vice-versa.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATALOG_MISSMATCH_CATEGORY">
            <summary>
            A SaveAll method was called where all catalogs did not have the same Category value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATALOG_MISSMATCH_PASSWORD">
            <summary>
            A SaveAll method was called where all catalogs did not have the same Password value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.CATALOG_MISSMATCH_FILEPATH">
            <summary>
            A SaveAll method was called where all catalogs did not have the same Path value.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_CATALOG_COLLECTION_SIZE">
            <summary>
            A SaveAll method was called where the catalog collection size was null or lesser than 2.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Security.StreamingResult.INVALID_COLLECTION_SIZE">
            <summary>
            Attempted to create multiple catalogs using <see cref="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Savers(System.String,System.String,System.String[],System.String[])"/> where 
            the length of names did not match the length of values.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Threading.ThreadingUtilities">
            <summary>
            Contains various utilities to make your life easier with Unity's partial non-support of multithreading.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Threading.ThreadingUtilities.QueueOnMainThread(System.Action)">
            <summary>
            Queues an action to the main thread.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.Threading.ThreadingUtilities.RunAsync(System.Action)">
            <summary>
            Runs an action on a separate thread.
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:WarWolfWorks.UI.ConsoleMenu">
            <summary>
            UI display of the <see cref="T:WarWolfWorks.Debugging.WWWConsole"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.ConsoleMenu.ConsoleInputText">
            <summary>
            Text of the console's input.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ConsoleMenu.Awake">
            <summary>
            Sets the console up.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.ConsoleMenu.OnActivate">
            <summary>
            Updates the size of the console and the scroll position.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent">
            <summary>
            Premade <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> with basic utilities.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.Graphics">
            <summary>
            Graphics assigned through the inspector.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.FocusedColor">
            <summary>
            Colors used with <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused"/> and <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.UnfocusedColor">
            <summary>
            Colors used with <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused"/> and <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.MouseIsInside">
            <summary>
            Returns true if the mouse is currently inside this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s graphic.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.Focused">
            <summary>
            Returns true if this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> is currently focused by it's parent though <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.EventOnPointerClick">
            <summary>
            Invokes this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s activation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.EventOnPointerEnter">
            <summary>
            Sets the index of the parent to this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/>'s index; Make sure to include base.EventOnPointerEnter() at the start of the method when overriding
            to make this work properly.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.EventOnPointerExit">
            <summary>
            Make sure to include base.EventOnPointerExit() at the start of the method when overriding
            to make this work properly.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnIndexChanged">
            <summary>
            Calls <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused"/> or <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused"/> based on the Parent's <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnFocused">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> is first focused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent.OnUnfocused">
            <summary>
            Invoked when this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> looses focus.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent">
            <summary>
            Inherit this class to make <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu"/> events like play, options, exit, etc...
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.Parent">
            <summary>
            Menu which uses this event.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.IndexInMenu">
            <summary>
            Index if this event inside it's parent.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent">
            <summary>
            Unity EventTrigger component attached to this IndexEvent. 
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.EventOnPointerClick">
            <summary>
            Added on this <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent"/> PointerClick event.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.EventOnPointerEnter">
            <summary>
            Added on this <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent"/> PointerEnter event.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.EventOnPointerExit">
            <summary>
            Added on this <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.GUIEvent"/> PointerExit event.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnIndexChanged">
            <summary>
            Invoked when the index of the parent menu is changed.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnActivate(System.Object)">
            <summary>
            Invoked when this menu is activated/called through the game.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnRemove">
            <summary>
            Invoked when this menu is removed from it's parent.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu">
            <summary>
            Indexed menu which implements various utility for handling a Index-based menu. Uses <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> to make menu choices.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex">
            <summary>
            Current index of this menu.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.GetIndexEventCount">
            <summary>
            Returns how many <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> are attached to this <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.InteractibleRange">
            <summary>
            Limits the <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> to this range.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.IncreasesIndex">
            <summary>
            When this method returns true, <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> will increase by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.DecreasesIndex">
            <summary>
            When this method returns true, <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> will decrease by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.ActivatesIndexEvent">
            <summary>
            When this method returns true, it will invoke <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent.OnActivate(System.Object)"/> at the current index; Argument passed is 0.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Events">
            <summary>
            All events held/used by this menu.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.OnIndexChanged(System.Int32)">
            <summary>
            Invoked when <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.MenuIndex"/> is changed.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.AddIndexEvent(WarWolfWorks.UI.MenusSystem.Assets.IndexEvent)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> to this menu's events.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.AddIndexEvent(WarWolfWorks.UI.MenusSystem.Assets.IndexEvent,System.Int32)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> to this menu's events at the specified index.
            </summary>
            <param name="event"></param>
            <param name="at"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.RemoveIndexEvent(WarWolfWorks.UI.MenusSystem.Assets.IndexEvent)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> from this menu's events.
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.RemoveIndexEvent(System.Int32)">
            <summary>
            Removes a <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexEvent"/> from this menu's events.
            </summary>
            <param name="at"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Awake">
            <summary>
            Initiates all events.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.Update">
            <summary>
            Handles <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.IncreasesIndex"/> and <see cref="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu.DecreasesIndex"/>; When overriding, make sure to include base.Update() if you want this to be implemented by default.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent">
            <summary>
            <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent"/> which inherits from <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.IndexMenu"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.scrollHolder">
            <summary>
            UI Rect moved.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.MinPosition">
            <summary>
            Pointer to minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.MaxPosition">
            <summary>
            Pointer minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.ScrollHolder">
            <summary>
            UI Rect moved.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.Percent">
            <summary>
            The current percentage of this menu. (Clamped 0-1)
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.OriginalRectSize">
            <summary>
            Rect min and max anchores stored in a vector4. Sorted as follows: anchorMin.x, anchorMin.y, anchorMax.x, anchorMax.y.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.CurrentRectSize">
            <summary>
            Returns current rect size.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.Start">
            <summary>
            Gets the <see cref="F:WarWolfWorks.UI.MenusSystem.Assets.IndexMenuScrollPercent.scrollHolder"/>'s size.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent">
            <summary>
            Menu which scroll a <see cref="T:UnityEngine.RectTransform"/> based on a percentage.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.MinPosition">
            <summary>
            Pointer to minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.MaxPosition">
            <summary>
            Pointer minimal Position assigned in the inspector.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.scrollHolder">
            <summary>
            UI Rect moved.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.ScrollHolder">
            <summary>
            <see cref="T:UnityEngine.RectTransform"/> which is moved based on <see cref="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.Percent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.OriginalRectSize">
            <summary>
            Rect min and max anchores stored in a vector4. Sorted as follows: anchorMin.x, anchorMin.y, anchorMax.x, anchorMax.y.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.CurrentRectSize">
            <summary>
            Returns current rect size.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.Percent">
            <summary>
            The current percentage of this menu. (Clamped 0-1)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.Start">
            <summary>
            Gets the <see cref="F:WarWolfWorks.UI.MenusSystem.Assets.ScrollMenuPercent.scrollHolder"/>'s size.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MenusSystem.Menu">
            <summary>
            Core class for handling Menus; All Menus have a Holder which determine a large proportion of the Menu's behaviour (like IsActive),
            It is best practice to put a menu script on the Canvas GameObject, and put the Holder as child of the Canvas.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Menu.AllMenus">
            <summary>
            All menus that are currently in the scene.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MenusSystem.Menu.Holder">
            <summary>
            The parent transform which holds all elements of this menu.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.MenusSystem.Menu.OnActivated">
            <summary>
            Triggers when this menu is activated.
            </summary>
        </member>
        <member name="E:WarWolfWorks.UI.MenusSystem.Menu.OnDeactivated">
            <summary>
            Triggers when this menu is deactivated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MenusSystem.Menu.IsActive">
            <summary>
            Determines if the menu is currently active. (Pointer to Holder.gameObject.activeInHierarchy)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetHolder">
            <summary>
            Returns the Holder of this Menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetMenu``1">
            <summary>
            Returns a menu of the given T type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.GetMenu(System.Type)">
            <summary>
            Returns a menu of given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.OnActivate">
            <summary>
            Invoked when this menu is activated. (Invoked before <see cref="E:WarWolfWorks.UI.MenusSystem.Menu.OnActivated"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.OnDeactivate">
            <summary>
            Invoked when this menu is deactivated. (Invoked before <see cref="E:WarWolfWorks.UI.MenusSystem.Menu.OnDeactivated"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.ActivateMenu">
            <summary>
            Activates this menu.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateMenu">
            <summary>
            Deactivates this menu.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.ActivateMenu``1">
            <summary>
            Activates the menu of given T type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateMenu``1">
            <summary>
            Deactivates the menu of given T type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.DeactivateAllMenus">
            <summary>
            Deactivates all menus.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.Awake">
            <summary>
            Adds this menu to the <see cref="F:WarWolfWorks.UI.MenusSystem.Menu.AllMenus"/> list; When overriding, make sure to include base.Awake().
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MenusSystem.Menu.Finalize">
            <summary>
            Removes this menu from <see cref="F:WarWolfWorks.UI.MenusSystem.Menu.AllMenus"/> list.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MouseGUI">
            <summary>
            Displays an image right next to the cursor.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MouseGUI.MouseGraphic">
            <summary>
            Graphic to be displayed in <see cref="T:WarWolfWorks.UI.MouseGUI"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.AnchoredSize">
            <summary>
            Anchored size of this <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseSprite">
            <summary>
            Sprite of this <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.SpriteColor">
            <summary>
            Color of the <see cref="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseSprite"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseText">
            <summary>
            Text of this <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.TextColor">
            <summary>
            Color of <see cref="F:WarWolfWorks.UI.MouseGUI.MouseGraphic.MouseText"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.MouseGraphic.#ctor(UnityEngine.Vector2,UnityEngine.Sprite,System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> which displays both a sprite and text.
            </summary>
            <param name="anchorSize"></param>
            <param name="sprite"></param>
            <param name="text"></param>
            <param name="spriteColor"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.MouseGraphic.#ctor(UnityEngine.Vector2,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> which displays a sprite.
            </summary>
            <param name="anchorSize"></param>
            <param name="sprite"></param>
            <param name="spriteColor"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.MouseGraphic.#ctor(UnityEngine.Vector2,System.String,UnityEngine.Color)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> which displays text.
            </summary>
            <param name="anchorSize"></param>
            <param name="text"></param>
            <param name="textColor"></param>
        </member>
        <member name="P:WarWolfWorks.UI.MouseGUI.CurrentlyQueued">
            <summary>
            Returns the currently displayed Sprite/Color.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.AddToQueue(WarWolfWorks.UI.MouseGUI.MouseGraphic)">
            <summary>
            Adds the sprite to the queue of images to be displayed.
            </summary>
            <param name="graphic"></param>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.RemoveFromQueue">
            <summary>
            Removes the currently displayed <see cref="T:WarWolfWorks.UI.MouseGUI.MouseGraphic"/> from queue.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MouseGUI.RemoveFromQueue(System.Predicate{WarWolfWorks.UI.MouseGUI.MouseGraphic})">
            <summary>
            Removes a specific graphic from queue.
            </summary>
            <param name="graphic"></param>
        </member>
        <member name="T:WarWolfWorks.UI.MoveableBar">
            <summary>
            A bar/tab that allows you to move a menu using your mouse drag.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MoveableBar.FreezeStyle">
            <summary>
            Which axis should freeze from any <see cref="T:WarWolfWorks.UI.MoveableBar"/> movement.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.FreezeStyle.None">
            <summary>
            Freemove.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.FreezeStyle.X">
            <summary>
            Frozen on the X axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.FreezeStyle.Y">
            <summary>
            Frozen on the Y axis.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.MoveableBar.Confinement">
            <summary>
            How the <see cref="T:WarWolfWorks.UI.MoveableBar"/> is confined.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Confinement.None">
            <summary>
            Not confined.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Confinement.SnapParent">
            <summary>
            Clamped to it's parent when released.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Confinement.HardParent">
            <summary>
            Clamps to it's parent constantly.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.MovableBar">
            <summary>
            Bar to be used as the "interactor".
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.UIToMove">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> to move with the bar.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Freeze">
            <summary>
            The <see cref="T:WarWolfWorks.UI.MoveableBar.FreezeStyle"/> of this <see cref="T:WarWolfWorks.UI.MoveableBar"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.OriginalRectSize">
            <summary>
            Rect min and max anchores stored in a vector4. Sorted as follows: anchorMin.x, anchorMin.y, anchorMax.x, anchorMax.y.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.CurrentRectSize">
            <summary>
            Returns current rect size.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.LastRectSize">
            <summary>
            Last position at which anchors were before the window was released.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.MouseOffset">
            <summary>
            Position at which the mouse is relative to the bar.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.MoveableBar.IsOnBar">
            <summary>
            Returns true if the window is currently moved.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.MoveableBar.Clamping">
            <summary>
            If true, the menu will snap back to screen view when released.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.MoveableBar.CanMoveUI">
            <summary>
            Returns true if it can drag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.UI.MoveableBar.SetRectDefaultSizes">
            <summary>
            Sets <see cref="P:WarWolfWorks.UI.MoveableBar.OriginalRectSize"/> and <see cref="P:WarWolfWorks.UI.MoveableBar.LastRectSize"/> to <see cref="P:WarWolfWorks.UI.MoveableBar.CurrentRectSize"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.UI.Subtitle">
            <summary>
            Used with <see cref="T:WarWolfWorks.UI.Subtitles"/> to display text on the screen.
            </summary>
        </member>
        <member name="F:WarWolfWorks.UI.Subtitle.Text">
            <summary>
            The <see cref="T:TMPro.TextMeshProUGUI"/> object assigned to this <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Content">
            <summary>
            Currently displayed text.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Countdown">
            <summary>
            The assigned countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.CurrentCountdown">
            <summary>
            The current countdown of this <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Loops">
            <summary>
            If true, <see cref="T:WarWolfWorks.UI.Subtitles"/> will put <see cref="P:WarWolfWorks.UI.Subtitle.CurrentCountdown"/> back to <see cref="P:WarWolfWorks.UI.Subtitle.Countdown"/> instead of removing it.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Gradient">
            <summary>
            The gradient assigned to this <see cref="T:WarWolfWorks.UI.Subtitle"/>. <see cref="F:WarWolfWorks.UI.Subtitle.Text"/>'s color is assigned with <see cref="M:UnityEngine.Gradient.Evaluate(System.Single)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.AnchorPosition">
            <summary>
            The anchored position <see cref="F:WarWolfWorks.UI.Subtitle.Text"/> is set to.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitle.Progress01">
            <summary>
            Returns <see cref="P:WarWolfWorks.UI.Subtitle.CurrentCountdown"/> / <see cref="P:WarWolfWorks.UI.Subtitle.Countdown"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.Reset(System.String,UnityEngine.Gradient)">
            <summary>
            Resets the <see cref="T:WarWolfWorks.UI.Subtitle"/>'s countdown and assigns it with new content and a new gradient.
            </summary>
            <param name="newContent"></param>
            <param name="newGradient"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.#ctor(System.String,UnityEngine.Vector4,System.Single,UnityEngine.Gradient,System.Boolean)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.UI.Subtitle"/>.
            </summary>
            <param name="content"></param>
            <param name="anchors"></param>
            <param name="countdown"></param>
            <param name="gradient"></param>
            <param name="loops"></param>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitle.#ctor(WarWolfWorks.UI.Subtitle)">
            <summary>
            Creates a copy of another <see cref="T:WarWolfWorks.UI.Subtitle"/>; Copies everything except <see cref="F:WarWolfWorks.UI.Subtitle.Text"/>.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:WarWolfWorks.UI.Subtitles">
            <summary>
            Class used to display text on a canvas; 
            Uses <see cref="T:WarWolfWorks.UI.Subtitle"/> which has a countdown that displays a certain color from a gradient based on the countdown.
            </summary>
        </member>
        <member name="P:WarWolfWorks.UI.Subtitles.AllSubtitles">
            <summary>
            All currently displayed subtitles.
            </summary>
        </member>
        <member name="M:WarWolfWorks.UI.Subtitles.New(WarWolfWorks.UI.Subtitle)">
            <summary>
            Pushes a <see cref="T:WarWolfWorks.UI.Subtitle"/> on display.
            </summary>
            <param name="subtitle"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.AbstractCloneable`1">
            <summary>
            Used for advanced cloning of a class. An advanced version of <see cref="T:System.ICloneable"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AnimationManager.Clips">
            <summary>
            All clips contained by the Animation Manager.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.AnimationManager.Player">
            <summary>
            The Animation component used to play animations.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.PlayAnimation(System.Int32)">
            <summary>
            Plays animation based on index.
            </summary>
            <param name="toPlay"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.AnimationManager.PlayAnimation(System.String)">
            <summary>
            Plays animation based on name.
            </summary>
            <param name="toPlay"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.AsEnumStatAttribute">
            <summary>
            Use this attribute to draw a stat's stacking and affection with enum fields instead of int fields.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AsEnumStatAttribute.StackingType">
            <summary>
            What <see cref="T:System.Enum"/> type the stacking is assigned to.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.AsEnumStatAttribute.AffectionType">
            <summary>
            What <see cref="T:System.Enum"/> type the affection is assigned to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AsEnumStatAttribute.#ctor(System.Type)">
            <summary>
            Creates an <see cref="T:WarWolfWorks.Utility.AsEnumStatAttribute"/> which has a custom <see cref="F:WarWolfWorks.Utility.AsEnumStatAttribute.AffectionType"/> and <see cref="F:WarWolfWorks.Utility.AsEnumStatAttribute.StackingType"/> set to <see cref="T:WarWolfWorks.EntitiesSystem.Statistics.EWWWStacking"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.AsEnumStatAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Creates an <see cref="T:WarWolfWorks.Utility.AsEnumStatAttribute"/> which has a custom <see cref="F:WarWolfWorks.Utility.AsEnumStatAttribute.AffectionType"/> and <see cref="F:WarWolfWorks.Utility.AsEnumStatAttribute.StackingType"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Axis">
            <summary>
            Depicts a 3D axis for directions. (Flags-friendly)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.None">
            <summary>
            No Axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.X">
            <summary>
            Horizontal Axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.Y">
            <summary>
            Vertical Axis.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Axis.Z">
            <summary>
            Depth Axis.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.CameraManager2D">
            <summary>
            Camera Manager for 2D use. Can be explicitly converted to FollowBehaviour, TransformLimiter and Camera.
            Uses <see cref="T:WarWolfWorks.Interfaces.IGetter`1"/> for singleton-like behaviour; See <see cref="M:WarWolfWorks.Utility.Getting.Getter`1.Draw"/>
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.DefaultSize">
            <summary>
            Default size of the camera.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.CurrentSize">
            <summary>
            Current size of the camera.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.DelayedSize">
            <summary>
            Size towards which the camera is scaling.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManager2D.DelayedSpeed">
            <summary>
            The speed at which the camera is currently resizing.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.SetCameraSize(System.Single)">
            <summary>
            Sets camera size to the specified size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.SetCameraSizeFull(System.Single)">
            <summary>
            Sets camera size to the specified size and end it's delayed scaling.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.SetDelayedSize(System.Single,System.Single)">
            <summary>
            Sets the camera size to the specified size with speed.
            </summary>
            <param name="size"></param>
            <param name="speed"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.SetCameraSizeDefault">
            <summary>
            Sets the camera size to it's initial value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.op_Explicit(WarWolfWorks.Utility.CameraManager2D)~WarWolfWorks.Utility.FollowBehaviour">
            <summary>
            Explicitly returns the <see cref="T:WarWolfWorks.Utility.CameraManager2D"/>'s <see cref="F:WarWolfWorks.Utility.CameraManager2D.FollowBehaviour"/>.
            </summary>
            <param name="cm2d"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.op_Explicit(WarWolfWorks.Utility.CameraManager2D)~WarWolfWorks.Utility.TransformLimiter">
            <summary>
            Explicitly returns the <see cref="T:WarWolfWorks.Utility.CameraManager2D"/>'s <see cref="F:WarWolfWorks.Utility.CameraManager2D.TransformLimiter"/>.
            </summary>
            <param name="cm2d"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManager2D.op_Implicit(WarWolfWorks.Utility.CameraManager2D)~UnityEngine.Camera">
            <summary>
            Implicitly returns the <see cref="T:WarWolfWorks.Utility.CameraManager2D"/>'s Camera it is attached to.
            </summary>
            <param name="cm2d"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.CameraManagerFPS">
            <summary>
            Camera manager for an FPS game.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManagerFPS.SensitivityHorizontal">
            <summary>
            Sensitivity of the camera controller's horizontal axis.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManagerFPS.SensitivityVertical">
            <summary>
            Sensitivity of the camera controller's vertical axis.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.CameraManagerFPS.MaxVerticalRotation">
            <summary>
            Sets the maximum rotation allowed vertically.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.IsInversed(UnityEngine.RectTransform.Axis)">
            <summary>
            Returns true if an axis is inverted.
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.SetInversed(UnityEngine.RectTransform.Axis,System.Boolean)">
            <summary>
            Inverts the controls of an axis.
            </summary>
            <param name="axis"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.SetFOV(System.Single)">
            <summary>
            Sets the Field of View of the camera.
            </summary>
            <param name="degreesDelta"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.CameraManagerFPS.op_Implicit(WarWolfWorks.Utility.CameraManagerFPS)~UnityEngine.Camera">
            <summary>
            Returns implicitly the Camera component.
            </summary>
            <param name="cmfps"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.CMColor">
            <summary>
            Color struct used to apply colors to a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.Value">
            <summary>
            The color value this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> originally applies.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration">
            <summary>
            The duration at which this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> will stay inside a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> based on <see cref="T:WarWolfWorks.Utility.Coloring.ColorBehaviour"/>.
            (Serialized as "Duration" inside the inspector)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.CurrentDuration">
            <summary>
            The current countdown of this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>. Used based on <see cref="T:WarWolfWorks.Utility.Coloring.ColorBehaviour"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.Behaviour">
            <summary>
            Determines how this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s countdown behaves.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.CMColor.Application">
            <summary>
            Determines how the color is applied to a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.#ctor(UnityEngine.Color,System.Single,WarWolfWorks.Utility.Coloring.ColorBehaviour,WarWolfWorks.Utility.Coloring.ColorApplication)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> instance.
            </summary>
            <param name="color"></param>
            <param name="duration"></param>
            <param name="behaviour"></param>
            <param name="application"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Explicit(WarWolfWorks.Utility.Coloring.CMColor)~WarWolfWorks.Utility.Coloring.ColorBehaviour">
            <summary>
            The explicit returning of a <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.Behaviour"/>.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Explicit(WarWolfWorks.Utility.Coloring.CMColor)~WarWolfWorks.Utility.Coloring.ColorApplication">
            <summary>
            The explicit returning of a <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.Application"/>.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Implicit(WarWolfWorks.Utility.Coloring.CMColor)~UnityEngine.Color">
            <summary>
            The implicit returning of a <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.Value"/>.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Equality(WarWolfWorks.Utility.Coloring.CMColor,WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Returns true if both instances are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.op_Inequality(WarWolfWorks.Utility.Coloring.CMColor,WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Returns true if both instances are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.Equals(System.Object)">
            <summary>
            CMColor's Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.Equals(WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Returns true if all variables in the other <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> are the same.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.CMColor.GetHashCode">
            <summary>
            Returns this <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s HashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorableRenderer2D">
            <summary>
            To use with <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> for application of color(s) to sprite renderers.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.ColorableRenderer2D.Renderers">
            <summary>
            Reference of all <see cref="T:UnityEngine.SpriteRenderer"/> assigned to be changed.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorApplication">
            <summary>
            How the color is applied for a final result inside a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.ignore">
            <summary>
            The <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> will be ignored completely.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.FlatAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s raw color value on the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.FlatRemove">
            <summary>
            Removes the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s raw color value from the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AverageAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied on the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AverageRemove">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied on the final result.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value on the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingRemove">
            <summary>
            Removes the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value from the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingAverageAdd">
            <summary>
            Adds the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied on the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorApplication.AscendingAverageRemove">
            <summary>
            Removes the <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>'s color value divided by the amount of colors applied from the final result with a force equal to the duration left.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorBehaviour">
            <summary>
            Determines how a <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> should behave inside a <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorBehaviour.RemoveOnDurationEnd">
            <summary>
            When <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration"/> reaches 0 or less, it will be removed from it's <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/> host.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorBehaviour.StayAfterDurationEnd">
            <summary>
            <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration"/> will still be counted, however it will simply stop at 0 and not remove the color.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Coloring.ColorBehaviour.NoDurationCountdown">
            <summary>
            <see cref="P:WarWolfWorks.Utility.Coloring.CMColor.MaxDuration"/> will not be counted.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Coloring.ColorManager">
            <summary>
            Class used to manage colors. It works on a systen similar to layers, where there is 8 lists of <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/>s,
            where 8 is always displayed as it is of the lowest depth. 
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.ColorManager.BaseColor">
            <summary>
            The base color to apply.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.GetColorables">
            <summary>s
            Returns all <see cref="T:WarWolfWorks.Interfaces.IColorable"/> elements affected by this <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.AddColorable(WarWolfWorks.Interfaces.IColorable)">
            <summary>
            Adds a <see cref="T:WarWolfWorks.Interfaces.IColorable"/> to colorables affected by this <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
            <param name="colorable"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveColorable(WarWolfWorks.Interfaces.IColorable)">
            <summary>
            Removes specified <see cref="T:WarWolfWorks.Interfaces.IColorable"/> from colorables affected by this <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
            <param name="colorable"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Utility.Coloring.ColorManager.FinalColor">
            <summary>
            The color that will be applied to all Colorables.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RefreshColorDuration(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Restarts the duration from the beginning for the given color.
            </summary>
            <param name="color"></param>
            <param name="layer"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.AddColor(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Add a color to be processed by the <see cref="T:WarWolfWorks.Utility.Coloring.ColorManager"/>.
            </summary>
            <param name="color"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveColor(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Removes a previously added <see cref="T:WarWolfWorks.Utility.Coloring.CMColor"/> and returns true if the color was successfully removed.
            </summary>
            <param name="color"></param>
            <param name="from"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveColor(WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Removes the first instance of the given color in any layer.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveAll(WarWolfWorks.Utility.Coloring.CMColor,System.Int32)">
            <summary>
            Removes all instances of the given object from the specified layer.
            </summary>
            <param name="color"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Coloring.ColorManager.RemoveAll(WarWolfWorks.Utility.Coloring.CMColor)">
            <summary>
            Removes all instances of the given object from all layers.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.DefaultKeys">
            <summary>
            A more customizable Input system compared to the <see cref="T:UnityEngine.Input"/> class.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.DefaultKeys.WKey">
            <summary>
            Struct used to store keys and identify them by name.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.DefaultKeys.WKey.Name">
            <summary>
            Name of the <see cref="T:WarWolfWorks.Utility.DefaultKeys.WKey"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.DefaultKeys.WKey.Key">
            <summary>
            Value of the <see cref="T:WarWolfWorks.Utility.DefaultKeys.WKey"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.WKey.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Base constructor of the <see cref="T:WarWolfWorks.Utility.DefaultKeys.WKey"/>.
            </summary>
            <param name="name"></param>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.WKey.#ctor(System.String)">
            <summary>
            Constructor based off of <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/> save lines.
            </summary>
            <param name="saveLine"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.DefaultKeys.IsOptimized">
            <summary>
            Is the optimization mode currently on?
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Optimize">
            <summary>
            Optimizes the DefaultKeys system to store all keys into a Dictionary, 
            instead of directly Stream-Reading it from the file. (Automatically triggers on <see cref="T:UnityEngine.RuntimeInitializeOnLoadMethodAttribute"/>.<see cref="F:UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad"/>)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Unoptimize">
            <summary>
            Unoptimizes the DefaultKeys system to make DefaultKeys read directly from file through Stream Reading.
            (Recommended only to add multiple keys to DefaultKeys through code)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.Reoptimize">
            <summary>
            Updates the stored list of optimized keys to be up to date with DefaultKeys file.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetDatabaseKey(System.String)">
            <summary>
            Returns a <see cref="T:UnityEngine.KeyCode"/> assigned with given name.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetDatabaseKeys(System.String[])">
            <summary>
            Returns a list of <see cref="T:UnityEngine.KeyCode"/>s assigned with the given names.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKey(System.String)">
            <summary>
            Returns true if the <see cref="T:UnityEngine.KeyCode"/> under keyName is held down.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKey(System.Boolean,System.String[])">
            <summary>
            Returns true if either is false and all given keys are held, or when either is true and any of the given keys is held.
            </summary>
            <param name="either"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyUp(System.String)">
            <summary>
            Returns true if the <see cref="T:UnityEngine.KeyCode"/> under keyName is lifted.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyUp(System.Boolean,System.String[])">
            <summary>
            Returns true if either is false and all given keys are lifted, or when either is true and any of the given keys is lifted.
            </summary>
            <param name="either"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyDown(System.String)">
            <summary>
            Returns true if the <see cref="T:UnityEngine.KeyCode"/> under keyName is pressed.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetKeyDown(System.Boolean,System.String[])">
            <summary>
            Returns true if either is false and all given keys are pressed, or when either is true and any of the given keys is pressed.
            </summary>
            <param name="either"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.GetAllKeys">
            <summary>
            Returns a <see cref="T:System.ValueTuple"/> array of all keys stored inside DefaultKeys. (If optimization is active, it will return all keys in Dictionary, otherwise returns directly from the file.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.KeyExists(System.String)">
            <summary>
            Returns true if key under keyName exists inside <see cref="T:WarWolfWorks.Utility.DefaultKeys"/>.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.AddKey(WarWolfWorks.Utility.DefaultKeys.WKey)">
            <summary>
            Adds a key to the database; If a key under <see cref="F:WarWolfWorks.Utility.DefaultKeys.WKey.Name"/> already exists, it will only change that key's value with <see cref="F:WarWolfWorks.Utility.DefaultKeys.WKey.Key"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.AddKey(System.String,UnityEngine.KeyCode)">
            <summary>
            Adds a key to the database; If a key under the given name already exists, it will only change that key's value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ForceAddKey(WarWolfWorks.Utility.DefaultKeys.WKey)">
            <summary>
            Forces <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> to add/change a key inside the database even if optimization mode is active.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ForceAddKey(System.String,UnityEngine.KeyCode)">
            <summary>
            Forces <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> to add/change a key inside the database even if optimization mode is active.
            </summary>
            <param name="key"></param>
            <param name="name"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ChangeKeyName(System.String,System.String)">
            <summary>
            Changes a key's name.
            </summary>
            <param name="of">Current name of the key.</param>
            <param name="to">New name of the key.</param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.RemoveKey(System.String)">
            <summary>
            Removes a key from the database.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.DefaultKeys.ForceRemoveKey(System.String)">
            <summary>
            Forces DefaultKeys to remove key from database even if optimization mode is active.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.FloatRange">
            <summary>
            Range struct for Clamping/Range utility in <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.GetClampedValue(System.Single)">
            <summary>
            Returns the value given clamped between MinRange and MaxRange.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FloatRange.IsWithinRange(System.Single)">
            <summary>
            Returns true if the given value is within Min (inclusive) and Max (inclusive).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.FollowBehaviour">
            <summary>
            Behaviour used to make an object follow a list of transforms. Useful for cameras.
            (Explicitly convertible to <see cref="T:UnityEngine.Transform"/>)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.RigidBody">
            <summary>
            Follow behaviour's rigidbody; Only used if <see cref="F:WarWolfWorks.Utility.FollowBehaviour.UsesRigidbody"/> returns true.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehaviour.UsesRigidbody">
            <summary>
            If true, this class will use a rigidbody instead of it's transform.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.FollowBehaviour.AllowConsistentFollow">
            <summary>
            When active, it forces the follow behaviour to loop through it's position calculation again 
            as long as it returns an exception, and tries to fix it at the same time. 
            If you're using this, make sure all follow objects
            cannot be null, that the list is not empty and that all followed objects aren't re-instantiated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.FollowedObjects">
            <summary>
            All objects followed by this FollowBehaviour.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.Speed">
            <summary>
            Speed at which this script follows <see cref="P:WarWolfWorks.Utility.FollowBehaviour.FollowedObjects"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.Acceleration">
            <summary>
            Speed at which this behaviour accelerates based on distance.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.AccelerateWhenFar">
            <summary>
            Decides if this behaviour accelerates when further away from the object.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.IsFollowing">
            <summary>
            If false, this behaviour will stop following.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.PositionBlocker">
            <summary>
            Position at which this behaviour will be blocked in based on BlocksX, BlocksY and BlocksZ.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.BlocksX">
            <summary>
            Does this <see cref="T:WarWolfWorks.Utility.FollowBehaviour"/> block the X axis?
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.BlocksY">
            <summary>
            Does this <see cref="T:WarWolfWorks.Utility.FollowBehaviour"/> block the Y axis?
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.FollowBehaviour.BlocksZ">
            <summary>
            Does this <see cref="T:WarWolfWorks.Utility.FollowBehaviour"/> block the Z axis?
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehaviour.AddFollower(UnityEngine.Transform)">
            <summary>
            Adds a Transform to the list of followed objects.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehaviour.RemoveFollower(UnityEngine.Transform)">
            <summary>
            Removes an existing Transform from the list of followed objects.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehaviour.ContainsFollower(UnityEngine.Transform)">
            <summary>
            Returns true if the given transform is inside of the followed objects list.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehaviour.ChangeBlock(System.Int32,System.Boolean)">
            <summary>
            Changes an axis block to the given boolean value.
            0 = X axis, 1 = Y axis, 2 = Z axis.
            </summary>
            <param name="position"></param>
            <param name="block"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehaviour.ChangeBlock(System.Int32,System.Single)">
            <summary>
            Sets the block position of an axis.
            0 = X axis, 1 = Y axis, 2 = Z axis.
            </summary>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.FollowBehaviour.op_Explicit(WarWolfWorks.Utility.FollowBehaviour)~UnityEngine.Transform">
            <summary>
            Explicitly returns <see cref="T:WarWolfWorks.Utility.FollowBehaviour"/>.transform.
            </summary>
            <param name="fb"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks">
            <summary>
            A class which contains 20+Gadzillion-billion-yes methods for various utilities.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Random">
            <summary>
            Subclass with all utility methods for use of a random factor.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Random.RandomVector01WithNeg">
            <summary>
            Returns anything between -Vector3.one and Vector3.one.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Random.RandomVector01">
            <summary>
            Returns anything between Vector3.zero and Vector3.one.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            Shuffles all items inside a list, changing their index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.RandomItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random item from an IEnumerable value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.RandomObject``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Deprecated. Use <see cref="M:WarWolfWorks.Utility.Hooks.Random.RandomItem``1(System.Collections.Generic.IEnumerable{``0})"/> instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectList"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Range(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector3"/> with each of it's values being a random number between min and max.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Random.Range(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector2"/> with each of it's values being a random number between min and max.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Streaming">
            <summary>
            Subclass with all streaming and saving/loading methods.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.STREAM_VALUE_POINTER">
            <summary>
            Value which separates the name from the value; Only has one entry at index 0.
            Example: ValueName IS value; In here, " IS " is the separator.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog">
            <summary>
            A series of string values used to save/load from <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Path">
            <summary>
            File path towards which this catalog will be saved.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Category">
            <summary>
            Category in which this catalog will be stored.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Name">
            <summary>
            Name of the variable saved by this catalog.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Value">
            <summary>
            Value in string of the saved catalog.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.Catalog.UsesDefaultValue">
            <summary>
            If true, this catalog's value will be used as DefaultValue.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Password">
            <summary>
            Password used for encryption. NOTE: VERY heavy, use only on high-end pc's or small save sections.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Protected">
            <summary>
            Determines if this category is protected by a password.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Encrypt(System.String)">
            <summary>
            Encrypts a string value with this catalog's password.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Decrypt(System.String)">
            <summary>
            Decrypts a string value with this catalog's password.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.DefaultSaver(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> using the default password and path.
            </summary>
            <param name="category"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Saver(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> used to save a value.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Saver(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> used to save a value.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Savers(System.String,System.String,System.String[],System.String[])">
            <summary>
            Creates a collection of catalogs with the same path and category.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Savers(System.String,System.String,System.String[],System.String[],System.String)">
            <summary>
            Creates a collection of catalogs with the same path, category and password.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="names"></param>
            <param name="values"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.DefaultLoader(System.String,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> to load a variable with the path and password being default.
            </summary>
            <param name="category"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.LoaderFull(System.String,System.String)">
            <summary>
            To be used with <see cref="M:WarWolfWorks.Utility.Hooks.Streaming.LoadAll(WarWolfWorks.Utility.Hooks.Streaming.Catalog,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Loader(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> to load or remove a value.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Loader(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> to load or remove a value.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <param name="useDefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Loader(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> to load or remove a value.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <param name="useDefaultValue"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Catalog.Loader(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/> to load or remove a value.
            </summary>
            <param name="path"></param>
            <param name="category"></param>
            <param name="name"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.SetDefaultPassword(System.String)">
            <summary>
            Sets the default password for use with <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/>.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetDefaultPassword">
            <summary>
            Gets the current Default password.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.SetDefaultPath(System.String)">
            <summary>
            Sets the default path for use with <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/>.
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetDefaultPath">
            <summary>
            Gets the current Default path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.ValueSaver(WarWolfWorks.Utility.Hooks.Streaming.Catalog)">
            <summary>
            Returns a catalog's name with <see cref="F:WarWolfWorks.Utility.Hooks.Streaming.STREAM_VALUE_POINTER"/> and it's value. (e.g: Score = 25)
            </summary>
            <param name="catalog"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.NameNoValSaver(WarWolfWorks.Utility.Hooks.Streaming.Catalog)">
            <summary>
            Returns a catalog's name with <see cref="F:WarWolfWorks.Utility.Hooks.Streaming.STREAM_VALUE_POINTER"/>. (e.g: Score =)
            </summary>
            <param name="catalog"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Save(WarWolfWorks.Utility.Hooks.Streaming.Catalog)">
            <summary>
            Saves a value to a folder file under category.
            </summary>
            <param name="saver"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.SaveAll(WarWolfWorks.Utility.Hooks.Streaming.Catalog[])">
            <summary>
            Saves all given values under category file. All categories inside a catalog must be the same value.
            </summary>
            <param name="catalogs"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Reorder(WarWolfWorks.Utility.Hooks.Streaming.Catalog,System.Func{System.String,System.Int32})">
            <summary>
            Attempts to reorder all values inside the given catalog's category;
            (Note: When comparing, the separator is included, so make sure to use <see cref="F:WarWolfWorks.Utility.Hooks.Streaming.STREAM_VALUE_POINTER"/> to split the string.)
            </summary>
            <param name="catalog"></param>
            <param name="order"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.ReorderSingle(WarWolfWorks.Utility.Hooks.Streaming.Catalog,System.Int32)">
            <summary>
            Reorders a variable into the given index.
            </summary>
            <param name="catalog"></param>
            <param name="to"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Contains(WarWolfWorks.Utility.Hooks.Streaming.Catalog)">
            <summary>
            Returns true if the given <see cref="T:WarWolfWorks.Utility.Hooks.Streaming.Catalog"/>'s name exists under it's path.
            </summary>
            <param name="catalog"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Load(WarWolfWorks.Utility.Hooks.Streaming.Catalog)">
            <summary>
            Loads a variable previously saved using <see cref="T:WarWolfWorks.Utility.Hooks.Streaming"/>.
            </summary>
            <param name="catalog"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.LoadAll(WarWolfWorks.Utility.Hooks.Streaming.Catalog,System.Boolean)">
            <summary>
            Loads all variables inside given catalog's file category. In case of an exception, returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.ChangeVariableName(WarWolfWorks.Utility.Hooks.Streaming.Catalog,System.String)">
            <summary>
            Changes the names of a variable and returns true if it was changed successfully.
            </summary>
            <param name="catalog"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.Remove(WarWolfWorks.Utility.Hooks.Streaming.Catalog)">
            <summary>
            Removes a value under catergory file of the given catalog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.CreateFolder(System.String)">
            <summary>
            Attempts to create a folder. Returns true if the folder was successfully created.
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetAllFilesInFolder(System.String,System.String,System.Boolean)">
            <summary>
            Gets all files inside a given folder.
            </summary>
            <param name="folderPath"></param>
            <param name="extention"></param>
            <param name="includeFolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.EncryptFile(System.String,System.String)">
            <summary>
            Encrypts all contents of a file using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.DecryptFile(System.String,System.String)">
            <summary>
            Decrypts all contents of a file using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>, assuming it was previously encrypted using <see cref="M:WarWolfWorks.Utility.Hooks.Streaming.EncryptFile(System.String,System.String)"/>.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetAllStreamedLines(System.IO.StreamReader)">
            <summary>
            Gets all lines from a StreamReader and returns them as a string array. (THIS METHOD DOES NOT FLUSH OR DISPOSE THE STREAMREADER)
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.LineChanger(System.String,System.Int32,System.String)">
            <summary>
            Overrides a line at the given index of a file.
            </summary>
            <param name="newText"></param>
            <param name="filePath"></param>
            <param name="index"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Streaming.StreamingAssetsPath">
            <summary>
            Returns the StreamingAssets folder path in windows form.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Streaming.AssetsPath">
            <summary>
            Returns the Assets folder path in windows form.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetStreamingAssetsFilePath(System.String)">
            <summary>
            Returns a merged path between <see cref="P:WarWolfWorks.Utility.Hooks.Streaming.StreamingAssetsPath"/> and fileName given.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Streaming.GetAssetsFilePath(System.String)">
            <summary>
            Returns a merged path between <see cref="P:WarWolfWorks.Utility.Hooks.Streaming.AssetsPath"/> and fileName given.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption">
            <summary>
            Encryption class which uses the Rijndael encryption algorithm.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Encrypt(System.String,System.String)">
            <summary>
            Returns an encrypted version of this string using the given password; CipherMode is set to CBC and PaddingMode to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Encrypt(System.String,System.String,System.Security.Cryptography.CipherMode)">
            <summary>
            Returns an encrypted version of this string using the given password; PaddingMode is set to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Encrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Returns an encrypted version of this string using the given password.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string previously encrypted using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>; CipherMode is set to CBC and PaddingMode to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Decrypt(System.String,System.String,System.Security.Cryptography.CipherMode)">
            <summary>
            Decrypts a string previously encrypted using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>; PaddingMode is set to PKCS7.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RijndaelEncryption.Decrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts a string previously encrypted using <see cref="T:WarWolfWorks.Utility.Hooks.RijndaelEncryption"/>.
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <param name="mode"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.LocalEncryption">
            <summary>
            Encryption class which uses <see cref="T:System.Security.Cryptography.ProtectedData"/>.
            NOTE: ONLY USE FOR LOCAL ENCRYPTION LIKE OFFLINE CONFIG/SAVE FILES; IF A STRING IS ENCRYPTED ON A MACHINE, IT CAN ONLY BE DECRYPTED BY THAT SAME MACHINE.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.LocalEncryption.Encrypt(System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.LocalEncryption.Decrypt(System.String)">
            <summary>
            Decrypts a string previously encrypted with <see cref="M:WarWolfWorks.Utility.Hooks.LocalEncryption.Encrypt(System.String)"/>.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Ciphers">
            <summary>
            Cipher algorithms.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Ciphers.Caesar(System.String,System.Int32)">
            <summary>
            Ceasar cipher which delays each character in a string by shift.
            </summary>
            <param name="source"></param>
            <param name="shift"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Cursor">
            <summary>
            Contains all methods concerning the mouse/cursor.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Cursor.MousePosInPercent">
            <summary>
            Returns the anchored position of the mouse in Vector2.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cursor.RotateTowardsMouse(UnityEngine.Camera,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a rotation from position based on the camera, which would rotate towards the mouse.
            </summary>
            <param name="camera"></param>
            <param name="position"></param>
            <param name="adder"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cursor.GetMouseWorldPosition(UnityEngine.Camera)">
            <summary>
            Gets the world position of the mouse.
            </summary>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cursor.GetMouseUIPosition(UnityEngine.Camera,System.Boolean)">
            <summary>
            Returns the Mouse's World position, 
            pixel position on screen if convertToViewPort is false, 
            otherwise it returns by using camera's ScreenToViewportPoint.
            </summary>
            <param name="camera"></param>
            <param name="convertToViewPort"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Enumeration">
            <summary>
            Contains some utility methods concerting enumeration and generic collections.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ListContainsType``1(System.Collections.Generic.List{``0},System.Type)">
            <summary>
            Returns true if a list contains an item of type. (Only works on inherited classes)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ArrayMerger``1(``0[],``0[])">
            <summary>
            Returns an array which is a merged version of array1 and array2.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.EnumerableContains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Equivalent to <paramref name="collection"/>.Intersect(<paramref name="objectsToFind"/>).Any().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="objectsToFind"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the Array or all of it's elements are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Equivalent to <see cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/> for Arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Equivalent to <see cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/> for Arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Equivalent to <see cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.RemoveNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all null elements inside a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.RemoveDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all default elements inside a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ToGenericList``1(System.Collections.IList,System.Boolean)">
            <summary>
            Returns a generic <see cref="T:System.Collections.Generic.List`1"/> from a non-generic <see cref="T:System.Collections.IList"/>. In case of an incorrect cast, it will return null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="linqReturn">If false, it will return a new list instead of using System.Linq to generate a list.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.ToGeneric``1(System.Collections.IEnumerable)">
            <summary>
            Returns a generic <see cref="T:System.Collections.Generic.IEnumerable`1"/> from a non-generic <see cref="T:System.Collections.IEnumerable"/>. In case of an incorrect cast, it will return null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.InstantiateList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of instantiated objects (unity copy).
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Enumeration.InstantiateList``1(``0[])">
            <summary>
            Returns an array of instantiated objects.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Vectors">
            <summary>
            Contains all methods Position and Vector related.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.DirectionTowards(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns direction which would make Position look at Destination.
            </summary>
            <param name="Position"></param>
            <param name="Destination"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Average(UnityEngine.Vector3[])">
            <summary>
            Returns the total of vectors divided by Length of array given.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Vectors.AllDirections">
            <summary>
            Returns in order: Vector3.back, Vector3.down, Vector3.forward, Vector3.left, Vector3.one, Vector3.right, Vector3.up
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Vectors.AllDirections2D">
            <summary>
            Returns in order: Vector2.right, Vector2.one, Vector2.up, new Vector2(-1f, 1f), Vector2.left, -Vector2.one, Vector2.down, new Vector2(1f, -1f)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Vectors.DiagonalDirections2D">
            <summary>
            Returns in order: Vector2.one, new Vector2(-1f, 1f), -Vector2.one, new Vector2(1f, -1f)
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Vectors.MainDirections2D">
            <summary>
            Returns in order: Vector2.right, Vector2.up, Vector2.left, Vector2.down
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Vectors.HorizontalSides2D">
            <summary>
            Returns in order: Vector2.left, Vector2.right
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.Vectors.VerticalSides2D">
            <summary>
            Returns in order: Vector2.up, Vector2.down
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAnchoredPosition(UnityEngine.RectTransform)">
            <summary>
            Returns the Anchored position of a RectTransform in Vector4,
            where x = anchorMin.x, y = anchorMin.y, z = anchorMax.x, w = anchorMax.y.
            </summary>
            <param name="rt"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector4)">
            <summary>
            Sets the anchored position of an RectTransform with it's offset set to 0.
            Vector4 use: x = anchorMin.x, y = anchorMin.y, z = anchorMax.x, w = anchorMax.y.
            </summary>
            <param name="rt"></param>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Sets the anchored position of an RectTransform with it's offset set to 0.
            </summary>
            <param name="rt"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAnchoredUI(UnityEngine.RectTransform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the anchored position of an RectTransform with it's offset set to 0.
            </summary>
            <param name="rt"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAllAnchoredUIFitHorizontal(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform})">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.y = 0 and anchorMax.y = 1.
            </summary>
            <param name="rts"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAllAnchoredUIFitHorizontal(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform},System.Single)">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.y = 0 and anchorMax.y = 1, with x values being limited from 0 to maxSize01.
            </summary>
            <param name="rts"></param>
            <param name="maxSize01"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAllAnchoredUIFitVertical(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform})">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.x = 0 and anchorMax.x = 1.
            </summary>
            <param name="rts"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.SetAllAnchoredUIFitVertical(System.Collections.Generic.IEnumerable{UnityEngine.RectTransform},System.Single)">
            <summary>
            Fits all RectTransforms given inside a parent horizontally, where anchorMin.y = 0 and anchorMax.y = 1, with x values being limited from 0 to maxSize01.
            </summary>
            <param name="rts"></param>
            <param name="maxSize01"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAspectRatio">
            <summary>
            Gets the aspect ratio of the game in Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAspectRatio(UnityEngine.Resolution)">
            <summary>
            Gets the aspect ratio of a given Resolution.
            </summary>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.RotatePointAroundPivot(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Rotates point around pivot based on angle (Euler).
            </summary>
            <param name="point"></param>
            <param name="pivot"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.RotatePointAroundPivot(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Rotates point around pivot based on angle (Quaternion).
            </summary>
            <param name="point"></param>
            <param name="pivot"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.HighestValue(UnityEngine.Vector2)">
            <summary>
            Returns a Vector2 that has the highest axis value kept, and the lowest set to 0.
            </summary>
            <param name="evaluator"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.ToInt(UnityEngine.Vector3)">
            <summary>
            Converts a Vector3 to a Vector3Int.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.ToIntNormal(UnityEngine.Vector3)">
            <summary>
            Convert all values of a given Vector3 into Int32 values without turning it into a <see cref="T:UnityEngine.Vector3Int"/>.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.ToIntNormal(UnityEngine.Vector3,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Convert all values of a given Vector3 into Int32 values without turning it into a <see cref="T:UnityEngine.Vector3Int"/>, and ignores the corresponding values for conversion.
            </summary>
            <param name="vector"></param>
            <param name="ignoreX"></param>
            <param name="ignoreY"></param>
            <param name="ignoreZ"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Snap(UnityEngine.Vector3,System.Single)">
            <summary>
            Snaps a vector to given factor. Useful to make grid-like behaviour.
            </summary>
            <param name="vector"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Snap(UnityEngine.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Snaps a vector to given factor, while ignoring all corresponding Ignore values.
            </summary>
            <param name="vector"></param>
            <param name="factor"></param>
            <param name="IgnoreX"></param>
            <param name="IgnoreY"></param>
            <param name="IgnoreZ"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.EulerRotateTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Quaternion.RotateTowards(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.LowestValue(UnityEngine.Vector2)">
            <summary>
            Returns a Vector2 that has the lowest axis value kept, and the highest set to 0.
            </summary>
            <param name="evaluator"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.DistanceBetween(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Vector3.Distance(UnityEngine.Vector3,UnityEngine.Vector3)"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.DistanceBetween(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Vector2.Distance(UnityEngine.Vector2,UnityEngine.Vector2)"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.DistanceBetween(UnityEngine.Vector2,UnityEngine.Vector2,WarWolfWorks.Utility.Axis)">
            <summary>
            Returns the distance of an axis between two Vector2 values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="axisChoice"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector4)">
            <summary>
            Returns true if position is wihin bounds. (bounds are: x and y as min, z and w as max (z is max X and w is max Y))
            </summary>
            <param name="position"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.IsInsideBounds(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns true if position is within size from center. 
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.IsInsideBounds(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns true if the position is within the radius of center.
            </summary>
            <param name="position"></param>
            <param name="center"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns true if position is wihin min and max.
            </summary>
            <param name="position"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Vector3D(UnityEngine.Vector3)">
            <summary>
            Returns a Vector2 which has it's Y value set to the given Vector3 Z value.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.MoveTowardsAccelerated(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Returns a Vector3 which moves a towards b based on speed. Accelerates based on the distance between both positions.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="speed"></param>
            <param name="acceleration"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.MoveTowardsAccelerated(UnityEngine.Transform,UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Returns a Vector3 which moves a towards b based on speed. Accelerates based on the distance between both positions.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="speed"></param>
            <param name="acceleration"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Clamp(UnityEngine.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)"/> for Vector3s.
            </summary>
            <param name="toClamp"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Clamp(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)"/> for Vector3s.
            </summary>
            <param name="toClamp"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
            <param name="minZ"></param>
            <param name="maxZ"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Clamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)"/> for Vector3s.
            </summary>
            <param name="toClamp"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.Reformalize(UnityEngine.Vector3)">
            <summary>
            Sets NaN, null or Infinite values of the given Vector to 0.
            </summary>
            <param name="toReform"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.IsApproximate(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns true if PositionToApproximate is within approximation of PositionToCompare.
            </summary>
            <param name="PositionToApproximate"></param>
            <param name="PositionToCompare"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.MiddleMan(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a position between a and b, based on percent (0-1).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.VectorIntConverter(UnityEngine.Vector2)">
            <summary>
            Converts Vector2 to Vector2Int,
            </summary>
            <param name="vectorToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetClosestToDistance``1(System.Single,UnityEngine.Vector3,System.Collections.Generic.ICollection{``0})">
            <summary>
            Gets closest element to center from collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maxDistance"></param>
            <param name="center"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAllWithinDistance(UnityEngine.Vector3,System.Single,System.String)">
            <summary>
            Gets all GameObjects within radius based on their tags. (SLOW, uses GameObject.FindGameObjectsWithTag, avoid using in Update functions)
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="tagUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAllWithinDistance(UnityEngine.Vector3,System.Single,System.String[])">
            <summary>
            Gets all GameObjects within radius based on their tags. (SLOW, uses GameObject.FindGameObjectsWithTag, avoid using in Update functions)
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="tagsUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.AverageValue(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns x + y + z / 3 if includeZValue is true, otherwise returns x + y / 2.
            </summary>
            <param name="vector3"></param>
            <param name="includeZValue"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetClosestToPosition``1(UnityEngine.Vector3,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets all components who's .transform.position is the closest to center, based on amount requested.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="from"></param>
            <param name="amount"></param>
            <exception cref="T:WarWolfWorks.Security.WWWException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetFurthestFromPosition``1(UnityEngine.Vector3,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Return all components who's .transform.position is the furthest from center.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="from"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAllWithinDistance``1(UnityEngine.Vector3,System.Single,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all components who's .transform.position is within center by radius.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="used"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Vectors.GetAllWithinRange``1(UnityEngine.Vector3,WarWolfWorks.Utility.FloatRange,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all components who's .transform.position is within center by range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="center"></param>
            <param name="range"></param>
            <param name="used"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.RPhysics">
            <summary>
            Contains all methods Raycast and Physics related.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSingle(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.String[])">
            <summary>
            Casts a single 2D raycast.
            </summary>
            <param name="startingPos"></param>
            <param name="direction"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSingle(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.String[])">
            <summary>
            Casts a single raycast.
            </summary>
            <param name="startingPos"></param>
            <param name="direction"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSides(UnityEngine.Vector2,UnityEngine.Vector2[],System.Single,System.String[])">
            <summary>
            Casts multiple 2D raycasts.
            </summary>
            <param name="startingPos"></param>
            <param name="directions"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSides(UnityEngine.Vector3,UnityEngine.Vector3[],System.Single,System.String[])">
            <summary>
            Casts multiple raycasts.
            </summary>
            <param name="startingPos"></param>
            <param name="directions"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSides(UnityEngine.Vector2,UnityEngine.Vector2[],System.Single,System.String[],System.Int32@)">
            <summary>
            Casts multiple 2D raycasts; If multiple raycasts hit, closestIndex will return the index of the closest hit to the startingPos.
            </summary>
            <param name="startingPos"></param>
            <param name="directions"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <param name="closestIndex"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSides(UnityEngine.Transform,UnityEngine.Vector2[],System.Single,System.String[],System.Boolean)">
            <summary>
            Casts multiple 2D raycasts where a transform's position is the center.
            </summary>
            <param name="startingPos"></param>
            <param name="directions"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RPhysics.RayCastSides(UnityEngine.Transform,UnityEngine.Vector2[],System.Single,System.String[],System.Boolean,System.Int32@)">
            <summary>
            Casts multiple 2D raycasts where a transform's position is the center; If multiple raycasts hit, closestIndex will return the index of the closest hit to the startingPos.
            </summary>
            <param name="startingPos"></param>
            <param name="directions"></param>
            <param name="distance"></param>
            <param name="layerMasks"></param>
            <param name="local"></param>
            <param name="closestIndex"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.WWWMath">
            <summary>
            Contains all methods Math related.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.DeminishingReturnHalfCurve(System.Single,System.Single)">
            <summary>
            Returns: value / maxValue * (maxValue - value)
            </summary>
            <param name="value"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampAngle(System.Single,System.Single,System.Single)">
            <summary>
            Attempts to clamp a euler rotation value.
            </summary>
            <param name="angle"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampAngle(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Attempts to clamp a euler rotation value.
            </summary>
            <param name="angle"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.Truncate(System.Single,System.Int32)">
            <summary>
            Cuts a float to digits length.
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.RoundValue(System.Single,System.Boolean)">
            <summary>
            Rounds a float value.
            </summary>
            <param name="value"></param>
            <param name="favorLower"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ToPositive(System.Int32)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ToNegative(System.Int32)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ToPositive(System.Single)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ToNegative(System.Single)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ToPositive(System.Int64)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ToNegative(System.Int64)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.Clamp(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Clamps the given value between range.Min and range.Max.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.Clamp(System.Int32,WarWolfWorks.Utility.IntRange)">
            <summary>
            Clamps the given value between range.Min and range.Max.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampRounded(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between min and max, and if the value goes outside the boundries, it goes back to it's opposite boundry and starts counting from it.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <exception cref="T:WarWolfWorks.Security.WWWException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampRounded(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Clamps a value between min and max, and if the value goes outside the boundries, it goes back to it's opposite boundry and starts counting from it.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampRounded(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between min and max, and if the value goes outside the boundries, it goes back to it's opposite boundry and starts counting from it.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <exception cref="T:WarWolfWorks.Security.WWWException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampRounded(System.Int32,WarWolfWorks.Utility.IntRange)">
            <summary>
            Clamps a value between min and max, and if the value goes outside the boundries, it goes back to it's opposite boundry and starts counting from it.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampPingPong(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between min and max; When a value reaches min or max, it will start counting towards the opposite direction in a "ping-pong" style.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampPingPong(System.Int32,WarWolfWorks.Utility.IntRange)">
            <summary>
            Clamps a value between min and max; When a value reaches min or max, it will start counting towards the opposite direction in a "ping-pong" style.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampPingPong(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between min and max; When a value reaches min or max, it will start counting towards the opposite direction in a "ping-pong" style.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.ClampPingPong(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Clamps a value between min and max; When a value reaches min or max, it will start counting towards the opposite direction in a "ping-pong" style.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves a towards b by speed.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.IsFormal(System.Single)">
            <summary>
            Returns true if a float is NaN, Infinity or Negative Infinity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.IsApproximate(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if numberToApproximate is not lower than or higer than numberToCompare using approximation as range.
            </summary>
            <param name="NumberToApproximate"></param>
            <param name="NumberToCompare"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.MiddleMan(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.IsWithinRange(System.Single,WarWolfWorks.Utility.FloatRange)">
            <summary>
            Returns true if the value given is not higher than range.Max nor lower than range.Min.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.WWWMath.IsWithinRange(System.Int32,WarWolfWorks.Utility.IntRange)">
            <summary>
            Returns true if the value given is not higher than range.Max nor lower than range.Min.
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Disappointment">
            <summary>
            Don't.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Disappointment.MeterToBaldEaglePerObeseChild(System.Single)">
            <summary>
            Returns a metric value into Bald eagle per obese child.
            </summary>
            <param name="meters"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Disappointment.Freeze">
            <summary>
            Freezes the program using this library.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Disappointment.CauseStackOverflow(System.Boolean)">
            <summary>
            Causes a stack overflow.
            </summary>
            <param name="cause">Only causes a stack overflow if true.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Disappointment.UnityGameStressTest(System.Single,UnityEngine.MonoBehaviour)">
            <summary>
            Overloads the first active Unity scene with random objects, 
            changes the position of original ones, might delete their components, or them.
            If extremity is over 50, it additionally causes a stack overflow per GameObject created...
            Because science!
            </summary>
            <param name="extremity">How "Intense" should the stress test be. 0 is nothing, 100 is massacre.</param>
            <param name="handler"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Disappointment.GetRandomComponent">
            <summary>
            Gets a random Unity component type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Rendering">
            <summary>
            Contains all methods related to rendering.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.MaskGetter(System.Int32[])">
            <summary>
            Returns LayerMask int value of all layers. Useful for Raycasting.
            </summary>
            <param name="layers"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.LayerNameToIndex(System.String)">
            <summary>
            Converts given maskname into it's layer number.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.MaskToLayer(System.Int32)">
            <summary> 
            Converts given bitmask to it's layer number. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.IsVisibleFrom(UnityEngine.Renderer,UnityEngine.Camera)">
            <summary>
            Returns true if a renderer is visible from a Camera's view.
            </summary>
            <param name="renderer"></param>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Rendering.RotationShakeType">
            <summary>
            Determines the shaking type of <see cref="M:WarWolfWorks.Utility.Hooks.Rendering.Shake(UnityEngine.MonoBehaviour,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single,WarWolfWorks.Utility.Hooks.Rendering.RotationShakeType)"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Rendering.RotationShakeType.None">
            <summary>
            Doesn't shake.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Rendering.RotationShakeType.zAxis">
            <summary>
            Shakes the Z rotation of a camera. (2D)
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Rendering.RotationShakeType.FullRandom">
            <summary>
            Shakes every axis. (3D)
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.Shake(UnityEngine.MonoBehaviour,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single,WarWolfWorks.Utility.Hooks.Rendering.RotationShakeType)">
            <summary>
            Shakes a given Vector and Quaternion value. Make sure to pass a property for both values or this method will not work.
            </summary>
            <param name="host"></param>
            <param name="shake"></param>
            <param name="eulerRotation"></param>
            <param name="intensity"></param>
            <param name="duration"></param>
            <param name="speed"></param>
            <param name="rotationShake"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Rendering.LayerIdsToNames(System.Int32[])">
            <summary>
            Retuns an array of layer names based on ids given.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Text">
            <summary>
            Contains all Regex, string and StringBuilder utilities.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Text.RainbowTextStarter">
            <summary>
            Used to tag a string section to start a rainbow text.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Text.RainbowTextEnder">
            <summary>
            Used to tag a string section to stop a rainbow text.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.ToRainbow(System.String,System.Int32,UnityEngine.Color[])">
            <summary>
            Puts a string value into a rainbow color using Unity's Rich Text format.
            </summary>
            <param name="original"></param>
            <param name="frequency"></param>
            <param name="colorsToUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.StringWrapper(System.String,System.ValueTuple{System.Char,System.Char})">
            <summary>
            Wraps original between wrappers.Item1 and wrappers.Item2
            </summary>
            <param name="original"></param>
            <param name="wrappers"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.StringWrapper(System.String,System.Char,System.Char)">
            <summary>
            Wraps original between startWrapper and endWrapper.
            </summary>
            <param name="original"></param>
            <param name="startWrapper"></param>
            <param name="endWrapper"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.String,System.String)">
            <summary>
            Cuts out a string between from and to.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsKanji(System.String)">
            <summary>
            Returns true if the given string contains a Kanji character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsHiragana(System.String)">
            <summary>
            Returns true if the given string contains a Hiragana character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsKatakana(System.String)">
            <summary>
            Returns true if the given string contains a Katakana character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.IsJapanese(System.String)">
            <summary>
            Returns true if the given string contains either a Kanji, Hiragana or Katakana character.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.Char,System.Char)">
            <summary>
            Cuts out a string between from and to in char values.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Hooks.Colors">
            <summary>
            Contains all Color utilities.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.ToNegative(UnityEngine.Color)">
            <summary>
            Returns the original color with it's values being put into negatives. (If a value is negative, it will be put back to positive)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.ToAbsoluteNegative(UnityEngine.Color)">
            <summary>
            Returns the original color with it's values being put into negatives. (If a value is negative, it will be kept as is)
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.Reverse(UnityEngine.Color)">
            <summary>
            Short for <see cref="P:UnityEngine.Color.white"/> - original.
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.PrimaryColors">
            <summary>
            Returns in order: Color.red, Color.yellow, Color.blue.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.MainColors">
            <summary>
            Returns in order: Color.red, Color.yellow, Color.cyan, Color.blue, Color.magenta
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.Colors.RainbowColors">
            <summary>
            Returns all colors of the rainbow in descending order.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.ColorToHex(UnityEngine.Color)">
            <summary>
            Returns the hexcode value of a color. (Pointer of <see cref="M:UnityEngine.ColorUtility.ToHtmlStringRGB(UnityEngine.Color)"/>)
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MiddleMan(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Returns the median of two given colors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MiddleMan(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Returns the median of two given colors, where percentage 0 is a, 0.5 is the exact median, and 1 is b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="percentage"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Colors.MiddleMan(System.Collections.Generic.ICollection{UnityEngine.Color})">
            <summary>
            Returns the average of all colors inside a collection.
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToRainbow(System.String,System.Int32,UnityEngine.Color[])">
            <summary>
            Puts a string value into a rainbow text using Unity's Rich Text format.
            </summary>
            <param name="original"></param>
            <param name="frequency"></param>
            <param name="colorsToUse"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cutout(System.String,System.String,System.String)">
            <summary>
            Extention method for <see cref="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.String,System.String)"/>.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Cutout(System.String,System.Char,System.Char)">
            <summary>
            Extention method for <see cref="M:WarWolfWorks.Utility.Hooks.Text.Cutout(System.String,System.Char,System.Char)"/>.
            </summary>
            <param name="original"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsApproximate(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if numberToApproximate is not lower than or higer than numberToCompare using approximation as range.
            </summary>
            <param name="NumberToApproximate"></param>
            <param name="NumberToCompare"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Truncate(System.Single,System.Int32)">
            <summary>
            Cuts a float to digits length.
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToPositive(System.Single)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(System.Single)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToPositive(System.Int32)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(System.Int32)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToPositive(System.Int64)">
            <summary>
            If value given is negative, it will be turned into it's positive value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(System.Int64)">
            <summary>
            If value given is positive, it will be turned into it's negative value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToNegative(UnityEngine.Color)">
            <summary>
            Puts all values of a given color into negatives. (If a value was negative, it will be put into positive)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector4)">
            <summary>
            Extention method. Points to <see cref="M:WarWolfWorks.Utility.Hooks.Vectors.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector4)"/>.
            </summary>
            <param name="rt"></param>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Extention method. Points to <see cref="M:WarWolfWorks.Utility.Hooks.Vectors.SetAnchoredUI(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2)"/>.
            </summary>
            <param name="rt"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetAnchoredUI(UnityEngine.RectTransform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Extention method. Points to <see cref="M:WarWolfWorks.Utility.Hooks.Vectors.SetAnchoredUI(UnityEngine.RectTransform,System.Single,System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="rt"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetAnchoredPosition(UnityEngine.RectTransform)">
            <summary>
            Returns the anchored position of a <see cref="T:UnityEngine.RectTransform"/> in <see cref="T:UnityEngine.Vector4"/>: X = minX, Y = minY, z = maxX, W = maxY.
            </summary>
            <param name="rt"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector4)">
            <summary>
            Returns true if the given position is within the bounds given. (<see cref="T:UnityEngine.Vector4"/> bounds: X = minX, Y = minY, z = maxX, W = maxY)
            </summary>
            <param name="position"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsInsideBounds(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns true if the given position is within the bounds given.
            </summary>
            <param name="position"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Find``1(``0[],System.Predicate{``0})">
            <summary>
            <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.Find``1(``0[],System.Predicate{``0})"/> Pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.FindIndex``1(``0[],System.Predicate{``0})"/> Pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toUse"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ForEach``1(``0[],System.Action{``0})">
            <summary>
            <see cref="M:WarWolfWorks.Utility.Hooks.Enumeration.ForEach``1(``0[],System.Action{``0})"/> Pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RemoveNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list with all null elements removed (if any)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableContains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns true if the given <see cref="T:System.Collections.Generic.ICollection`1"/> has toLookfor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="toLookfor"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ReturnFromEnumerable``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns an item from the given collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="toLookFor"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Itterates through each element <typeparamref name="T"/>, calls it's <typeparamref name="T"/>.ToString()
            and returns all of them in a string array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first instance of a null item inside a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyIndex``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns the index of the first element T equal to null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyIndex``1(``0[])">
            <summary>
            Returns the index of the first element T equal to null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyIndex``1(``0[],System.Int32)">
            <summary>
            Returns the index of the first element T equal to null starting from specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyIndex``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns the index of the first element T equal to null starting from specified index up to count times upwards in the enumerator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyIndex``1(``0[],WarWolfWorks.Utility.IntRange)">
            <summary>
            Returns index of the first element T equal to null starting from IntRange.Min to IntRange.Max.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetEmptyIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the index of the first element T equal to null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetItemIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of the first element equal to <typeparamref name="T"/> given.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.SetCollectionSizeIfNull``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.ICollection`1"/> of given size if collection passed was null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToQueueSized``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Boolean)">
            <summary>
            Takes <paramref name="size"/> elements of the given collection and puts them as a <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Collection to itterate through.</param>
            <param name="size">Amount of items from <paramref name="collection"/> to itterate through.</param>
            <param name="fromEnd">If true, it will start from collection's Count-1 and go in descending order to get items, instead of 0 in ascending order.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToStackSized``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Boolean)">
            <summary>
            Takes <paramref name="size"/> elements of the given collection and puts them as a <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Collection to itterate through.</param>
            <param name="size">Amount of items from <paramref name="collection"/> to itterate through.</param>
            <param name="fromEnd">If true, it will start from collection's Count-1 and go in descending order to get items, instead of 0 in ascending order.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetItemsFromTupleIndex``1(System.Collections.Generic.ICollection{System.ValueTuple{``0,``0}},System.Int32)">
            <summary>
            Gets all <typeparamref name="T"/> items inside a <see cref="T:System.ValueTuple`2"/> based on item index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">If 0, it returns Item1, otherwise returns Item2.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetItemsFromTupleIndex``1(System.Collections.Generic.ICollection{System.ValueTuple{``0,``0,``0}},System.Int32)">
            <summary>
            Gets all <typeparamref name="T"/> items inside a <see cref="T:System.ValueTuple`3"/> based on item index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">If 0, it returns Item1; if 1, returns Item2; otherwise returns Item3.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RemoveArrayFromString(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes an array of strings from original.
            </summary>
            <param name="original"></param>
            <param name="removers"></param>
            <completionlist cref="T:System.String"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RotateTo(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Creates a rotation from original position to destination.
            </summary>
            <param name="original"></param>
            <param name="destination"></param>
            <param name="reversed"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RotateTowards2D(UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean,System.Single)">
            <summary>
             Creates a rotation from center position to destination using Atan2.
            </summary>
            <param name="center"></param>
            <param name="destination"></param>
            <param name="reversed"></param>
            <param name="adder">Z rotation to add onto the result.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RotateToNormalized(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Equivalent to <see cref="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3)"/> with both vectors being normalized before calculation.
            </summary>
            <param name="original"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToByteArray(System.String)">
            <summary>
            Equivalent to ASCII <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToStringFromBytes(System.Byte[])">
            <summary>
            Equivalent to ASCII <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/>.
            </summary>
            <param name="byt"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.HasMethod(System.Object,System.String)">
            <summary>
            Returns true if a given object has a method named with methodName.
            </summary>
            <param name="objectToCheck"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Attempts to call a method by name from an object.
            </summary>
            <param name="objectToCheck"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.CallMethod(System.Object,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Attempts to call a method by name from an object using custom bindings.
            </summary>
            <param name="objectToCheck"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <param name="customBind"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetAttributeValue``2(System.Type,System.Func{``0,``1})">
            <summary>
            Returns an attribute value based on type and func given.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="type"></param>
            <param name="valueSelector"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.StartCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Starts a singleton-type unity coroutine.
            </summary>
            <param name="caller"></param>
            <param name="routine"></param>
            <param name="isRunningBool"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.StopCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Boolean@)">
            <summary>
            Stops a singleton-type unity coroutine.
            </summary>
            <param name="caller"></param>
            <param name="routine"></param>
            <param name="isRunningBool"></param>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.HooksMethods">
            <summary>
            Returns MethodInfo of all public methods inside <see cref="T:WarWolfWorks.Utility.Hooks"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.FullMethods">
            <summary>
            Returns <see cref="T:System.Reflection.MethodInfo"/> of all public methods inside <see cref="T:WarWolfWorks.Utility.Hooks"/> and all of it's nested classes.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ParseType(System.String)">
            <summary>
            Tries to parse a type with <see cref="M:System.Type.GetType(System.String)"/>; 
            if it fails, it then tries to itterate through every Assembly inside <see cref="P:System.AppDomain.CurrentDomain"/> to parse the given typeName.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.CompareTo(System.Object,System.Object,System.Boolean)">
            <summary>
            Returns the CompareTo method based on integer type of the value given; If the object(s) given are non-standard data (like int, float, double, etc) it will return 0.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="matchType">If true, both objects must be of the same type to work.</param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ParseTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Itterates through each string, and uses <see cref="M:WarWolfWorks.Utility.Hooks.ParseType(System.String)"/>.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Implements(System.Type,System.Type)">
            <summary>
            Returns true if type is implementing implementation.
            </summary>
            <param name="type"></param>
            <param name="implementation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ImplementsGeneric(System.Type,System.Type)">
            <summary>
            Returns true if type is implementing the generic implementation.
            </summary>
            <param name="type"></param>
            <param name="genericImplementation"></param>
            <returns></returns>
        </member>
        <member name="F:WarWolfWorks.Utility.Hooks.TAG_PLAYER">
            <summary>
            Returns the default player tag for Unity.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.RealTimeSecond">
            <summary>
            <see cref="P:UnityEngine.Time.smoothDeltaTime"/> Pointer.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.FixedSecond">
            <summary>
            <see cref="P:UnityEngine.Time.fixedDeltaTime"/> Pointer.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.FixedFullSecond">
            <summary>
            Returns 60 * <see cref="P:UnityEngine.Time.fixedDeltaTime"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.RemoveElement(System.Collections.Generic.List{System.Int32}@,System.Int32)">
            <summary>
            Removes element at toRemove index from ref list.
            </summary>
            <param name="list"></param>
            <param name="toRemove"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ParseNullable``1(System.String)">
            <summary>
            Tries to parse an Enum, if not successful, it returns null instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Parse``1(System.String)">
            <summary>
            Equivalent to <see cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)"/>, with the painful parts taken care of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetKeyStroke(System.Int32)">
            <summary>
            Returns the first keycode pressed in the same frame as <see cref="M:WarWolfWorks.Utility.Hooks.GetKeyStroke(System.Int32)"/> was called in.
            </summary>
            <param name="type">0 = <see cref="M:UnityEngine.Input.GetKey(UnityEngine.KeyCode)"/>; 1 = <see cref="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)"/>; 2 = <see cref="M:UnityEngine.Input.GetKeyUp(UnityEngine.KeyCode)"/></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.CheckForMainThread">
            <summary>
            Checks if the current thread is the main thread.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Hooks.UtilityCanvas">
            <summary>
            Canvas which is created under the name UtilitiesCanvas if no canvas was present on the scene.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ToSingle(System.String)">
            <summary>
            Equivalent to <see cref="M:System.Single.Parse(System.String,System.IFormatProvider)"/> where <see cref="T:System.IFormatProvider"/>
            is <see cref="T:System.Globalization.CultureInfo"/>.InvariantCulture.NumberFormat.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.OverflowException"/>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.DestroyObject``1(``0)">
            <summary>
            Destroys a Unity Object using Object.Destroy().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDestroy"></param>
            <exception cref="T:UnityEngine.UnityException"/>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.Get2DRotationsAroundPoint(System.Single,System.Int32,System.Single)">
            <summary>
            Returns a list of rotations based around the amount given; amount 2 would return 0 and 180, 3 would return 0, 120 and 240, 4 would return 0, 80, 160 and 240, etc...
            </summary>
            <param name="offset"></param>
            <param name="amount"></param>
            <param name="maxRotation"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.AddEventTriggerListener(UnityEngine.EventSystems.EventTrigger,UnityEngine.EventSystems.EventTriggerType,System.Action{UnityEngine.EventSystems.BaseEventData})">
            <summary>
            Adds an event to a given trigger.
            </summary>
            <param name="trigger"></param>
            <param name="eventType"></param>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:UnityEngine.UnityException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ObjectParent(UnityEngine.Collider2D)">
            <summary>
             Deprecated.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetParent(UnityEngine.Collider2D)">
            <summary>
            Returns the parent of the collider. If collider is already the parent, it returns the collider's GameObject instead.
            </summary>
            <param name="collider"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetOldestParent(UnityEngine.Transform)">
            <summary>
            Gets the oldest parent inside the hierarchy.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.TrueParent(UnityEngine.GameObject)">
            <summary>
            Returns the oldest parent in the hierarchy of the given object.
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.CallStaticMethod(System.Type,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Calls a method by name inside a static class.
            </summary>
            <param name="classToCheck"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <param name="specificBind"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ObjectParent(UnityEngine.GameObject)">
            <summary>
            Returns the parent gameobject of the given <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="Gobj"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.GetSpriteFromSpriteSheet(System.String,System.String)">
            <summary>
            Returns a sprite from a Unity multisprite spritesheet; 
            SpriteSheetName is the name of the file, spriteName is the name of the sprite itself. 
            (sprite file MUST be in a resources folder)
            </summary>
            <param name="SpriteSheetName"></param>
            <param name="spriteName"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Returns true if type is subclass of baseType.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableConcat(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns all values merged into one with origin as base value, from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is string.
            </summary>
            <param name="origin"></param>
            <param name="adders"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableConcat(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns all values merged into one with origin as base value, from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is string.
            </summary>
            <param name="adders"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableConcat(System.Single,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns all values merged into one with origin as base value, from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is float.
            </summary>
            <param name="origin"></param>
            <param name="adders"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableConcat(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns all values merged into one from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is float.
            </summary>
            <param name="adders"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableConcat(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Merges all int values of a list into one value.
            </summary>
            <param name="origin"></param>
            <param name="adders"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.EnumerableConcat(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Merges all int values of a list into one value.
            </summary>
            <param name="adders"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Hooks.ConvertEnum``1(System.Int32)">
            <summary>
            Converts a given int value into an Enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.IntRange">
            <summary>
            Range struct for Clamping/Range utility in <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.GetClampedValue(System.Int32)">
            <summary>
            Returns the value given clamped between MinRange and MaxRange.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.IntRange.IsWithinRange(System.Int32)">
            <summary>
            Returns true if the given value is within Min (inclusive) and Max (inclusive).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.Utility.Langroup">
            <summary>
            Used by <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Langroup.Value">
            <summary>
            Value of this group in string.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Langroup.Language">
            <summary>
            What language is this value used for.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Langroup.#ctor(System.String,UnityEngine.SystemLanguage)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.Langroup"/> instance.
            </summary>
            <param name="value"></param>
            <param name="language"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Langroup.op_Implicit(System.ValueTuple{System.String,UnityEngine.SystemLanguage})~WarWolfWorks.Utility.Langroup">
            <summary>
            Implicitly converts a tuple into a Langroup.
            </summary>
            <param name="tuple"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.LanguageString">
            <summary>
            Struct which returns a string based on language given; If used directly, it will use <see cref="P:UnityEngine.Application.systemLanguage"/> to determine the language.
            To use with a specified language, use an indexer.
            (Example: ItemName = LanguageItemName[<see cref="F:UnityEngine.SystemLanguage.Polish"/>])
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LanguageString.English">
            <summary>
            Returned by default.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LanguageString.Values">
            <summary>
            All values contained by this <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.#ctor(System.String,System.ValueTuple{System.String,UnityEngine.SystemLanguage}[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
            <param name="english"></param>
            <param name="other"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.#ctor(System.String,WarWolfWorks.Utility.Langroup[])">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.LanguageString"/>.
            </summary>
            <param name="english"></param>
            <param name="other"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.LanguageString.Item(UnityEngine.SystemLanguage)">
            <summary>
            Returns a string associated with this language; If not found, will return <see cref="F:WarWolfWorks.Utility.LanguageString.English"/> as default.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.ToString">
            <summary>
            Returns the text instead of the full type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LanguageString.op_Implicit(WarWolfWorks.Utility.LanguageString)~System.String">
            <summary>
            Pointer to <see cref="T:WarWolfWorks.Utility.LanguageString"/>[<see cref="P:WarWolfWorks.Internal.Settings.LibraryLanguage"/>].
            </summary>
            <param name="languageString"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.LevelFloat">
            <summary>
            A float value which changes based on it's level.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.LevelFloat.LevelValue">
            <summary>
            Used with <see cref="T:WarWolfWorks.Utility.LevelFloat"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.LevelValue.Value">
            <summary>
            Value of this <see cref="T:WarWolfWorks.Utility.LevelFloat.LevelValue"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.LevelFloat.LevelValue.Level">
            <summary>
            Level at which <see cref="F:WarWolfWorks.Utility.LevelFloat.LevelValue.Value"/> will be used.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.LevelValue.#ctor(System.Single,System.Int32)">
            <summary>
            Creates a new <see cref="T:WarWolfWorks.Utility.LevelFloat.LevelValue"/>.
            </summary>
            <param name="value"></param>
            <param name="level"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.LevelFloat.DefaultValue">
            <summary>
            Value which is used when the current level is 0.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.LevelFloat.Level">
            <summary>
            This LevelFloat's current level.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.LevelFloat.Values">
            <summary>
            All values used to return the LevelFloat's value.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.Clone">
            <summary>
            Clones this LevelFloat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.CompareTo(System.Single)">
            <summary>
            Implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.Equals(System.Single)">
            <summary>
            Returns true if this <see cref="T:WarWolfWorks.Utility.LevelFloat"/>'s current value equals other.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.GetTypeCode">
            <summary>
            Returns <see cref="F:System.TypeCode.Single"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.#ctor(System.Single,System.Int32,WarWolfWorks.Utility.LevelFloat.LevelValue[])">
            <summary>
            Creates a <see cref="T:WarWolfWorks.Utility.LevelFloat"/>.
            </summary>
            <param name="_DefaultValue"></param>
            <param name="_Level"></param>
            <param name="_Values"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.GetHashCode">
            <summary>
            Returns this <see cref="T:WarWolfWorks.Utility.LevelFloat"/>'s hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.op_Implicit(WarWolfWorks.Utility.LevelFloat)~System.Single">
            <summary>
            Implicitly returns <see cref="P:WarWolfWorks.Utility.LevelFloat.Value"/>.
            </summary>
            <param name="lf"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.LevelFloat.op_Implicit(System.Single)~WarWolfWorks.Utility.LevelFloat">
            <summary>
            Returns a <see cref="T:WarWolfWorks.Utility.LevelFloat"/> with no level values, level at 0 and defaultVal as the implicit value given.
            </summary>
            <param name="defval"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.RenameAttribute">
            <summary>
            Renames a variable in the inspector without changing it in code or creating a custom editor.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.RenameAttribute.label">
            <summary>
            Name that it will be changed to.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.RenameAttribute.#ctor(System.String)">
            <summary>
            Renames a variable in the inspector without changing it in code or creating a custom editor.
            </summary>
            <param name="label">Name that it will be changed to.</param>
        </member>
        <member name="T:WarWolfWorks.Utility.Rotation">
            <summary>
            Utility component for rotation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.GetDestination">
            <summary>
            Rotation towards which this <see cref="T:WarWolfWorks.Utility.Rotation"/> is destinated.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.CurrentRotation">
            <summary>
            The Currently applied rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.DefaultEulerRotation">
            <summary>
            The Euler Rotation that's used as the default rotation.
            </summary>
        </member>
        <member name="F:WarWolfWorks.Utility.Rotation.baseRotationSpeed">
            <summary>
            Determines the base rotation speed of this <see cref="T:WarWolfWorks.Utility.Rotation"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.BaseRotationSpeed">
            <summary>
            Pointer to <see cref="F:WarWolfWorks.Utility.Rotation.baseRotationSpeed"/>, overridable.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.RotationSpeed">
            <summary>
            The absolute RotationSpeed used by this <see cref="T:WarWolfWorks.Utility.Rotation"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.Locked">
            <summary>
            The object's Lock state; See <see cref="T:WarWolfWorks.Interfaces.ILockable"/> for more info.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.Rotation.OnLocked">
            <summary>
            Called when the object is locked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.Rotation.OnUnlocked">
            <summary>
            Called when the object is unlocked (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.SetLock(System.Boolean)">
            <summary>
            Locks or Unlocks this object (<see cref="T:WarWolfWorks.Interfaces.ILockable"/> implementation).
            </summary>
            <param name="to"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.ToRotateX">
            <summary>
            <see cref="T:UnityEngine.Transform"/> which will be used for the X rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.ToRotateY">
            <summary>
            <see cref="T:UnityEngine.Transform"/> which will be used for the Y rotation.
            </summary>
        </member>
        <member name="P:WarWolfWorks.Utility.Rotation.ToRotateZ">
            <summary>
            <see cref="T:UnityEngine.Transform"/> which will be used for the Z rotation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.Update">
            <summary>
            Unity's Update method, used by the <see cref="T:WarWolfWorks.Utility.Rotation"/> to apply it's transform.rotation.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.TryGetRotator(UnityEngine.Transform@,WarWolfWorks.Utility.Axis)">
            <summary>
            Gets the rotated transform of the specified axis. Returns false if null. (Doesn't support Axis Flags)
            </summary>
            <param name="rotator"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.SetRotator(UnityEngine.Transform,WarWolfWorks.Utility.Axis)">
            <summary>
            Sets the rotated transform of the specified Axis. (Can be set to null; Supports Axis Flags)
            </summary>
            <param name="to"></param>
            <param name="of"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.SetRotation(UnityEngine.Quaternion)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Utility.Rotation"/>.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.Rotation.SetRotation(UnityEngine.Vector3)">
            <summary>
            Sets the destination of this <see cref="T:WarWolfWorks.Utility.Rotation"/> in euler angles.
            </summary>
            <param name="toApply"></param>
        </member>
        <member name="T:WarWolfWorks.Utility.Singleton`1">
            <summary>
            Inherit from this class with generic type T being the name of your class to make a class that implements a Singleton pattern.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WarWolfWorks.Utility.Singleton`1.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.TransformLimiter">
            <summary>
            Limits a transform's position to specified positions or transforms.
            (Explicitly convertible to Transform)
            </summary>
        </member>
        <member name="T:WarWolfWorks.Utility.TransitionManager">
            <summary>
            Class used for transitions between events.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.TransitionManager.OnTransitionStart">
            <summary>
            This event is invoked when ActivateTransition(int ofIndex) is called.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.TransitionManager.OnTransitionComplete">
            <summary>
            This event is invoked once the transition's alpha is at 1.
            </summary>
        </member>
        <member name="E:WarWolfWorks.Utility.TransitionManager.OnTransitionEnd">
            <summary>
            This event is invoked after OnTransitionComplete when transition's alpha is at 0.
            </summary>
        </member>
        <member name="M:WarWolfWorks.Utility.TransitionManager.SetTransition(System.Int32,UnityEngine.Sprite,UnityEngine.Color,System.Single)">
            <summary>
            Sets a transition to the specified index.
            </summary>
            <param name="ofIndex"></param>
            <param name="spriteUsed"></param>
            <param name="color"></param>
            <param name="speed"></param>
        </member>
        <member name="M:WarWolfWorks.Utility.TransitionManager.ActivateTransition(System.Int32)">
            <summary>
            Activates a transition of the specified index.
            </summary>
            <param name="ofIndex"></param>
        </member>
        <member name="P:WarWolfWorks.Utility.TransitionManager.CurrentTransitionProgress">
            <summary>
            Gets the progress of the currently played transition.
            </summary>
        </member>
    </members>
</doc>
