<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WarWolfWorks.EditorBase</name>
    </assembly>
    <members>
        <member name="T:WarWolfWorks.EditorBase.Constants">
            <summary>
            All constant values of the <see cref="N:WarWolfWorks.EditorBase"/> namespace.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EVN_STAT_STACKING">
            <summary>
            Display name of a <see cref="!:IStat"/>'s Stacking.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EVN_STAT_AFFECTIONS">
            <summary>
            Display name of a <see cref="!:IStat"/>'s Affections.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EV_ITEM_NAME_WIDTH_DIV">
            <summary>
            The amount by which the width gets divided for <see cref="!:ItemEditor"/>'s name field.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EV_ENTITYATTACK_ATK_LABEL_WIDTH_DIV">
            <summary>
            The divider of the with of the attack label.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.GUIS_DefaultTitle_0">
            <summary>
            A title <see cref="T:UnityEngine.GUIStyle"/> used to separate variables into different categories.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EV_DEFKEYS_NAME">
            <summary>
            Name of the <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> editor window.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EV_DEFKEYS_KEY_CELL_SIZE_Y">
            <summary>
            The Y size of key elements.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EV_DEFKEYS_KEY_CELL_PADDING_Y">
            <summary>
            The padding between keys.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Constants.EV_DEFKEYS_KEY_NEW">
            <summary>
            The default name of a new key.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Custom.CompleteNoSMonoBehaviourEditor">
            <summary>
            Custom editor for all monobehaviours flagged with <see cref="T:WarWolfWorks.Attributes.CompleteNoS"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Custom.CompleteNoSMonoBehaviourEditor.OnInspectorGUI">
            <summary>
            Draws an inspector with all fields that start with "s_" or "S_" if the <see cref="T:UnityEngine.MonoBehaviour"/> was marked with <see cref="T:WarWolfWorks.Attributes.CompleteNoS"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Custom.CompleteNoSScriptableObjectEditor">
            <summary>
            Custom editor for all scriptable objects flagged with <see cref="T:WarWolfWorks.Attributes.CompleteNoS"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Custom.CompleteNoSScriptableObjectEditor.OnInspectorGUI">
            <summary>
            Draws an inspector with all fields that start with "s_" or "S_" if the <see cref="T:UnityEngine.MonoBehaviour"/> was marked with <see cref="T:WarWolfWorks.Attributes.CompleteNoS"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Custom.CreateEmptyScriptableObject.Create">
            <summary>
            Creates the missing file to the selected file's folder.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Custom.EnumListDisplayer">
            <summary>
            Use this editor to display an <see cref="T:System.Enum"/>'s value in a list fashion.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Custom.EnumListDisplayer.Enable">
            <summary>
            Shows a <see cref="T:WarWolfWorks.EditorBase.Custom.EnumListDisplayer"/> menu.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Custom.EnumListDisplayer.EnumValues">
            <summary>
            Currently displayed Enum values (Only used for int-type enums)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Custom.EnumListDisplayer.EnumValuesShort">
            <summary>
            Currently displayed Enum values (Only used for short-type enums)
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Custom.EnumListDisplayer.EnumValuesLong">
            <summary>
            Currently displayed Enum values (Only used for long-type enums)
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Interfaces.INyuComponentInternalEditor">
            <summary>
            Used for WarWolfWorks pre-made <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuComponent"/> editors.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.Interfaces.INyuComponentInternalEditor.DrawDefaultEditor">
            <summary>
            Does it still draw the default inspector/editor?
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.Interfaces.INyuComponentInternalEditor.EditorType">
            <summary>
            Which component is it used for.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.INyuComponentInternalEditor.OnEnable(UnityEditor.SerializedObject)">
            <summary>
            Editor's OnEnable equivalent.
            </summary>
            <param name="serializedObject"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.INyuComponentInternalEditor.OnInspectorGUI">
            <summary>
            Draws the inspector.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Interfaces.INyuSerializedEditor">
            <summary>
            Class used to make custom editors of <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuComponent"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.Interfaces.INyuSerializedEditor.EditorOf">
            <summary>
            What component is it an editor for.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.INyuSerializedEditor.OnEnable(UnityEditor.SerializedObject)">
            <summary>
            Equivalent to Editor's OnEnable.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.INyuSerializedEditor.OnDisable">
            <summary>
            Equivalent to Editor's OnDisable.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.INyuSerializedEditor.OnInspectorGUI">
            <summary>
            Equivalent to Editor's OnInspectorGUI.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Interfaces.IService">
            <summary>
            Used with <see cref="T:WarWolfWorks.EditorBase.Services.ServicesWindow"/> to draw an editor window.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.Interfaces.IService.Name">
            <summary>
            Name to be displayed on the tab of the <see cref="T:WarWolfWorks.EditorBase.Services.ServicesWindow"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.IService.OnEnable">
            <summary>
            Invoked when <see cref="T:WarWolfWorks.EditorBase.Services.ServicesWindow"/> is enabled.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.IService.OnDisable">
            <summary>
            Invoked when <see cref="T:WarWolfWorks.EditorBase.Services.ServicesWindow"/> is disabled or another service has been focused.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Interfaces.IService.Draw">
            <summary>
            Invoked every frame when <see cref="T:WarWolfWorks.EditorBase.Services.ServicesWindow"/> focuses this window.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuAttackInternalEditor.WarWolfWorks#EditorBase#Interfaces#INyuComponentInternalEditor#OnInspectorGUI">
            <summary>
            Draws the custom inspector.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.NyuEntities.NyuEditor">
            <summary>
            Base editor for <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>. If you wish to make a custom editor for <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>,
            override PostOnInspectorGUI.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.NyuTarget">
            <summary>
            Returns the target cast as <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.AddExpanded">
            <summary>
            The expanded state of the add section.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.SelectedIndex">
            <summary>
            Used for color-selection display.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.OnDisabled">
            <summary>
            Override this method to get the equivalent of OnDisable.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.RefreshDrawnComponents">
            <summary>
            Refreshes components to be drawn on the entity's core inspector.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.RefreshTypes">
            <summary>
            Refreshes all reflected types addable to the Nyu entity.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.RefreshReorderableTypeList">
            <summary>
            Refreshes the reorderable type list.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.RefreshOtherProperties">
            <summary>
            Refreshes all properties to be drawn in the base <see cref="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.PostOnInspectorGUI"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.Event_DrawListHeader(UnityEngine.Rect)">
            <summary>
            The <see cref="F:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.ReorderableTypeList"/>'s header.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.Event_DrawList(UnityEngine.Rect,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Used to draw a <see cref="F:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.ReorderableTypeList"/>'s cell.
            </summary>
            <param name="rect"></param>
            <param name="index"></param>
            <param name="isActive"></param>
            <param name="isFocused"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.OnEnabled">
            <summary>
            Override this method to get the equivalent of an editor's OnEnable method.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.OnInspectorGUI">
            <summary>
            Draws <see cref="T:WarWolfWorks.NyuEntities.Nyu"/>'s core inspector.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuEditor.PostOnInspectorGUI">
            <summary>
            Override this method to create a custom inspector.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.NyuEntities.Itemization.ItemEditor">
            <summary>
            Custom editor for <see cref="T:WarWolfWorks.EditorBase.NyuEntities.Itemization.ItemEditor"/>; It is also what sets a <see cref="T:WarWolfWorks.NyuEntities.Itemization.NyuItem"/>'s ID when not set.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.Itemization.ItemEditor.OnInspectorGUI">
            <summary>
            Draws the custom inspector.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuMovementInternalEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.NyuEntities.NyuRotationInternalEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.PropertyDrawers.CountdownNyuStatDrawer">
            <summary>
            Custom property drawer for <see cref="T:WarWolfWorks.NyuEntities.Statistics.CountdownStat"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.PropertyDrawers.LevelNyuStatDrawer">
            <summary>
            Custom property drawer for <see cref="T:WarWolfWorks.NyuEntities.Statistics.LevelStat"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.PropertyDrawers.NoSPropertyDrawer">
            <summary>
            Property drawer for <see cref="T:WarWolfWorks.Attributes.NoSAttribute"/>.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.PropertyDrawers.NoSPropertyDrawer.NoS_Detector">
            <summary>
            Detects a string that starts with "s_" or "S_".
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NoSPropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Sets the height to appropriate value based on if the property is of array type.
            </summary>
            <param name="property"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NoSPropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Changes the name of the label if <see cref="F:WarWolfWorks.EditorBase.PropertyDrawers.NoSPropertyDrawer.NoS_Detector"/> is a match.
            </summary>
            <param name="position"></param>
            <param name="property"></param>
            <param name="label"></param>
        </member>
        <member name="T:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer">
            <summary>
            Custom property drawer for the <see cref="T:WarWolfWorks.Interfaces.NyuEntities.INyuStat"/> value.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.FinalHeights">
            <summary>
            List of heights stored; Uses the highest value in the list as reference.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.FinalHeight">
            <summary>
            The final height applied; Used by <see cref="M:UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)"/>.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.BaseHeight">
            <summary>
            The base height of each line in a stat.
            </summary>
        </member>
        <member name="P:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.WidthDivider">
            <summary>
            Width of each cell.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.FinalWidth(UnityEngine.Rect)">
            <summary>
            Gets the width of a position for horizontal scaling.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            The OnGUI override.
            </summary>
            <param name="position"></param>
            <param name="property"></param>
            <param name="label"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.GUIStart(UnityEngine.Rect@)">
            <summary>
            Very first method executed in <see cref="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)"/>.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.GUIEnd">
            <summary>
            Very last method executed in <see cref="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.GUIDraw(UnityEngine.Rect@,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Executed after <see cref="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.GUIStart(UnityEngine.Rect@)"/> and before <see cref="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.GUIEnd"/>.
            </summary>
            <param name="position"></param>
            <param name="property"></param>
            <param name="label"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.ApplyFinalHeights">
            <summary>
            Applies the final height.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.DrawValue(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.String,UnityEngine.Rect@,System.Single)">
            <summary>
            Draws a stat value.
            </summary>
            <param name="position"></param>
            <param name="property"></param>
            <param name="x"></param>
            <param name="label"></param>
            <param name="finalRect"></param>
            <param name="xMin"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.DrawValueAsEnum(UnityEngine.Rect,System.Type,UnityEditor.SerializedProperty,System.Single,System.String,UnityEngine.Rect@,System.Single)">
            <summary>
            Draws a stat value, where the value is attempted to be drawn as an enum field.
            </summary>
            <param name="position"></param>
            <param name="enumType"></param>
            <param name="property"></param>
            <param name="x"></param>
            <param name="label"></param>
            <param name="finalRect"></param>
            <param name="xMin"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.DrawAffections(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single)">
            <summary>
            Draws affections.
            </summary>
            <param name="position"></param>
            <param name="property"></param>
            <param name="x"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.DrawAffectionsAsEnum(UnityEngine.Rect,System.Type,UnityEditor.SerializedProperty,System.Single)">
            <summary>
            Draws affections, where the values are drawn as an enum field.
            </summary>
            <param name="position"></param>
            <param name="enumType"></param>
            <param name="property"></param>
            <param name="x"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Points to <see cref="F:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.AppliedHeight"/>.
            </summary>
            <param name="property"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.IncrementRectHeight(UnityEngine.Rect@,System.Single)">
            <summary>
            Increments a rect's height by amount and adds it to <see cref="F:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.AppliedHeight"/>.
            </summary>
            <param name="rect"></param>
            <param name="amount"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.PropertyDrawers.NyuStatDrawer.IncrementRectHeight(UnityEngine.Rect@,System.Single@,System.Single)">
            <summary>
            Increments a rect's height by amount and increases the height value given by that same amount.
            </summary>
            <param name="rect"></param>
            <param name="height"></param>
            <param name="amount"></param>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Services.DefaultKeysService">
            <summary>
            Draws <see cref="T:WarWolfWorks.Utility.DefaultKeys"/> on the <see cref="T:WarWolfWorks.EditorBase.Services.ServicesWindow"/>.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Services.ServicesWindow">
            <summary>
            The class which displays the WarWolfWorks settings menu.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Services.ServicesWindow.Selected">
            <summary>
            The menu currently selected.
            </summary>
        </member>
        <member name="F:WarWolfWorks.EditorBase.Services.ServicesWindow.Tabs">
            <summary>
            All current service tabs.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.UI.MenusSystem.BasicIndexEventEditor">
            <summary>
            Custom editor for the <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent"/> class.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.UI.MenusSystem.BasicIndexEventEditor.OnInspectorGUI">
            <summary>
            The <see cref="T:WarWolfWorks.UI.MenusSystem.Assets.BasicIndexEvent"/> inspector drawing.
            </summary>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Utility.EditorHooks">
            <summary>
            Like <see cref="T:WarWolfWorks.Utility.Hooks"/>, but for the editor :Pog:.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllSerializedProperties(UnityEditor.SerializedObject,System.Boolean)">
            <summary>
            Returns all serialized properties inside a serialized object.
            </summary>
            <param name="serializedObject"></param>
            <param name="enterChildren"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllVisibleProperties(UnityEditor.SerializedObject,System.Boolean)">
            <summary>
            Returns all visible serialized properties inside a serialized object.
            (Does not include the first two entries m_Script and Base)
            </summary>
            <param name="serializedObject"></param>
            <param name="enterChildren"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllVisibleProperties(UnityEditor.SerializedObject,System.Boolean,System.Collections.Generic.List{UnityEditor.SerializedProperty}@,System.Collections.Generic.List{UnityEngine.GUIContent}@)">
            <summary>
            Returns all visible serialized properties inside a serialized object,
            as well as giving you a list of all <see cref="T:UnityEngine.GUIContent"/> with <see cref="P:UnityEditor.SerializedProperty.displayName"/> who start with "s_"
            or "S_" having their names corrected to be without them.
            (Does not include the first two entries m_Script and Base)
            </summary>
            <param name="serializedObject"></param>
            <param name="enterChildren"></param>
            <param name="properties"></param>
            <param name="propertyContents"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllVisibleProperties(UnityEditor.SerializedObject,System.Boolean,System.Collections.Generic.List{UnityEditor.SerializedProperty}@,System.Collections.Generic.List{UnityEngine.GUIContent}@,System.Boolean)">
            <summary>
            Returns all visible serialized properties inside a serialized object.
            if removesS is true, it will also give you a list of all <see cref="T:UnityEngine.GUIContent"/> with <see cref="P:UnityEditor.SerializedProperty.displayName"/> who start with "s_"
            or "S_" having their names corrected to be without them; Otherwise, gives the original <see cref="T:UnityEngine.GUIContent"/>.
            (Does not include the first two entries m_Script and Base)
            </summary>
            <param name="serializedObject"></param>
            <param name="enterChildren"></param>
            <param name="properties"></param>
            <param name="propertyContents"></param>
            <param name="removesS_"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllVisibleProperties(UnityEditor.SerializedProperty,System.Boolean,System.Collections.Generic.List{UnityEditor.SerializedProperty}@,System.Collections.Generic.List{UnityEngine.GUIContent}@,System.Boolean)">
            <summary>
            Returns all visible serialized properties inside a serialized property,
            as well as giving you a list of all <see cref="T:UnityEngine.GUIContent"/> with <see cref="P:UnityEditor.SerializedProperty.displayName"/> who start with "s_"
            or "S_" having their names corrected to be without them.
            (Does not include the first two entries m_Script and Base)
            </summary>
            <param name="serializedProperty"></param>
            <param name="enterChildren"></param>
            <param name="properties"></param>
            <param name="propertyContents"></param>
            <param name="removesS_"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllVisiblePropertiesWithAttributes``1(UnityEditor.SerializedObject,System.Boolean,System.Collections.Generic.List{System.ValueTuple{UnityEditor.SerializedProperty,``0[]}}@)">
            <summary>
            Returns all visible serialized properties inside a serialized object.
            (Does not include the first two entries m_Script and Base)
            Note: EXTREMELY SLOW.
            </summary>
            <param name="serializedObject"></param>
            <param name="enterChildren"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetAllVisiblePropertiesWithAttributes``1(UnityEditor.SerializedProperty,System.Boolean,System.Collections.Generic.List{System.ValueTuple{UnityEditor.SerializedProperty,``0[]}}@)">
            <summary>
            Returns all visible serialized properties inside a serialized property.
            Note: EXTREMELY SLOW.
            </summary>
            <param name="serializedProperty"></param>
            <param name="enterChildren"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.MultiSpace(System.Int32)">
            <summary>
            Calls <see cref="M:UnityEditor.EditorGUILayout.Space"/> in the multitude of counts.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.DividedWidth(UnityEngine.Rect,System.Int32)">
            <summary>
            Short for <see cref="P:UnityEngine.Rect.width"/> / <see cref="T:System.Int32"/>.
            </summary>
            <param name="of"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.SlickSeparator">
            <summary>
            Makes a separator line by exploiting <see cref="T:UnityEditor.EditorGUILayout"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.SlickSeparator(UnityEngine.Rect)">
            <summary>
            Makes a separator line by exploiting <see cref="T:UnityEditor.EditorGUILayout"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.SlickSeparatorNS">
            <summary>
            Makes a separator line by exploiting <see cref="T:UnityEditor.EditorGUILayout"/>. Doesn't make spaces before or after the line.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.SpacedLabel(System.String,UnityEngine.GUIStyle)">
            <summary>
            Makes a label with <see cref="M:UnityEditor.EditorGUILayout.Space"/> before and after it.
            </summary>
            <param name="title"></param>
            <param name="titleStyle"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.PropertyIsArray(UnityEditor.SerializedProperty)">
            <summary>
            Returns true if a property is an expand-like property, similar to an array. (All custom Serialized structs/classes return true)
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.DrawColoredSquare(UnityEngine.Rect,UnityEngine.Color)">
            <summary>
            Makes a square filled with the given color.
            </summary>
            <param name="position"></param>
            <param name="color"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.DrawTypeParse(UnityEngine.GUIContent,System.String,System.Type@,System.Type,System.Boolean)">
            <summary>
            Draws a type parser from a string field.
            </summary>
            <param name="label"></param>
            <param name="original"></param>
            <param name="returnType"></param>
            <param name="requiredSubtype"></param>
            <param name="canBeNull"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.GetColoredTexture(UnityEngine.Color)">
            <summary>
            Returns a texture to be used in the editor.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.RectSpace(UnityEngine.Rect@)">
            <summary>
            Makes the given rect go to it's maxY position, as well as calling <see cref="M:UnityEditor.EditorGUILayout.Space"/> equal to the difference
            between the current y position and the previous of the given rect.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.EventMouseInRect(UnityEngine.Rect)">
            <summary>
            Returns true if current event's mouse position is within the given rect.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects">
            <summary>
            All utility based around <see cref="T:UnityEngine.Rect"/>.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsWidth(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the width of all rects to the given width value.
            </summary>
            <param name="width"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsWidth(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the width of all rects to the given width value.
            </summary>
            <param name="width"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsWidth(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the width of all rects to the given width value.
            </summary>
            <param name="width"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsWidth(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the width of all rects to the given width value.
            </summary>
            <param name="width"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsHeight(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the height of all rects to the given height value.
            </summary>
            <param name="height"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsHeight(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the height of all rects to the given height value.
            </summary>
            <param name="height"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsHeight(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the height of all rects to the given height value.
            </summary>
            <param name="height"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsHeight(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the height of all rects to the given height value.
            </summary>
            <param name="height"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMinPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsXMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the X position of all rects to the given xPos value.
            </summary>
            <param name="xPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Rects.SetRectsYMaxPos(System.Single,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Sets the Y position of all rects to the given yPos value.
            </summary>
            <param name="yPos"></param>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <param name="rect3"></param>
            <param name="rect4"></param>
            <param name="rect5"></param>
        </member>
        <member name="T:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers">
            <summary>
            All utility based around drawing values/properties in the inspector.
            </summary>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.AutoStatField``2(UnityEngine.Rect,UnityEditor.SerializedProperty)">
            <summary>
            Draws a stat field; Determines what type of stat it is, and draws it accordingly.
            </summary>
            <param name="rect"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.AutoStatField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,System.Type)">
            <summary>
            Draws a stat field; Determines what type of stat it is, and draws it accordingly.
            </summary>
            <param name="rect"></param>
            <param name="property"></param>
            <param name="stackingType"></param>
            <param name="affectionsType"></param>
            <returns></returns>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.StatField``2(UnityEngine.Rect,UnityEditor.SerializedProperty)">
            <summary>
            Draws a <see cref="!:IStat"/> field.
            </summary>
            <param name="rect"></param>
            <param name="property"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.StatField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,System.Type)">
            <summary>
            Draws a <see cref="!:IStat"/> field.
            </summary>
            <param name="rect"></param>
            <param name="property"></param>
            <param name="stackingType"></param>
            <param name="affectionsType"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.LevelStatField``2(UnityEngine.Rect,UnityEditor.SerializedProperty)">
            <summary>
            Draws a <see cref="!:LevelStat"/> field.
            </summary>
            <typeparam name="TStacking"></typeparam>
            <typeparam name="TAffection"></typeparam>
            <param name="rect"></param>
            <param name="property"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.LevelStatField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,System.Type)">
            <summary>
            Draws a <see cref="!:LevelStat"/> field.
            </summary>
            <param name="rect"></param>
            <param name="property"></param>
            <param name="stackingType"></param>
            <param name="affectionsType"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.CountdownStatField``2(UnityEngine.Rect,UnityEditor.SerializedProperty)">
            <summary>
            Draws a <see cref="!:CountdownStat"/> field.
            </summary>
            <typeparam name="TStacking"></typeparam>
            <typeparam name="TAffection"></typeparam>
            <param name="rect"></param>
            <param name="property"></param>
        </member>
        <member name="M:WarWolfWorks.EditorBase.Utility.EditorHooks.Drawers.CountdownStatField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,System.Type)">
            <summary>
            Draws a <see cref="!:CountdownStat"/> field.
            </summary>
            <param name="rect"></param>
            <param name="property"></param>
            <param name="stackingType"></param>
            <param name="affectionsType"></param>
        </member>
    </members>
</doc>
